
prog1Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08008df8  08008df8  00018df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000000  08009178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000368  2000009c  08009214  0002009c  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000404  08009214  00020404  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004d36  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000db3  00000000  00000000  00024dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000148  00000000  00000000  00025bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001ce6  00000000  00000000  00025cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015a6  00000000  00000000  000279de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      0000007c  00000000  00000000  00028f84  2**0
                  CONTENTS, READONLY
 15 .debug_frame  0000165c  00000000  00000000  00029000  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000020  00000000  00000000  0002a660  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008ddc 	.word	0x08008ddc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	08008ddc 	.word	0x08008ddc

08000108 <APP_SX1272_setup>:

///////////////////////////////////////////////////////////////
// Setup function
///////////////////////////////////////////////////////////////
void APP_SX1272_setup()
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
  // Power ON the module
  e = BSP_SX1272_ON(type_modulation);
 800010c:	4b78      	ldr	r3, [pc, #480]	; (80002f0 <APP_SX1272_setup+0x1e8>)
 800010e:	681b      	ldr	r3, [r3, #0]
 8000110:	0018      	movs	r0, r3
 8000112:	f000 fdab 	bl	8000c6c <BSP_SX1272_ON>
 8000116:	0003      	movs	r3, r0
 8000118:	b25a      	sxtb	r2, r3
 800011a:	4b76      	ldr	r3, [pc, #472]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 800011c:	701a      	strb	r2, [r3, #0]
  if (e == 0)
 800011e:	4b75      	ldr	r3, [pc, #468]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 8000120:	781b      	ldrb	r3, [r3, #0]
 8000122:	b25b      	sxtb	r3, r3
 8000124:	2b00      	cmp	r3, #0
 8000126:	d104      	bne.n	8000132 <APP_SX1272_setup+0x2a>
  {
    my_printf("SX1272 Module on\r\n");
 8000128:	4b73      	ldr	r3, [pc, #460]	; (80002f8 <APP_SX1272_setup+0x1f0>)
 800012a:	0018      	movs	r0, r3
 800012c:	f000 fd20 	bl	8000b70 <my_printf>
 8000130:	e002      	b.n	8000138 <APP_SX1272_setup+0x30>
  }
  else
  {
    //my_printfln(F("Problem of activation of SX1272 Module !"));
    ConfigOK = 0;
 8000132:	4b72      	ldr	r3, [pc, #456]	; (80002fc <APP_SX1272_setup+0x1f4>)
 8000134:	2200      	movs	r2, #0
 8000136:	701a      	strb	r2, [r3, #0]
  }
  // Select frequency channel
  e = BSP_SX1272_setChannel(freq_centrale);
 8000138:	4b71      	ldr	r3, [pc, #452]	; (8000300 <APP_SX1272_setup+0x1f8>)
 800013a:	0018      	movs	r0, r3
 800013c:	f002 f8ca 	bl	80022d4 <BSP_SX1272_setChannel>
 8000140:	0003      	movs	r3, r0
 8000142:	001a      	movs	r2, r3
 8000144:	4b6b      	ldr	r3, [pc, #428]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 8000146:	701a      	strb	r2, [r3, #0]
  my_printf("Frequency channel ");
 8000148:	4b6e      	ldr	r3, [pc, #440]	; (8000304 <APP_SX1272_setup+0x1fc>)
 800014a:	0018      	movs	r0, r3
 800014c:	f000 fd10 	bl	8000b70 <my_printf>
  my_printf("%d",freq_centrale);
 8000150:	4a6b      	ldr	r2, [pc, #428]	; (8000300 <APP_SX1272_setup+0x1f8>)
 8000152:	4b6d      	ldr	r3, [pc, #436]	; (8000308 <APP_SX1272_setup+0x200>)
 8000154:	0011      	movs	r1, r2
 8000156:	0018      	movs	r0, r3
 8000158:	f000 fd0a 	bl	8000b70 <my_printf>
  if (e == 0)
 800015c:	4b65      	ldr	r3, [pc, #404]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	b25b      	sxtb	r3, r3
 8000162:	2b00      	cmp	r3, #0
 8000164:	d104      	bne.n	8000170 <APP_SX1272_setup+0x68>
  {
    my_printf(" has been successfully set.\r\n");
 8000166:	4b69      	ldr	r3, [pc, #420]	; (800030c <APP_SX1272_setup+0x204>)
 8000168:	0018      	movs	r0, r3
 800016a:	f000 fd01 	bl	8000b70 <my_printf>
 800016e:	e006      	b.n	800017e <APP_SX1272_setup+0x76>
  }
  else
  {
    my_printf(" has not been set !\r\n");
 8000170:	4b67      	ldr	r3, [pc, #412]	; (8000310 <APP_SX1272_setup+0x208>)
 8000172:	0018      	movs	r0, r3
 8000174:	f000 fcfc 	bl	8000b70 <my_printf>
    ConfigOK = 0;
 8000178:	4b60      	ldr	r3, [pc, #384]	; (80002fc <APP_SX1272_setup+0x1f4>)
 800017a:	2200      	movs	r2, #0
 800017c:	701a      	strb	r2, [r3, #0]
  }
  // Select output power
  e = BSP_SX1272_setPower(OutPower);
 800017e:	200f      	movs	r0, #15
 8000180:	f002 f956 	bl	8002430 <BSP_SX1272_setPower>
 8000184:	0003      	movs	r3, r0
 8000186:	001a      	movs	r2, r3
 8000188:	4b5a      	ldr	r3, [pc, #360]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 800018a:	701a      	strb	r2, [r3, #0]
  my_printf("Output power ");
 800018c:	4b61      	ldr	r3, [pc, #388]	; (8000314 <APP_SX1272_setup+0x20c>)
 800018e:	0018      	movs	r0, r3
 8000190:	f000 fcee 	bl	8000b70 <my_printf>
  my_printf("%d",OutPower);
 8000194:	4b5c      	ldr	r3, [pc, #368]	; (8000308 <APP_SX1272_setup+0x200>)
 8000196:	210f      	movs	r1, #15
 8000198:	0018      	movs	r0, r3
 800019a:	f000 fce9 	bl	8000b70 <my_printf>
  if (e == 0)
 800019e:	4b55      	ldr	r3, [pc, #340]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	b25b      	sxtb	r3, r3
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d104      	bne.n	80001b2 <APP_SX1272_setup+0xaa>
  {
    my_printf(" has been successfully set.\r\n");
 80001a8:	4b58      	ldr	r3, [pc, #352]	; (800030c <APP_SX1272_setup+0x204>)
 80001aa:	0018      	movs	r0, r3
 80001ac:	f000 fce0 	bl	8000b70 <my_printf>
 80001b0:	e006      	b.n	80001c0 <APP_SX1272_setup+0xb8>
  }
  else
  {
    my_printf(" has not been set !\r\n");
 80001b2:	4b57      	ldr	r3, [pc, #348]	; (8000310 <APP_SX1272_setup+0x208>)
 80001b4:	0018      	movs	r0, r3
 80001b6:	f000 fcdb 	bl	8000b70 <my_printf>
    ConfigOK = 0;
 80001ba:	4b50      	ldr	r3, [pc, #320]	; (80002fc <APP_SX1272_setup+0x1f4>)
 80001bc:	2200      	movs	r2, #0
 80001be:	701a      	strb	r2, [r3, #0]
  }

  if (ConfigOK == 1)
 80001c0:	4b4e      	ldr	r3, [pc, #312]	; (80002fc <APP_SX1272_setup+0x1f4>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d000      	beq.n	80001ca <APP_SX1272_setup+0xc2>
 80001c8:	e082      	b.n	80002d0 <APP_SX1272_setup+0x1c8>
  {
	//////////////////////////////////////////////////////////////////////
  //config supplémentaire mode LORA
	//////////////////////////////////////////////////////////////////////
    if(type_modulation==0)
 80001ca:	4b49      	ldr	r3, [pc, #292]	; (80002f0 <APP_SX1272_setup+0x1e8>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d132      	bne.n	8000238 <APP_SX1272_setup+0x130>
    {
      // Set header
      e = BSP_SX1272_setHeaderON();
 80001d2:	f001 f91b 	bl	800140c <BSP_SX1272_setHeaderON>
 80001d6:	0003      	movs	r3, r0
 80001d8:	001a      	movs	r2, r3
 80001da:	4b46      	ldr	r3, [pc, #280]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 80001dc:	701a      	strb	r2, [r3, #0]
      // Set transmission mode
      e = BSP_SX1272_setCR(paramCR);    // CR_5 : CR = 4/5
 80001de:	2001      	movs	r0, #1
 80001e0:	f001 fe9a 	bl	8001f18 <BSP_SX1272_setCR>
 80001e4:	0003      	movs	r3, r0
 80001e6:	001a      	movs	r2, r3
 80001e8:	4b42      	ldr	r3, [pc, #264]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 80001ea:	701a      	strb	r2, [r3, #0]
      e = BSP_SX1272_setSF(paramSF);   // SF = 12
 80001ec:	200c      	movs	r0, #12
 80001ee:	f001 fb0b 	bl	8001808 <BSP_SX1272_setSF>
 80001f2:	0003      	movs	r3, r0
 80001f4:	b25a      	sxtb	r2, r3
 80001f6:	4b3f      	ldr	r3, [pc, #252]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 80001f8:	701a      	strb	r2, [r3, #0]
      e = BSP_SX1272_setBW(paramBW);    // BW = 125 KHz
 80001fa:	2000      	movs	r0, #0
 80001fc:	f001 fd40 	bl	8001c80 <BSP_SX1272_setBW>
 8000200:	0003      	movs	r3, r0
 8000202:	001a      	movs	r2, r3
 8000204:	4b3b      	ldr	r3, [pc, #236]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 8000206:	701a      	strb	r2, [r3, #0]
      // Set CRC
      e = BSP_SX1272_setCRC_ON();
 8000208:	f001 f9e2 	bl	80015d0 <BSP_SX1272_setCRC_ON>
 800020c:	0003      	movs	r3, r0
 800020e:	b25a      	sxtb	r2, r3
 8000210:	4b38      	ldr	r3, [pc, #224]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 8000212:	701a      	strb	r2, [r3, #0]
      // Set the node address
      e = BSP_SX1272_setNodeAddress(RX_Addr);
 8000214:	2008      	movs	r0, #8
 8000216:	f002 fae7 	bl	80027e8 <BSP_SX1272_setNodeAddress>
 800021a:	0003      	movs	r3, r0
 800021c:	001a      	movs	r2, r3
 800021e:	4b35      	ldr	r3, [pc, #212]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 8000220:	701a      	strb	r2, [r3, #0]
      // Set the length of preamble
      e = BSP_SX1272_setPreambleLength(PreambLong);
 8000222:	200c      	movs	r0, #12
 8000224:	f002 f9b2 	bl	800258c <BSP_SX1272_setPreambleLength>
 8000228:	0003      	movs	r3, r0
 800022a:	b25a      	sxtb	r2, r3
 800022c:	4b31      	ldr	r3, [pc, #196]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 800022e:	701a      	strb	r2, [r3, #0]
      // Set the number of transmission retries
      currentstate._maxRetries = MaxNbRetries;
 8000230:	4b39      	ldr	r3, [pc, #228]	; (8000318 <APP_SX1272_setup+0x210>)
 8000232:	2203      	movs	r2, #3
 8000234:	769a      	strb	r2, [r3, #26]
 8000236:	e046      	b.n	80002c6 <APP_SX1272_setup+0x1be>
	//config supplémentaire mode FSK
	//////////////////////////////////////////////////////////////////////
    else
    {
      // Set CRC
      e = BSP_SX1272_setCRC_ON();
 8000238:	f001 f9ca 	bl	80015d0 <BSP_SX1272_setCRC_ON>
 800023c:	0003      	movs	r3, r0
 800023e:	b25a      	sxtb	r2, r3
 8000240:	4b2c      	ldr	r3, [pc, #176]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 8000242:	701a      	strb	r2, [r3, #0]
      // Set the node address
      e = BSP_SX1272_setNodeAddress(RX_Addr);
 8000244:	2008      	movs	r0, #8
 8000246:	f002 facf 	bl	80027e8 <BSP_SX1272_setNodeAddress>
 800024a:	0003      	movs	r3, r0
 800024c:	001a      	movs	r2, r3
 800024e:	4b29      	ldr	r3, [pc, #164]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 8000250:	701a      	strb	r2, [r3, #0]
      // Set the length of preamble
      e = BSP_SX1272_setPreambleLength(PreambLong);
 8000252:	200c      	movs	r0, #12
 8000254:	f002 f99a 	bl	800258c <BSP_SX1272_setPreambleLength>
 8000258:	0003      	movs	r3, r0
 800025a:	b25a      	sxtb	r2, r3
 800025c:	4b25      	ldr	r3, [pc, #148]	; (80002f4 <APP_SX1272_setup+0x1ec>)
 800025e:	701a      	strb	r2, [r3, #0]
      // Set the number of transmission retries
      currentstate._maxRetries = MaxNbRetries;
 8000260:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <APP_SX1272_setup+0x210>)
 8000262:	2203      	movs	r2, #3
 8000264:	769a      	strb	r2, [r3, #26]

      BSP_SX1272_Write(REG_SYNC_VALUE1,0x05);
 8000266:	2105      	movs	r1, #5
 8000268:	2028      	movs	r0, #40	; 0x28
 800026a:	f004 fb17 	bl	800489c <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_SYNC_VALUE2,0x05);
 800026e:	2105      	movs	r1, #5
 8000270:	2029      	movs	r0, #41	; 0x29
 8000272:	f004 fb13 	bl	800489c <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_SYNC_VALUE3,0x05);
 8000276:	2105      	movs	r1, #5
 8000278:	202a      	movs	r0, #42	; 0x2a
 800027a:	f004 fb0f 	bl	800489c <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_SYNC_VALUE4,0x05);
 800027e:	2105      	movs	r1, #5
 8000280:	202b      	movs	r0, #43	; 0x2b
 8000282:	f004 fb0b 	bl	800489c <BSP_SX1272_Write>

	  //Set the frequency deviation an bit rate parameters
	  BSP_SX1272_Write(REG_FDEV_MSB,(RegFdev>>8)&0x00FF);// FDA = Fstep*FDEV = 61Hz*Fdev : ex: 0x7FF*61 = 125kHz ex2: 0X52*61=5kHz
 8000286:	4b25      	ldr	r3, [pc, #148]	; (800031c <APP_SX1272_setup+0x214>)
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	0a1b      	lsrs	r3, r3, #8
 800028c:	b29b      	uxth	r3, r3
 800028e:	b2db      	uxtb	r3, r3
 8000290:	0019      	movs	r1, r3
 8000292:	2004      	movs	r0, #4
 8000294:	f004 fb02 	bl	800489c <BSP_SX1272_Write>
	  BSP_SX1272_Write(REG_FDEV_LSB,RegFdev&0x00FF);//...
 8000298:	4b20      	ldr	r3, [pc, #128]	; (800031c <APP_SX1272_setup+0x214>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	b2db      	uxtb	r3, r3
 800029e:	0019      	movs	r1, r3
 80002a0:	2005      	movs	r0, #5
 80002a2:	f004 fafb 	bl	800489c <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_BITRATE_MSB,(RegBitRate>>8)&0x00FF);//FXOSC=32Mz, BR = FXOSC/(Bitrate + BitrateFrac/16), ex: FXOSC/0x682B = 1200 bauds, ex2: FXOSC/0x200=62.5 kbauds
 80002a6:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <APP_SX1272_setup+0x218>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	0a1b      	lsrs	r3, r3, #8
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	0019      	movs	r1, r3
 80002b2:	2002      	movs	r0, #2
 80002b4:	f004 faf2 	bl	800489c <BSP_SX1272_Write>
      BSP_SX1272_Write(REG_BITRATE_LSB,RegBitRate&0x00FF);//...
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <APP_SX1272_setup+0x218>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	0019      	movs	r1, r3
 80002c0:	2003      	movs	r0, #3
 80002c2:	f004 faeb 	bl	800489c <BSP_SX1272_Write>

    }
    my_printf("SX1272 successfully configured !\r\n");
 80002c6:	4b17      	ldr	r3, [pc, #92]	; (8000324 <APP_SX1272_setup+0x21c>)
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fc51 	bl	8000b70 <my_printf>
 80002ce:	e003      	b.n	80002d8 <APP_SX1272_setup+0x1d0>
  }
  else
  {
    my_printf("SX1272 initialization failed !\r\n");
 80002d0:	4b15      	ldr	r3, [pc, #84]	; (8000328 <APP_SX1272_setup+0x220>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fc4c 	bl	8000b70 <my_printf>
  }

  waitPeriod = PeriodTransmission;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <APP_SX1272_setup+0x224>)
 80002da:	4a15      	ldr	r2, [pc, #84]	; (8000330 <APP_SX1272_setup+0x228>)
 80002dc:	601a      	str	r2, [r3, #0]

  BSP_DELAY_ms(1000);
 80002de:	23fa      	movs	r3, #250	; 0xfa
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	0018      	movs	r0, r3
 80002e4:	f004 fb2e 	bl	8004944 <BSP_DELAY_ms>
}
 80002e8:	46c0      	nop			; (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	20000024 	.word	0x20000024
 80002f4:	200000c4 	.word	0x200000c4
 80002f8:	08008df8 	.word	0x08008df8
 80002fc:	2000002c 	.word	0x2000002c
 8000300:	00d91333 	.word	0x00d91333
 8000304:	08008e0c 	.word	0x08008e0c
 8000308:	08008e20 	.word	0x08008e20
 800030c:	08008e24 	.word	0x08008e24
 8000310:	08008e44 	.word	0x08008e44
 8000314:	08008e5c 	.word	0x08008e5c
 8000318:	200000d4 	.word	0x200000d4
 800031c:	2000002a 	.word	0x2000002a
 8000320:	20000028 	.word	0x20000028
 8000324:	08008e6c 	.word	0x08008e6c
 8000328:	08008e90 	.word	0x08008e90
 800032c:	200000bc 	.word	0x200000bc
 8000330:	459c4000 	.word	0x459c4000

08000334 <APP_SX1272_runTransmit>:

void APP_SX1272_runTransmit()
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
  uint8_t dest_address = TX_Addr;
 800033a:	1dfb      	adds	r3, r7, #7
 800033c:	2200      	movs	r2, #0
 800033e:	701a      	strb	r2, [r3, #0]

  //////////////////////////////////////////////////////////////////////////////////
  // Transmit a packet continuously with a pause of "waitPeriod"
  if (ConfigOK == 1)
 8000340:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <APP_SX1272_runTransmit+0xb0>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d148      	bne.n	80003da <APP_SX1272_runTransmit+0xa6>
  {

    LgMsg=strlen(Message);
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <APP_SX1272_runTransmit+0xb4>)
 800034a:	0018      	movs	r0, r3
 800034c:	f004 fbf4 	bl	8004b38 <strlen>
 8000350:	0003      	movs	r3, r0
 8000352:	b2da      	uxtb	r2, r3
 8000354:	4b25      	ldr	r3, [pc, #148]	; (80003ec <APP_SX1272_runTransmit+0xb8>)
 8000356:	701a      	strb	r2, [r3, #0]
    e = BSP_SX1272_sendPacketTimeout(dest_address,Message,WaitTxMax);
 8000358:	4a25      	ldr	r2, [pc, #148]	; (80003f0 <APP_SX1272_runTransmit+0xbc>)
 800035a:	4923      	ldr	r1, [pc, #140]	; (80003e8 <APP_SX1272_runTransmit+0xb4>)
 800035c:	1dfb      	adds	r3, r7, #7
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	0018      	movs	r0, r3
 8000362:	f003 fd67 	bl	8003e34 <BSP_SX1272_sendPacketTimeout>
 8000366:	0003      	movs	r3, r0
 8000368:	b25a      	sxtb	r2, r3
 800036a:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <APP_SX1272_runTransmit+0xc0>)
 800036c:	701a      	strb	r2, [r3, #0]

    if(type_modulation)
 800036e:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <APP_SX1272_runTransmit+0xc4>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d003      	beq.n	800037e <APP_SX1272_runTransmit+0x4a>
    {
      BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE); // FSK standby mode to switch off the RF field
 8000376:	2101      	movs	r1, #1
 8000378:	2001      	movs	r0, #1
 800037a:	f004 fa8f 	bl	800489c <BSP_SX1272_Write>
    }

    if (e == 0)
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <APP_SX1272_runTransmit+0xc0>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b25b      	sxtb	r3, r3
 8000384:	2b00      	cmp	r3, #0
 8000386:	d11b      	bne.n	80003c0 <APP_SX1272_runTransmit+0x8c>
    {
      my_printf("\n Packet number ");
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <APP_SX1272_runTransmit+0xc8>)
 800038a:	0018      	movs	r0, r3
 800038c:	f000 fbf0 	bl	8000b70 <my_printf>
      my_printf("%d",cp);
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <APP_SX1272_runTransmit+0xcc>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <APP_SX1272_runTransmit+0xd0>)
 8000396:	0011      	movs	r1, r2
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fbe9 	bl	8000b70 <my_printf>
	  my_printf(" ;Rx node address ");
 800039e:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <APP_SX1272_runTransmit+0xd4>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fbe5 	bl	8000b70 <my_printf>
	  my_printf("%d\r\n",dest_address);
 80003a6:	1dfb      	adds	r3, r7, #7
 80003a8:	781a      	ldrb	r2, [r3, #0]
 80003aa:	4b18      	ldr	r3, [pc, #96]	; (800040c <APP_SX1272_runTransmit+0xd8>)
 80003ac:	0011      	movs	r1, r2
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 fbde 	bl	8000b70 <my_printf>
      cp++;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <APP_SX1272_runTransmit+0xcc>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1c5a      	adds	r2, r3, #1
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <APP_SX1272_runTransmit+0xcc>)
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	e003      	b.n	80003c8 <APP_SX1272_runTransmit+0x94>
    }
    else
    {
      my_printf("\n Trasmission problem !\r\n");
 80003c0:	4b13      	ldr	r3, [pc, #76]	; (8000410 <APP_SX1272_runTransmit+0xdc>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 fbd4 	bl	8000b70 <my_printf>
    }
    BSP_DELAY_ms(waitPeriod); //delay to send packet every PeriodTransmission
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <APP_SX1272_runTransmit+0xe0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	1c18      	adds	r0, r3, #0
 80003ce:	f004 fdd3 	bl	8004f78 <__aeabi_f2uiz>
 80003d2:	0003      	movs	r3, r0
 80003d4:	0018      	movs	r0, r3
 80003d6:	f004 fab5 	bl	8004944 <BSP_DELAY_ms>
  }
}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	46bd      	mov	sp, r7
 80003de:	b002      	add	sp, #8
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	2000002c 	.word	0x2000002c
 80003e8:	20000004 	.word	0x20000004
 80003ec:	200000b8 	.word	0x200000b8
 80003f0:	00001388 	.word	0x00001388
 80003f4:	200000c4 	.word	0x200000c4
 80003f8:	20000024 	.word	0x20000024
 80003fc:	08008eb4 	.word	0x08008eb4
 8000400:	200000c0 	.word	0x200000c0
 8000404:	08008e20 	.word	0x08008e20
 8000408:	08008ec8 	.word	0x08008ec8
 800040c:	08008edc 	.word	0x08008edc
 8000410:	08008ee4 	.word	0x08008ee4
 8000414:	200000bc 	.word	0x200000bc

08000418 <APP_SX1272_runReceive>:

void APP_SX1272_runReceive()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
  char StatusRXMessage='0';
 800041e:	1dfb      	adds	r3, r7, #7
 8000420:	2230      	movs	r2, #48	; 0x30
 8000422:	701a      	strb	r2, [r3, #0]

  //////////////////////////////////////////////////////////////////////////////////
  // Receive packets continuously
  if (ConfigOK == 1)
 8000424:	4b4e      	ldr	r3, [pc, #312]	; (8000560 <APP_SX1272_runReceive+0x148>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d000      	beq.n	800042e <APP_SX1272_runReceive+0x16>
 800042c:	e08f      	b.n	800054e <APP_SX1272_runReceive+0x136>
  {
	    //affichage entête
	    //statut (correct = 1 or bad = 0 or non received = 2)
	  my_printf("\n \r\n");
 800042e:	4b4d      	ldr	r3, [pc, #308]	; (8000564 <APP_SX1272_runReceive+0x14c>)
 8000430:	0018      	movs	r0, r3
 8000432:	f000 fb9d 	bl	8000b70 <my_printf>
	  my_printf("Packet status ; Packet number ; Received Lg ; Received data ; RSSI packet (dBm) ; source address; PER (%); BER (%)\r\n");
 8000436:	4b4c      	ldr	r3, [pc, #304]	; (8000568 <APP_SX1272_runReceive+0x150>)
 8000438:	0018      	movs	r0, r3
 800043a:	f000 fb99 	bl	8000b70 <my_printf>
	  my_printf("\n \r\n");
 800043e:	4b49      	ldr	r3, [pc, #292]	; (8000564 <APP_SX1272_runReceive+0x14c>)
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fb95 	bl	8000b70 <my_printf>

    e = BSP_SX1272_receivePacketTimeout(WaitRxMax);
 8000446:	4b49      	ldr	r3, [pc, #292]	; (800056c <APP_SX1272_runReceive+0x154>)
 8000448:	0018      	movs	r0, r3
 800044a:	f002 fdd1 	bl	8002ff0 <BSP_SX1272_receivePacketTimeout>
 800044e:	0003      	movs	r3, r0
 8000450:	b25a      	sxtb	r2, r3
 8000452:	4b47      	ldr	r3, [pc, #284]	; (8000570 <APP_SX1272_runReceive+0x158>)
 8000454:	701a      	strb	r2, [r3, #0]
    //paquet reçu, correct ou non
    if (e == 0)
 8000456:	4b46      	ldr	r3, [pc, #280]	; (8000570 <APP_SX1272_runReceive+0x158>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b25b      	sxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d124      	bne.n	80004aa <APP_SX1272_runReceive+0x92>
    {
      StatusRXMessage = '0';
 8000460:	1dfb      	adds	r3, r7, #7
 8000462:	2230      	movs	r2, #48	; 0x30
 8000464:	701a      	strb	r2, [r3, #0]
      if (currentstate._reception == CORRECT_PACKET)
 8000466:	4b43      	ldr	r3, [pc, #268]	; (8000574 <APP_SX1272_runReceive+0x15c>)
 8000468:	7e1b      	ldrb	r3, [r3, #24]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d120      	bne.n	80004b0 <APP_SX1272_runReceive+0x98>
      {
       // Check if the received packet is correct
       // The length and the content of the packet is checked
       // if it is valid, the cpok counter is incremented
       LgMsg=strlen(Message);
 800046e:	4b42      	ldr	r3, [pc, #264]	; (8000578 <APP_SX1272_runReceive+0x160>)
 8000470:	0018      	movs	r0, r3
 8000472:	f004 fb61 	bl	8004b38 <strlen>
 8000476:	0003      	movs	r3, r0
 8000478:	b2da      	uxtb	r2, r3
 800047a:	4b40      	ldr	r3, [pc, #256]	; (800057c <APP_SX1272_runReceive+0x164>)
 800047c:	701a      	strb	r2, [r3, #0]
       if(currentstate.packet_received.length>=LgMsg)//check the length
 800047e:	4a3d      	ldr	r2, [pc, #244]	; (8000574 <APP_SX1272_runReceive+0x15c>)
 8000480:	2390      	movs	r3, #144	; 0x90
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	5cd2      	ldrb	r2, [r2, r3]
 8000486:	4b3d      	ldr	r3, [pc, #244]	; (800057c <APP_SX1272_runReceive+0x164>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	429a      	cmp	r2, r3
 800048c:	d310      	bcc.n	80004b0 <APP_SX1272_runReceive+0x98>
       {
        if(memcmp(Message,currentstate.packet_received.data,LgMsg)==0)//check the content
 800048e:	4b3b      	ldr	r3, [pc, #236]	; (800057c <APP_SX1272_runReceive+0x164>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	001a      	movs	r2, r3
 8000494:	493a      	ldr	r1, [pc, #232]	; (8000580 <APP_SX1272_runReceive+0x168>)
 8000496:	4b38      	ldr	r3, [pc, #224]	; (8000578 <APP_SX1272_runReceive+0x160>)
 8000498:	0018      	movs	r0, r3
 800049a:	f007 fa07 	bl	80078ac <memcmp>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d106      	bne.n	80004b0 <APP_SX1272_runReceive+0x98>
        {
          StatusRXMessage = '1';
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	2231      	movs	r2, #49	; 0x31
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	e002      	b.n	80004b0 <APP_SX1272_runReceive+0x98>
      }
    }
    // RX Timeout !! No packet received
    else
    {
      StatusRXMessage = '2';
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	2232      	movs	r2, #50	; 0x32
 80004ae:	701a      	strb	r2, [r3, #0]
    }

    //////////////////////////////////////////////////////////////////////////////////
    // Plot receive packets in the serial monitor
    my_printf("%d",StatusRXMessage);
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	4b33      	ldr	r3, [pc, #204]	; (8000584 <APP_SX1272_runReceive+0x16c>)
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fb59 	bl	8000b70 <my_printf>
    my_printf(" ; ");
 80004be:	4b32      	ldr	r3, [pc, #200]	; (8000588 <APP_SX1272_runReceive+0x170>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fb55 	bl	8000b70 <my_printf>
    my_printf("%d",currentstate.packet_received.packnum);
 80004c6:	4a2b      	ldr	r2, [pc, #172]	; (8000574 <APP_SX1272_runReceive+0x15c>)
 80004c8:	2320      	movs	r3, #32
 80004ca:	33ff      	adds	r3, #255	; 0xff
 80004cc:	5cd3      	ldrb	r3, [r2, r3]
 80004ce:	001a      	movs	r2, r3
 80004d0:	4b2c      	ldr	r3, [pc, #176]	; (8000584 <APP_SX1272_runReceive+0x16c>)
 80004d2:	0011      	movs	r1, r2
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fb4b 	bl	8000b70 <my_printf>
    my_printf(" ; ");
 80004da:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <APP_SX1272_runReceive+0x170>)
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fb47 	bl	8000b70 <my_printf>
    my_printf("%d",currentstate.packet_received.length);
 80004e2:	4a24      	ldr	r2, [pc, #144]	; (8000574 <APP_SX1272_runReceive+0x15c>)
 80004e4:	2390      	movs	r3, #144	; 0x90
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	5cd3      	ldrb	r3, [r2, r3]
 80004ea:	001a      	movs	r2, r3
 80004ec:	4b25      	ldr	r3, [pc, #148]	; (8000584 <APP_SX1272_runReceive+0x16c>)
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fb3d 	bl	8000b70 <my_printf>
    my_printf(" ; ");
 80004f6:	4b24      	ldr	r3, [pc, #144]	; (8000588 <APP_SX1272_runReceive+0x170>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fb39 	bl	8000b70 <my_printf>
    for (uint8_t i =0; i < currentstate.packet_received.length-OFFSET_PAYLOADLENGTH; i++)
 80004fe:	1dbb      	adds	r3, r7, #6
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	e016      	b.n	8000534 <APP_SX1272_runReceive+0x11c>
    {
      my_printf("%c",currentstate.packet_received.data[i]);
 8000506:	1dbb      	adds	r3, r7, #6
 8000508:	781a      	ldrb	r2, [r3, #0]
 800050a:	491a      	ldr	r1, [pc, #104]	; (8000574 <APP_SX1272_runReceive+0x15c>)
 800050c:	2322      	movs	r3, #34	; 0x22
 800050e:	33ff      	adds	r3, #255	; 0xff
 8000510:	188a      	adds	r2, r1, r2
 8000512:	18d3      	adds	r3, r2, r3
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	001a      	movs	r2, r3
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <APP_SX1272_runReceive+0x174>)
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fb27 	bl	8000b70 <my_printf>
      my_printf(" ");
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <APP_SX1272_runReceive+0x178>)
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fb23 	bl	8000b70 <my_printf>
    for (uint8_t i =0; i < currentstate.packet_received.length-OFFSET_PAYLOADLENGTH; i++)
 800052a:	1dbb      	adds	r3, r7, #6
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	3201      	adds	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
 8000534:	1dbb      	adds	r3, r7, #6
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	490e      	ldr	r1, [pc, #56]	; (8000574 <APP_SX1272_runReceive+0x15c>)
 800053a:	2390      	movs	r3, #144	; 0x90
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	5ccb      	ldrb	r3, [r1, r3]
 8000540:	3b05      	subs	r3, #5
 8000542:	429a      	cmp	r2, r3
 8000544:	dbdf      	blt.n	8000506 <APP_SX1272_runReceive+0xee>
    }
    ///////////////////////////////////////////////////////////////////////////////////
    // Plot RSSI
    my_printf(" ; ");
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <APP_SX1272_runReceive+0x170>)
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fb11 	bl	8000b70 <my_printf>
    {
      //e = BSP_SX1272_getRSSI() done during RX, no packet RSSI available in FSK mode;
      //my_printf("%d\r\n",currentstate._RSSI);
    }
  }
  BSP_DELAY_ms(1000);
 800054e:	23fa      	movs	r3, #250	; 0xfa
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	0018      	movs	r0, r3
 8000554:	f004 f9f6 	bl	8004944 <BSP_DELAY_ms>
}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b002      	add	sp, #8
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000002c 	.word	0x2000002c
 8000564:	08008f00 	.word	0x08008f00
 8000568:	08008f08 	.word	0x08008f08
 800056c:	00002710 	.word	0x00002710
 8000570:	200000c4 	.word	0x200000c4
 8000574:	200000d4 	.word	0x200000d4
 8000578:	20000004 	.word	0x20000004
 800057c:	200000b8 	.word	0x200000b8
 8000580:	200001f5 	.word	0x200001f5
 8000584:	08008e20 	.word	0x08008e20
 8000588:	08008f80 	.word	0x08008f80
 800058c:	08008f84 	.word	0x08008f84
 8000590:	08008f88 	.word	0x08008f88

08000594 <main>:
#include "appSX1272.h"

static void SystemClock_Config();

int main()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	uint32_t curtime=0;
 800059a:	2300      	movs	r3, #0
 800059c:	603b      	str	r3, [r7, #0]
	uint32_t i=0;
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]

	// Initialize System clock to 48MHz from external clock
	SystemClock_Config();
 80005a2:	f000 f823 	bl	80005ec <SystemClock_Config>
	// Initialize timebase
	BSP_TIMER_Timebase_Init();
 80005a6:	f004 f873 	bl	8004690 <BSP_TIMER_Timebase_Init>
	// Initialize NVIC
	BSP_NVIC_Init();
 80005aa:	f004 f89f 	bl	80046ec <BSP_NVIC_Init>
	// Initialize SPI interface
	BSP_SPI1_Init();
 80005ae:	f004 f8b9 	bl	8004724 <BSP_SPI1_Init>
	// Initialize Debug Console
	BSP_Console_Init();
 80005b2:	f004 f809 	bl	80045c8 <BSP_Console_Init>

	my_printf("Console ready!\r\n");
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <main+0x54>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 fad9 	bl	8000b70 <my_printf>

	///////////////////////////////////////////
	//setup SX1272
	APP_SX1272_setup();
 80005be:	f7ff fda3 	bl	8000108 <APP_SX1272_setup>

	while(1)
	{
		curtime=BSP_millis();
 80005c2:	f004 f8a6 	bl	8004712 <BSP_millis>
 80005c6:	0003      	movs	r3, r0
 80005c8:	603b      	str	r3, [r7, #0]

		if((curtime%1000)==0)//send every 1000ms
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	23fa      	movs	r3, #250	; 0xfa
 80005ce:	0099      	lsls	r1, r3, #2
 80005d0:	0010      	movs	r0, r2
 80005d2:	f004 fb3f 	bl	8004c54 <__aeabi_uidivmod>
 80005d6:	1e0b      	subs	r3, r1, #0
 80005d8:	d1f3      	bne.n	80005c2 <main+0x2e>
		{
			APP_SX1272_runTransmit();
 80005da:	f7ff feab 	bl	8000334 <APP_SX1272_runTransmit>
			//APP_SX1272_runReceive();
			i++;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
		curtime=BSP_millis();
 80005e4:	e7ed      	b.n	80005c2 <main+0x2e>
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	08008f8c 	.word	0x08008f8c

080005ec <SystemClock_Config>:
 *
 *  Laurent Latorre - 05/08/2017
 */

static void SystemClock_Config()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
	uint32_t	HSE_Status;
	uint32_t	PLL_Status;
	uint32_t	SW_Status;
	uint32_t	timeout = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]

	timeout = 1000000;
 80005f6:	4b64      	ldr	r3, [pc, #400]	; (8000788 <SystemClock_Config+0x19c>)
 80005f8:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 80005fa:	4b64      	ldr	r3, [pc, #400]	; (800078c <SystemClock_Config+0x1a0>)
 80005fc:	4a63      	ldr	r2, [pc, #396]	; (800078c <SystemClock_Config+0x1a0>)
 80005fe:	6812      	ldr	r2, [r2, #0]
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	02c9      	lsls	r1, r1, #11
 8000604:	430a      	orrs	r2, r1
 8000606:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8000608:	4b60      	ldr	r3, [pc, #384]	; (800078c <SystemClock_Config+0x1a0>)
 800060a:	4a60      	ldr	r2, [pc, #384]	; (800078c <SystemClock_Config+0x1a0>)
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	0249      	lsls	r1, r1, #9
 8000612:	430a      	orrs	r2, r1
 8000614:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8000616:	4b5d      	ldr	r3, [pc, #372]	; (800078c <SystemClock_Config+0x1a0>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	2380      	movs	r3, #128	; 0x80
 800061c:	029b      	lsls	r3, r3, #10
 800061e:	4013      	ands	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
		timeout--;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3b01      	subs	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d102      	bne.n	8000634 <SystemClock_Config+0x48>
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f0      	bne.n	8000616 <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8000634:	4b55      	ldr	r3, [pc, #340]	; (800078c <SystemClock_Config+0x1a0>)
 8000636:	4a55      	ldr	r2, [pc, #340]	; (800078c <SystemClock_Config+0x1a0>)
 8000638:	6852      	ldr	r2, [r2, #4]
 800063a:	4955      	ldr	r1, [pc, #340]	; (8000790 <SystemClock_Config+0x1a4>)
 800063c:	400a      	ands	r2, r1
 800063e:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 <<RCC_CFGR_PLLSRC_Pos);
 8000640:	4b52      	ldr	r3, [pc, #328]	; (800078c <SystemClock_Config+0x1a0>)
 8000642:	4a52      	ldr	r2, [pc, #328]	; (800078c <SystemClock_Config+0x1a0>)
 8000644:	6852      	ldr	r2, [r2, #4]
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0249      	lsls	r1, r1, #9
 800064a:	430a      	orrs	r2, r1
 800064c:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 800064e:	4b4f      	ldr	r3, [pc, #316]	; (800078c <SystemClock_Config+0x1a0>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8000654:	4b4d      	ldr	r3, [pc, #308]	; (800078c <SystemClock_Config+0x1a0>)
 8000656:	4a4d      	ldr	r2, [pc, #308]	; (800078c <SystemClock_Config+0x1a0>)
 8000658:	6852      	ldr	r2, [r2, #4]
 800065a:	494e      	ldr	r1, [pc, #312]	; (8000794 <SystemClock_Config+0x1a8>)
 800065c:	400a      	ands	r2, r1
 800065e:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 <<RCC_CFGR_PLLMUL_Pos);
 8000660:	4b4a      	ldr	r3, [pc, #296]	; (800078c <SystemClock_Config+0x1a0>)
 8000662:	4a4a      	ldr	r2, [pc, #296]	; (800078c <SystemClock_Config+0x1a0>)
 8000664:	6852      	ldr	r2, [r2, #4]
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	0349      	lsls	r1, r1, #13
 800066a:	430a      	orrs	r2, r1
 800066c:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;
 800066e:	4b47      	ldr	r3, [pc, #284]	; (800078c <SystemClock_Config+0x1a0>)
 8000670:	4a46      	ldr	r2, [pc, #280]	; (800078c <SystemClock_Config+0x1a0>)
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0449      	lsls	r1, r1, #17
 8000678:	430a      	orrs	r2, r1
 800067a:	601a      	str	r2, [r3, #0]

	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 800067c:	4b43      	ldr	r3, [pc, #268]	; (800078c <SystemClock_Config+0x1a0>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	049b      	lsls	r3, r3, #18
 8000684:	4013      	ands	r3, r2
 8000686:	607b      	str	r3, [r7, #4]
		timeout--;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3b01      	subs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <SystemClock_Config+0xae>
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1f0      	bne.n	800067c <SystemClock_Config+0x90>

        // Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 800069a:	4b3c      	ldr	r3, [pc, #240]	; (800078c <SystemClock_Config+0x1a0>)
 800069c:	4a3b      	ldr	r2, [pc, #236]	; (800078c <SystemClock_Config+0x1a0>)
 800069e:	6852      	ldr	r2, [r2, #4]
 80006a0:	21f0      	movs	r1, #240	; 0xf0
 80006a2:	438a      	bics	r2, r1
 80006a4:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80006a6:	4b39      	ldr	r3, [pc, #228]	; (800078c <SystemClock_Config+0x1a0>)
 80006a8:	4a38      	ldr	r2, [pc, #224]	; (800078c <SystemClock_Config+0x1a0>)
 80006aa:	6852      	ldr	r2, [r2, #4]
 80006ac:	605a      	str	r2, [r3, #4]

	//Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemClock_Config+0x1a0>)
 80006b0:	4a36      	ldr	r2, [pc, #216]	; (800078c <SystemClock_Config+0x1a0>)
 80006b2:	6852      	ldr	r2, [r2, #4]
 80006b4:	4938      	ldr	r1, [pc, #224]	; (8000798 <SystemClock_Config+0x1ac>)
 80006b6:	400a      	ands	r2, r1
 80006b8:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemClock_Config+0x1a0>)
 80006bc:	4a33      	ldr	r2, [pc, #204]	; (800078c <SystemClock_Config+0x1a0>)
 80006be:	6852      	ldr	r2, [r2, #4]
 80006c0:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80006c2:	4b36      	ldr	r3, [pc, #216]	; (800079c <SystemClock_Config+0x1b0>)
 80006c4:	2211      	movs	r2, #17
 80006c6:	601a      	str	r2, [r3, #0]

	/* --- Until this point, MCU was still clocked by HSI at 8MHz ---*/
	/* --- Switching to PLL at 48MHz Now!  Fasten your seat belt! ---*/

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemClock_Config+0x1a0>)
 80006ca:	4a30      	ldr	r2, [pc, #192]	; (800078c <SystemClock_Config+0x1a0>)
 80006cc:	6852      	ldr	r2, [r2, #4]
 80006ce:	2103      	movs	r1, #3
 80006d0:	438a      	bics	r2, r1
 80006d2:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <SystemClock_Config+0x1a0>)
 80006d6:	4a2d      	ldr	r2, [pc, #180]	; (800078c <SystemClock_Config+0x1a0>)
 80006d8:	6852      	ldr	r2, [r2, #4]
 80006da:	2102      	movs	r1, #2
 80006dc:	430a      	orrs	r2, r1
 80006de:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <SystemClock_Config+0x1a0>)
 80006e2:	685b      	ldr	r3, [r3, #4]
 80006e4:	220c      	movs	r2, #12
 80006e6:	4013      	ands	r3, r2
 80006e8:	603b      	str	r3, [r7, #0]
		timeout--;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	2b08      	cmp	r3, #8
 80006f4:	d002      	beq.n	80006fc <SystemClock_Config+0x110>
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f1      	bne.n	80006e0 <SystemClock_Config+0xf4>
	/* --- Here we go! ---*/

	/*--- Use PA8 as MCO output at 48/16 = 3MHz ---*/

	// Set MCO source as SYSCLK (48MHz)
	RCC->CFGR &= ~RCC_CFGR_MCO_Msk;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemClock_Config+0x1a0>)
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <SystemClock_Config+0x1a0>)
 8000700:	6852      	ldr	r2, [r2, #4]
 8000702:	4927      	ldr	r1, [pc, #156]	; (80007a0 <SystemClock_Config+0x1b4>)
 8000704:	400a      	ands	r2, r1
 8000706:	605a      	str	r2, [r3, #4]
	RCC->CFGR |=  RCC_CFGR_MCOSEL_SYSCLK;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemClock_Config+0x1a0>)
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <SystemClock_Config+0x1a0>)
 800070c:	6852      	ldr	r2, [r2, #4]
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	04c9      	lsls	r1, r1, #19
 8000712:	430a      	orrs	r2, r1
 8000714:	605a      	str	r2, [r3, #4]

	// Set MCO prescaler to /16 -> 3MHz
	RCC->CFGR &= ~RCC_CFGR_MCOPRE_Msk;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemClock_Config+0x1a0>)
 8000718:	4a1c      	ldr	r2, [pc, #112]	; (800078c <SystemClock_Config+0x1a0>)
 800071a:	6852      	ldr	r2, [r2, #4]
 800071c:	4921      	ldr	r1, [pc, #132]	; (80007a4 <SystemClock_Config+0x1b8>)
 800071e:	400a      	ands	r2, r1
 8000720:	605a      	str	r2, [r3, #4]
	RCC->CFGR |=  RCC_CFGR_MCOPRE_DIV16;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemClock_Config+0x1a0>)
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <SystemClock_Config+0x1a0>)
 8000726:	6852      	ldr	r2, [r2, #4]
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	05c9      	lsls	r1, r1, #23
 800072c:	430a      	orrs	r2, r1
 800072e:	605a      	str	r2, [r3, #4]

	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemClock_Config+0x1a0>)
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <SystemClock_Config+0x1a0>)
 8000734:	6952      	ldr	r2, [r2, #20]
 8000736:	2180      	movs	r1, #128	; 0x80
 8000738:	0289      	lsls	r1, r1, #10
 800073a:	430a      	orrs	r2, r1
 800073c:	615a      	str	r2, [r3, #20]

	// Configure PA8 as Alternate function
	GPIOA->MODER &= ~GPIO_MODER_MODER8_Msk;
 800073e:	2390      	movs	r3, #144	; 0x90
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	2290      	movs	r2, #144	; 0x90
 8000744:	05d2      	lsls	r2, r2, #23
 8000746:	6812      	ldr	r2, [r2, #0]
 8000748:	4917      	ldr	r1, [pc, #92]	; (80007a8 <SystemClock_Config+0x1bc>)
 800074a:	400a      	ands	r2, r1
 800074c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER8_Pos);
 800074e:	2390      	movs	r3, #144	; 0x90
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2290      	movs	r2, #144	; 0x90
 8000754:	05d2      	lsls	r2, r2, #23
 8000756:	6812      	ldr	r2, [r2, #0]
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	0289      	lsls	r1, r1, #10
 800075c:	430a      	orrs	r2, r1
 800075e:	601a      	str	r2, [r3, #0]

	// Set to AF0 (MCO output)
	GPIOA->AFR[1] &= ~(0x0000000F);
 8000760:	2390      	movs	r3, #144	; 0x90
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	2290      	movs	r2, #144	; 0x90
 8000766:	05d2      	lsls	r2, r2, #23
 8000768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800076a:	210f      	movs	r1, #15
 800076c:	438a      	bics	r2, r1
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |=  (0x00000000);
 8000770:	2390      	movs	r3, #144	; 0x90
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	2290      	movs	r2, #144	; 0x90
 8000776:	05d2      	lsls	r2, r2, #23
 8000778:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800077a:	625a      	str	r2, [r3, #36]	; 0x24

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 800077c:	f004 f95c 	bl	8004a38 <SystemCoreClockUpdate>
}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b004      	add	sp, #16
 8000786:	bd80      	pop	{r7, pc}
 8000788:	000f4240 	.word	0x000f4240
 800078c:	40021000 	.word	0x40021000
 8000790:	fffe7fff 	.word	0xfffe7fff
 8000794:	ffc3ffff 	.word	0xffc3ffff
 8000798:	fffff8ff 	.word	0xfffff8ff
 800079c:	40022000 	.word	0x40022000
 80007a0:	f0ffffff 	.word	0xf0ffffff
 80007a4:	8fffffff 	.word	0x8fffffff
 80007a8:	fffcffff 	.word	0xfffcffff

080007ac <printchar>:

#include <stdarg.h>
#include "stm32f0xx.h"

static void printchar(char **str, int c)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	if (str) {
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00a      	beq.n	80007d2 <printchar+0x26>
		**str = c;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	701a      	strb	r2, [r3, #0]
		++(*str);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	601a      	str	r2, [r3, #0]
	else
	{
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
		USART2->TDR = c;
	}
}
 80007d0:	e00a      	b.n	80007e8 <printchar+0x3c>
		while ( (USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <printchar+0x44>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	2240      	movs	r2, #64	; 0x40
 80007da:	4013      	ands	r3, r2
 80007dc:	2b40      	cmp	r3, #64	; 0x40
 80007de:	d1f9      	bne.n	80007d4 <printchar+0x28>
		USART2->TDR = c;
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <printchar+0x44>)
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	b292      	uxth	r2, r2
 80007e6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b002      	add	sp, #8
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40004400 	.word	0x40004400

080007f4 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6178      	str	r0, [r7, #20]
 80007fc:	6139      	str	r1, [r7, #16]
 80007fe:	60fa      	str	r2, [r7, #12]
 8000800:	60bb      	str	r3, [r7, #8]
	register int pc = 0, padchar = ' ';
 8000802:	2400      	movs	r4, #0
 8000804:	2320      	movs	r3, #32
 8000806:	607b      	str	r3, [r7, #4]

	if (width > 0) {
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	dd16      	ble.n	800083c <prints+0x48>
		register int len = 0;
 800080e:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 8000810:	693e      	ldr	r6, [r7, #16]
 8000812:	e001      	b.n	8000818 <prints+0x24>
 8000814:	3501      	adds	r5, #1
 8000816:	3601      	adds	r6, #1
 8000818:	7833      	ldrb	r3, [r6, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1fa      	bne.n	8000814 <prints+0x20>
		if (len >= width) width = 0;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	429d      	cmp	r5, r3
 8000822:	db02      	blt.n	800082a <prints+0x36>
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e002      	b.n	8000830 <prints+0x3c>
		else width -= len;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	1b5b      	subs	r3, r3, r5
 800082e:	60fb      	str	r3, [r7, #12]
		if (pad & PAD_ZERO) padchar = '0';
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	2202      	movs	r2, #2
 8000834:	4013      	ands	r3, r2
 8000836:	d001      	beq.n	800083c <prints+0x48>
 8000838:	2330      	movs	r3, #48	; 0x30
 800083a:	607b      	str	r3, [r7, #4]
	}
	if (!(pad & PAD_RIGHT)) {
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	2201      	movs	r2, #1
 8000840:	4013      	ands	r3, r2
 8000842:	d119      	bne.n	8000878 <prints+0x84>
		for ( ; width > 0; --width) {
 8000844:	e008      	b.n	8000858 <prints+0x64>
			printchar (out, padchar);
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	6879      	ldr	r1, [r7, #4]
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff ffae 	bl	80007ac <printchar>
			++pc;
 8000850:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3b01      	subs	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	dcf3      	bgt.n	8000846 <prints+0x52>
		}
	}
	for ( ; *string ; ++string) {
 800085e:	e00b      	b.n	8000878 <prints+0x84>
		printchar (out, *string);
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	001a      	movs	r2, r3
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff ff9e 	bl	80007ac <printchar>
		++pc;
 8000870:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	3301      	adds	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1ef      	bne.n	8000860 <prints+0x6c>
	}
	for ( ; width > 0; --width) {
 8000880:	e008      	b.n	8000894 <prints+0xa0>
		printchar (out, padchar);
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff ff90 	bl	80007ac <printchar>
		++pc;
 800088c:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3b01      	subs	r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b00      	cmp	r3, #0
 8000898:	dcf3      	bgt.n	8000882 <prints+0x8e>
	}

	return pc;
 800089a:	0023      	movs	r3, r4
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b007      	add	sp, #28
 80008a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008a4 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	46c6      	mov	lr, r8
 80008a8:	b500      	push	{lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6178      	str	r0, [r7, #20]
 80008b0:	6139      	str	r1, [r7, #16]
 80008b2:	60fa      	str	r2, [r7, #12]
 80008b4:	60bb      	str	r3, [r7, #8]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	4698      	mov	r8, r3
 80008ba:	2500      	movs	r5, #0
	register unsigned int u = i;
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	607b      	str	r3, [r7, #4]

	if (i == 0) {
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d119      	bne.n	80008fa <printi+0x56>
		print_buf[0] = '0';
 80008c6:	2314      	movs	r3, #20
 80008c8:	2208      	movs	r2, #8
 80008ca:	4694      	mov	ip, r2
 80008cc:	44bc      	add	ip, r7
 80008ce:	4463      	add	r3, ip
 80008d0:	2230      	movs	r2, #48	; 0x30
 80008d2:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 80008d4:	2314      	movs	r3, #20
 80008d6:	2208      	movs	r2, #8
 80008d8:	4694      	mov	ip, r2
 80008da:	44bc      	add	ip, r7
 80008dc:	4463      	add	r3, ip
 80008de:	2200      	movs	r2, #0
 80008e0:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 80008e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80008e6:	2114      	movs	r1, #20
 80008e8:	2008      	movs	r0, #8
 80008ea:	4684      	mov	ip, r0
 80008ec:	44bc      	add	ip, r7
 80008ee:	4461      	add	r1, ip
 80008f0:	6978      	ldr	r0, [r7, #20]
 80008f2:	f7ff ff7f 	bl	80007f4 <prints>
 80008f6:	0003      	movs	r3, r0
 80008f8:	e04f      	b.n	800099a <printi+0xf6>
	}

	if (sg && b == 10 && i < 0) {
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00a      	beq.n	8000916 <printi+0x72>
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b0a      	cmp	r3, #10
 8000904:	d107      	bne.n	8000916 <printi+0x72>
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	2b00      	cmp	r3, #0
 800090a:	da04      	bge.n	8000916 <printi+0x72>
		neg = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	4698      	mov	r8, r3
		u = -i;
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	425b      	negs	r3, r3
 8000914:	607b      	str	r3, [r7, #4]
	}

	s = print_buf + PRINT_BUF_LEN-1;
 8000916:	2314      	movs	r3, #20
 8000918:	2208      	movs	r2, #8
 800091a:	18ba      	adds	r2, r7, r2
 800091c:	18d4      	adds	r4, r2, r3
 800091e:	340b      	adds	r4, #11
	*s = '\0';
 8000920:	2300      	movs	r3, #0
 8000922:	7023      	strb	r3, [r4, #0]

	while (u) {
 8000924:	e017      	b.n	8000956 <printi+0xb2>
		t = u % b;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	0019      	movs	r1, r3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f004 f992 	bl	8004c54 <__aeabi_uidivmod>
 8000930:	000b      	movs	r3, r1
 8000932:	001e      	movs	r6, r3
		if( t >= 10 )
 8000934:	2e09      	cmp	r6, #9
 8000936:	dd02      	ble.n	800093e <printi+0x9a>
			t += letbase - '0' - 10;
 8000938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800093a:	3b3a      	subs	r3, #58	; 0x3a
 800093c:	18f6      	adds	r6, r6, r3
		*--s = t + '0';
 800093e:	3c01      	subs	r4, #1
 8000940:	b2f3      	uxtb	r3, r6
 8000942:	3330      	adds	r3, #48	; 0x30
 8000944:	b2db      	uxtb	r3, r3
 8000946:	7023      	strb	r3, [r4, #0]
		u /= b;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	0019      	movs	r1, r3
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f004 f8fb 	bl	8004b48 <__udivsi3>
 8000952:	0003      	movs	r3, r0
 8000954:	607b      	str	r3, [r7, #4]
	while (u) {
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1e4      	bne.n	8000926 <printi+0x82>
	}

	if (neg) {
 800095c:	4643      	mov	r3, r8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d013      	beq.n	800098a <printi+0xe6>
		if( width && (pad & PAD_ZERO) ) {
 8000962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00d      	beq.n	8000984 <printi+0xe0>
 8000968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800096a:	2202      	movs	r2, #2
 800096c:	4013      	ands	r3, r2
 800096e:	d009      	beq.n	8000984 <printi+0xe0>
			printchar (out, '-');
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	212d      	movs	r1, #45	; 0x2d
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ff19 	bl	80007ac <printchar>
			++pc;
 800097a:	3501      	adds	r5, #1
			--width;
 800097c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800097e:	3b01      	subs	r3, #1
 8000980:	643b      	str	r3, [r7, #64]	; 0x40
 8000982:	e002      	b.n	800098a <printi+0xe6>
		}
		else {
			*--s = '-';
 8000984:	3c01      	subs	r4, #1
 8000986:	232d      	movs	r3, #45	; 0x2d
 8000988:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 800098a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800098c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	0021      	movs	r1, r4
 8000992:	f7ff ff2f 	bl	80007f4 <prints>
 8000996:	0003      	movs	r3, r0
 8000998:	195b      	adds	r3, r3, r5
}
 800099a:	0018      	movs	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	b00a      	add	sp, #40	; 0x28
 80009a0:	bc04      	pop	{r2}
 80009a2:	4690      	mov	r8, r2
 80009a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009a6 <print>:

static int print(char **out, const char *format, va_list args )
{
 80009a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a8:	b08b      	sub	sp, #44	; 0x2c
 80009aa:	af04      	add	r7, sp, #16
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 80009b2:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80009b4:	e0c7      	b.n	8000b46 <print+0x1a0>
		if (*format == '%') {
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b25      	cmp	r3, #37	; 0x25
 80009bc:	d000      	beq.n	80009c0 <print+0x1a>
 80009be:	e0b6      	b.n	8000b2e <print+0x188>
			++format;
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80009c6:	2600      	movs	r6, #0
 80009c8:	0035      	movs	r5, r6
			if (*format == '\0') break;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d100      	bne.n	80009d4 <print+0x2e>
 80009d2:	e0be      	b.n	8000b52 <print+0x1ac>
			if (*format == '%') goto out;
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b25      	cmp	r3, #37	; 0x25
 80009da:	d100      	bne.n	80009de <print+0x38>
 80009dc:	e0a6      	b.n	8000b2c <print+0x186>
			if (*format == '-') {
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b2d      	cmp	r3, #45	; 0x2d
 80009e4:	d10a      	bne.n	80009fc <print+0x56>
				++format;
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	3301      	adds	r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80009ec:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80009ee:	e005      	b.n	80009fc <print+0x56>
				++format;
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	3301      	adds	r3, #1
 80009f4:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80009f6:	2302      	movs	r3, #2
 80009f8:	4333      	orrs	r3, r6
 80009fa:	001e      	movs	r6, r3
			while (*format == '0') {
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b30      	cmp	r3, #48	; 0x30
 8000a02:	d0f5      	beq.n	80009f0 <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000a04:	e00b      	b.n	8000a1e <print+0x78>
				width *= 10;
 8000a06:	002b      	movs	r3, r5
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	195b      	adds	r3, r3, r5
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	001d      	movs	r5, r3
				width += *format - '0';
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3b30      	subs	r3, #48	; 0x30
 8000a16:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b2f      	cmp	r3, #47	; 0x2f
 8000a24:	d903      	bls.n	8000a2e <print+0x88>
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b39      	cmp	r3, #57	; 0x39
 8000a2c:	d9eb      	bls.n	8000a06 <print+0x60>
			}
			if( *format == 's' ) {
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b73      	cmp	r3, #115	; 0x73
 8000a34:	d110      	bne.n	8000a58 <print+0xb2>
				register char *s = (char *)va_arg( args, int );
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	1d1a      	adds	r2, r3, #4
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
				pc += prints (out, s?s:"(null)", width, pad);
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <print+0xa0>
 8000a42:	0019      	movs	r1, r3
 8000a44:	e000      	b.n	8000a48 <print+0xa2>
 8000a46:	4949      	ldr	r1, [pc, #292]	; (8000b6c <print+0x1c6>)
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	0033      	movs	r3, r6
 8000a4c:	002a      	movs	r2, r5
 8000a4e:	f7ff fed1 	bl	80007f4 <prints>
 8000a52:	0003      	movs	r3, r0
 8000a54:	18e4      	adds	r4, r4, r3
				continue;
 8000a56:	e073      	b.n	8000b40 <print+0x19a>
			}
			if( *format == 'd' ) {
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b64      	cmp	r3, #100	; 0x64
 8000a5e:	d10f      	bne.n	8000a80 <print+0xda>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	1d1a      	adds	r2, r3, #4
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	6819      	ldr	r1, [r3, #0]
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	2361      	movs	r3, #97	; 0x61
 8000a6c:	9302      	str	r3, [sp, #8]
 8000a6e:	9601      	str	r6, [sp, #4]
 8000a70:	9500      	str	r5, [sp, #0]
 8000a72:	2301      	movs	r3, #1
 8000a74:	220a      	movs	r2, #10
 8000a76:	f7ff ff15 	bl	80008a4 <printi>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	18e4      	adds	r4, r4, r3
				continue;
 8000a7e:	e05f      	b.n	8000b40 <print+0x19a>
			}
			if( *format == 'x' ) {
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b78      	cmp	r3, #120	; 0x78
 8000a86:	d10f      	bne.n	8000aa8 <print+0x102>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	1d1a      	adds	r2, r3, #4
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	6819      	ldr	r1, [r3, #0]
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	2361      	movs	r3, #97	; 0x61
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	9601      	str	r6, [sp, #4]
 8000a98:	9500      	str	r5, [sp, #0]
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	f7ff ff01 	bl	80008a4 <printi>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	18e4      	adds	r4, r4, r3
				continue;
 8000aa6:	e04b      	b.n	8000b40 <print+0x19a>
			}
			if( *format == 'X' ) {
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b58      	cmp	r3, #88	; 0x58
 8000aae:	d10f      	bne.n	8000ad0 <print+0x12a>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	1d1a      	adds	r2, r3, #4
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	2341      	movs	r3, #65	; 0x41
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	9601      	str	r6, [sp, #4]
 8000ac0:	9500      	str	r5, [sp, #0]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	f7ff feed 	bl	80008a4 <printi>
 8000aca:	0003      	movs	r3, r0
 8000acc:	18e4      	adds	r4, r4, r3
				continue;
 8000ace:	e037      	b.n	8000b40 <print+0x19a>
			}
			if( *format == 'u' ) {
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b75      	cmp	r3, #117	; 0x75
 8000ad6:	d10f      	bne.n	8000af8 <print+0x152>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1d1a      	adds	r2, r3, #4
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	2361      	movs	r3, #97	; 0x61
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	9601      	str	r6, [sp, #4]
 8000ae8:	9500      	str	r5, [sp, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	220a      	movs	r2, #10
 8000aee:	f7ff fed9 	bl	80008a4 <printi>
 8000af2:	0003      	movs	r3, r0
 8000af4:	18e4      	adds	r4, r4, r3
				continue;
 8000af6:	e023      	b.n	8000b40 <print+0x19a>
			}
			if( *format == 'c' ) {
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b63      	cmp	r3, #99	; 0x63
 8000afe:	d11f      	bne.n	8000b40 <print+0x19a>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1d1a      	adds	r2, r3, #4
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	2314      	movs	r3, #20
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 8000b10:	2314      	movs	r3, #20
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	2200      	movs	r2, #0
 8000b16:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 8000b18:	2314      	movs	r3, #20
 8000b1a:	18f9      	adds	r1, r7, r3
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	0033      	movs	r3, r6
 8000b20:	002a      	movs	r2, r5
 8000b22:	f7ff fe67 	bl	80007f4 <prints>
 8000b26:	0003      	movs	r3, r0
 8000b28:	18e4      	adds	r4, r4, r3
				continue;
 8000b2a:	e009      	b.n	8000b40 <print+0x19a>
			if (*format == '%') goto out;
 8000b2c:	46c0      	nop			; (mov r8, r8)
			}
		}
		else {
		out:
			printchar (out, *format);
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001a      	movs	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fe37 	bl	80007ac <printchar>
			++pc;
 8000b3e:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	3301      	adds	r3, #1
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d000      	beq.n	8000b50 <print+0x1aa>
 8000b4e:	e732      	b.n	80009b6 <print+0x10>
 8000b50:	e000      	b.n	8000b54 <print+0x1ae>
			if (*format == '\0') break;
 8000b52:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <print+0x1bc>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 8000b62:	0023      	movs	r3, r4
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b007      	add	sp, #28
 8000b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6c:	08008fa0 	.word	0x08008fa0

08000b70 <my_printf>:

int my_printf(const char *format, ...)
{
 8000b70:	b40f      	push	{r0, r1, r2, r3}
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
        va_list args;

        va_start( args, format );
 8000b78:	2314      	movs	r3, #20
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	607b      	str	r3, [r7, #4]
        return print( 0, format, args );
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	0019      	movs	r1, r3
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff ff0e 	bl	80009a6 <print>
 8000b8a:	0003      	movs	r3, r0
}
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bc80      	pop	{r7}
 8000b94:	bc08      	pop	{r3}
 8000b96:	b004      	add	sp, #16
 8000b98:	4718      	bx	r3

08000b9a <my_sprintf>:

int my_sprintf(char *out, const char *format, ...)
{
 8000b9a:	b40e      	push	{r1, r2, r3}
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
        va_list args;

        va_start( args, format );
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	69f9      	ldr	r1, [r7, #28]
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff fef8 	bl	80009a6 <print>
 8000bb6:	0003      	movs	r3, r0
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b005      	add	sp, #20
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	bc08      	pop	{r3}
 8000bc2:	b003      	add	sp, #12
 8000bc4:	4718      	bx	r3
 8000bc6:	46c0      	nop			; (mov r8, r8)

08000bc8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  //HAL_IncTick();
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <TIM6_DAC_IRQHandler>:
 */

extern uint32_t timebase_tick_ms;

void TIM6_DAC_IRQHandler()
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0
	// Test for TIM6 update pending interrupt
	if ((TIM6->SR & TIM_SR_UIF) == TIM_SR_UIF)
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <TIM6_DAC_IRQHandler+0x2e>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d10a      	bne.n	8000c1c <TIM6_DAC_IRQHandler+0x26>
	{
		// Clear pending interrupt flag
		TIM6->SR &= ~TIM_SR_UIF;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <TIM6_DAC_IRQHandler+0x2e>)
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <TIM6_DAC_IRQHandler+0x2e>)
 8000c0a:	6912      	ldr	r2, [r2, #16]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	438a      	bics	r2, r1
 8000c10:	611a      	str	r2, [r3, #16]

		// Do what you need
		timebase_tick_ms++;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <TIM6_DAC_IRQHandler+0x32>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <TIM6_DAC_IRQHandler+0x32>)
 8000c1a:	601a      	str	r2, [r3, #0]
	}
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	40001000 	.word	0x40001000
 8000c28:	200003fc 	.word	0x200003fc

08000c2c <millis>:
    5.397940008672037609572522210551,
    5.6989700043360188047862611052755
};

int millis()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	return BSP_millis();
 8000c30:	f003 fd6f 	bl	8004712 <BSP_millis>
 8000c34:	0003      	movs	r3, r0
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <max>:

/**
 * Find maximum between two numbers.
 */
int max(float num1, float num2)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
    return (num1 > num2 ) ? num1 : num2;
 8000c46:	6839      	ldr	r1, [r7, #0]
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f004 f957 	bl	8004efc <__aeabi_fcmpgt>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d004      	beq.n	8000c5c <max+0x20>
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f004 febc 	bl	80059d0 <__aeabi_f2iz>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	e003      	b.n	8000c64 <max+0x28>
 8000c5c:	6838      	ldr	r0, [r7, #0]
 8000c5e:	f004 feb7 	bl	80059d0 <__aeabi_f2iz>
 8000c62:	0003      	movs	r3, r0
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <BSP_SX1272_ON>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_ON(int type_mod)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2202      	movs	r2, #2
 8000c7a:	701a      	strb	r2, [r3, #0]

	// Initialize class variables
	currentstate._bandwidth = BW_125;
 8000c7c:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	705a      	strb	r2, [r3, #1]
	currentstate._codingRate = CR_5;
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	709a      	strb	r2, [r3, #2]
	currentstate._spreadingFactor = SF_7;
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000c8a:	2207      	movs	r2, #7
 8000c8c:	70da      	strb	r2, [r3, #3]
	currentstate._channel = CH_868v1;
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000c90:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <BSP_SX1272_ON+0xb4>)
 8000c92:	605a      	str	r2, [r3, #4]
	currentstate._header = HEADER_ON;
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	74da      	strb	r2, [r3, #19]
	currentstate._CRC = CRC_OFF;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	755a      	strb	r2, [r3, #21]
	currentstate._modem = FSK;
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	771a      	strb	r2, [r3, #28]
	currentstate._power = 15;
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000ca8:	220f      	movs	r2, #15
 8000caa:	721a      	strb	r2, [r3, #8]
	currentstate._packetNumber = 0;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	75da      	strb	r2, [r3, #23]
	currentstate._reception = CORRECT_PACKET;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	761a      	strb	r2, [r3, #24]
	currentstate._retries = 0;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	765a      	strb	r2, [r3, #25]
	currentstate._maxRetries = 3;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	769a      	strb	r2, [r3, #26]
	currentstate.packet_sent.retry = currentstate._retries;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000cc6:	7e59      	ldrb	r1, [r3, #25]
 8000cc8:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <BSP_SX1272_ON+0xb0>)
 8000cca:	238e      	movs	r3, #142	; 0x8e
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	54d1      	strb	r1, [r2, r3]
	//BSP_DELAY_ms(100);
	//BSP_DELAY_ms(100);
	//BSP_DELAY_ms(100);

	// Set Maximum Over Current Protection
	state = BSP_SX1272_setMaxCurrent(0x1B);
 8000cd0:	201b      	movs	r0, #27
 8000cd2:	f001 ff8b 	bl	8002bec <BSP_SX1272_setMaxCurrent>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	001a      	movs	r2, r3
 8000cda:	230f      	movs	r3, #15
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	701a      	strb	r2, [r3, #0]

	if( state == 0 )
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <BSP_SX1272_ON+0x82>
	{

	}
	else
	{
		return 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e012      	b.n	8000d14 <BSP_SX1272_ON+0xa8>
	}

	if(type_mod==0)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d106      	bne.n	8000d02 <BSP_SX1272_ON+0x96>
	{
		// set LoRa mode
		state = BSP_SX1272_setLORA();
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	18fc      	adds	r4, r7, r3
 8000cf8:	f000 f864 	bl	8000dc4 <BSP_SX1272_setLORA>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	7023      	strb	r3, [r4, #0]
 8000d00:	e005      	b.n	8000d0e <BSP_SX1272_ON+0xa2>
	}
	else
	{
		state = BSP_SX1272_setFSK();
 8000d02:	230f      	movs	r3, #15
 8000d04:	18fc      	adds	r4, r7, r3
 8000d06:	f000 f89b 	bl	8000e40 <BSP_SX1272_setFSK>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	7023      	strb	r3, [r4, #0]
	}
	return state;
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	781b      	ldrb	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b005      	add	sp, #20
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	200000d4 	.word	0x200000d4
 8000d20:	00d90666 	.word	0x00d90666

08000d24 <BSP_SX1272_OFF>:
/*
 Function: Sets the module OFF.
 Returns: 0
*/
void BSP_SX1272_OFF(int type_mod)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	if(type_mod==0)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d108      	bne.n	8000d44 <BSP_SX1272_OFF+0x20>
	{
		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE); // FSK standby mode
 8000d32:	2181      	movs	r1, #129	; 0x81
 8000d34:	2001      	movs	r0, #1
 8000d36:	f003 fdb1 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_OP_MODE, LORA_SLEEP_MODE); // FSK standby mode
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f003 fdad 	bl	800489c <BSP_SX1272_Write>
	else
	{
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE); // FSK standby mode
		BSP_SX1272_Write(REG_OP_MODE, FSK_SLEEP_MODE); // FSK standby mode
	}
}
 8000d42:	e007      	b.n	8000d54 <BSP_SX1272_OFF+0x30>
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE); // FSK standby mode
 8000d44:	2101      	movs	r1, #1
 8000d46:	2001      	movs	r0, #1
 8000d48:	f003 fda8 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_OP_MODE, FSK_SLEEP_MODE); // FSK standby mode
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f003 fda4 	bl	800489c <BSP_SX1272_Write>
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b002      	add	sp, #8
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <BSP_SX1272_clearFlags>:
 * should be written only in Sleep and Stand-by modes.
 *
 * Returns: Nothing
*/
void BSP_SX1272_clearFlags()
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
    uint8_t st0;

	// Save the previous status
	st0 = BSP_SX1272_Read(REG_OP_MODE);
 8000d62:	1dfc      	adds	r4, r7, #7
 8000d64:	2001      	movs	r0, #1
 8000d66:	f003 fd69 	bl	800483c <BSP_SX1272_Read>
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	7023      	strb	r3, [r4, #0]

	if( currentstate._modem == LORA )
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <BSP_SX1272_clearFlags+0x64>)
 8000d70:	7f1b      	ldrb	r3, [r3, #28]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d10e      	bne.n	8000d94 <BSP_SX1272_clearFlags+0x38>
	{
		/// LoRa mode
		// Stdby mode to write in registers
		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 8000d76:	2181      	movs	r1, #129	; 0x81
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f003 fd8f 	bl	800489c <BSP_SX1272_Write>
		// LoRa mode flags register
		BSP_SX1272_Write(REG_IRQ_FLAGS, 0xFF);
 8000d7e:	21ff      	movs	r1, #255	; 0xff
 8000d80:	2012      	movs	r0, #18
 8000d82:	f003 fd8b 	bl	800489c <BSP_SX1272_Write>
		// Getting back to previous status
		BSP_SX1272_Write(REG_OP_MODE, st0);
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	0019      	movs	r1, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f003 fd85 	bl	800489c <BSP_SX1272_Write>

		#if (SX1272_debug_mode > 1)
			my_printf("## FSK flags cleared ##\r\n");
		#endif
	}
}
 8000d92:	e011      	b.n	8000db8 <BSP_SX1272_clearFlags+0x5c>
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 8000d94:	2101      	movs	r1, #1
 8000d96:	2001      	movs	r0, #1
 8000d98:	f003 fd80 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_IRQ_FLAGS1, 0xFF);
 8000d9c:	21ff      	movs	r1, #255	; 0xff
 8000d9e:	203e      	movs	r0, #62	; 0x3e
 8000da0:	f003 fd7c 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_IRQ_FLAGS2, 0xFF);
 8000da4:	21ff      	movs	r1, #255	; 0xff
 8000da6:	203f      	movs	r0, #63	; 0x3f
 8000da8:	f003 fd78 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_OP_MODE, st0);
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	0019      	movs	r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	f003 fd72 	bl	800489c <BSP_SX1272_Write>
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b003      	add	sp, #12
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	200000d4 	.word	0x200000d4

08000dc4 <BSP_SX1272_setLORA>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setLORA()
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
    uint8_t state = 2;
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	2202      	movs	r2, #2
 8000dce:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'BSP_SX1272_setLORA'\r\n");
	#endif

	BSP_SX1272_Write(REG_OP_MODE, FSK_SLEEP_MODE);    // Sleep mode (mandatory to set LoRa mode)
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f003 fd62 	bl	800489c <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_OP_MODE, LORA_SLEEP_MODE);    // LoRa sleep mode
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f003 fd5e 	bl	800489c <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);	// LoRa standby mode
 8000de0:	2181      	movs	r1, #129	; 0x81
 8000de2:	2001      	movs	r0, #1
 8000de4:	f003 fd5a 	bl	800489c <BSP_SX1272_Write>

	BSP_SX1272_Write(REG_MAX_PAYLOAD_LENGTH,MAX_LENGTH);
 8000de8:	21ff      	movs	r1, #255	; 0xff
 8000dea:	2023      	movs	r0, #35	; 0x23
 8000dec:	f003 fd56 	bl	800489c <BSP_SX1272_Write>

	// Set RegModemConfig1 to Default values
	BSP_SX1272_Write(REG_MODEM_CONFIG1, 0x08);
 8000df0:	2108      	movs	r1, #8
 8000df2:	201d      	movs	r0, #29
 8000df4:	f003 fd52 	bl	800489c <BSP_SX1272_Write>
	// Set RegModemConfig2 to Default values
	BSP_SX1272_Write(REG_MODEM_CONFIG2, 0x74);
 8000df8:	2174      	movs	r1, #116	; 0x74
 8000dfa:	201e      	movs	r0, #30
 8000dfc:	f003 fd4e 	bl	800489c <BSP_SX1272_Write>

	//BSP_DELAY_ms(100);

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Reading config mode
 8000e00:	1dbc      	adds	r4, r7, #6
 8000e02:	2001      	movs	r0, #1
 8000e04:	f003 fd1a 	bl	800483c <BSP_SX1272_Read>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	7023      	strb	r3, [r4, #0]
	if( st0 == LORA_STANDBY_MODE )
 8000e0c:	1dbb      	adds	r3, r7, #6
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b81      	cmp	r3, #129	; 0x81
 8000e12:	d106      	bne.n	8000e22 <BSP_SX1272_setLORA+0x5e>
	{ // LoRa mode
		currentstate._modem = LORA;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <BSP_SX1272_setLORA+0x78>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	771a      	strb	r2, [r3, #28]
		state = 0;
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e005      	b.n	8000e2e <BSP_SX1272_setLORA+0x6a>
			my_printf("\r\n");
		#endif
	}
	else
	{ // FSK mode
		currentstate._modem = FSK;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <BSP_SX1272_setLORA+0x78>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	771a      	strb	r2, [r3, #28]
		state = 1;
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** There has been an error while setting LoRa **\r\n");
			my_printf("\r\n");
		#endif
	}
	return state;
 8000e2e:	1dfb      	adds	r3, r7, #7
 8000e30:	781b      	ldrb	r3, [r3, #0]
}
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b003      	add	sp, #12
 8000e38:	bd90      	pop	{r4, r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	200000d4 	.word	0x200000d4

08000e40 <BSP_SX1272_setFSK>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setFSK()
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	2202      	movs	r2, #2
 8000e4a:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setFSK'\r\n");
	#endif

  BSP_SX1272_Write(REG_OP_MODE, LORA_SLEEP_MODE);
 8000e4c:	2180      	movs	r1, #128	; 0x80
 8000e4e:	2001      	movs	r0, #1
 8000e50:	f003 fd24 	bl	800489c <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_OP_MODE, FSK_SLEEP_MODE);	// Sleep mode (mandatory to change mode)
 8000e54:	2100      	movs	r1, #0
 8000e56:	2001      	movs	r0, #1
 8000e58:	f003 fd20 	bl	800489c <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);	// FSK standby mode
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f003 fd1c 	bl	800489c <BSP_SX1272_Write>

	/////////////////////////////////////////////////////////////////////////////////////////
  // Config REG_PACKET_CONFIG1
	config1 = BSP_SX1272_Read(REG_PACKET_CONFIG1);
 8000e64:	1dbc      	adds	r4, r7, #6
 8000e66:	2030      	movs	r0, #48	; 0x30
 8000e68:	f003 fce8 	bl	800483c <BSP_SX1272_Read>
 8000e6c:	0003      	movs	r3, r0
 8000e6e:	7023      	strb	r3, [r4, #0]
	config1 = config1 & 0b01111101;		// clears bits 8 and 1 from REG_PACKET_CONFIG1
 8000e70:	1dbb      	adds	r3, r7, #6
 8000e72:	1dba      	adds	r2, r7, #6
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	217d      	movs	r1, #125	; 0x7d
 8000e78:	400a      	ands	r2, r1
 8000e7a:	701a      	strb	r2, [r3, #0]
	config1 = config1 | 0b00000100;		// sets bit 2 from REG_PACKET_CONFIG1
 8000e7c:	1dbb      	adds	r3, r7, #6
 8000e7e:	1dba      	adds	r2, r7, #6
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	2104      	movs	r1, #4
 8000e84:	430a      	orrs	r2, r1
 8000e86:	701a      	strb	r2, [r3, #0]
  BSP_SX1272_Write(REG_PACKET_CONFIG1,config1);	// Packet format fixe, AddressFiltering = NodeAddress + BroadcastAddress
 8000e88:	1dbb      	adds	r3, r7, #6
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	0019      	movs	r1, r3
 8000e8e:	2030      	movs	r0, #48	; 0x30
 8000e90:	f003 fd04 	bl	800489c <BSP_SX1272_Write>
  /////////////////////////////////////////////////////////////////////////////////////////

	BSP_SX1272_Write(REG_FIFO_THRESH, 0x80);	// condition to start packet tx
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	2035      	movs	r0, #53	; 0x35
 8000e98:	f003 fd00 	bl	800489c <BSP_SX1272_Write>

	/////////////////////////////////////////////////////////////////////////////////////////
  // Config REG_SYNC_CONFIG
	config1 = BSP_SX1272_Read(REG_SYNC_CONFIG);
 8000e9c:	1dbc      	adds	r4, r7, #6
 8000e9e:	2027      	movs	r0, #39	; 0x27
 8000ea0:	f003 fccc 	bl	800483c <BSP_SX1272_Read>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	7023      	strb	r3, [r4, #0]
	config1 = config1 & 0b00111111; //Auto-restart off, sync word detection on, sync size = 4 words
 8000ea8:	1dbb      	adds	r3, r7, #6
 8000eaa:	1dba      	adds	r2, r7, #6
 8000eac:	7812      	ldrb	r2, [r2, #0]
 8000eae:	213f      	movs	r1, #63	; 0x3f
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	701a      	strb	r2, [r3, #0]
	BSP_SX1272_Write(REG_SYNC_CONFIG,config1);
 8000eb4:	1dbb      	adds	r3, r7, #6
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	0019      	movs	r1, r3
 8000eba:	2027      	movs	r0, #39	; 0x27
 8000ebc:	f003 fcee 	bl	800489c <BSP_SX1272_Write>

  BSP_SX1272_Write(REG_FDEV_MSB,0x07);
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	2004      	movs	r0, #4
 8000ec4:	f003 fcea 	bl	800489c <BSP_SX1272_Write>
  BSP_SX1272_Write(REG_FDEV_LSB,0xFF);
 8000ec8:	21ff      	movs	r1, #255	; 0xff
 8000eca:	2005      	movs	r0, #5
 8000ecc:	f003 fce6 	bl	800489c <BSP_SX1272_Write>

  BSP_SX1272_Write(REG_BITRATE_MSB,0x68);
 8000ed0:	2168      	movs	r1, #104	; 0x68
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f003 fce2 	bl	800489c <BSP_SX1272_Write>
  BSP_SX1272_Write(REG_BITRATE_LSB,0x2B);
 8000ed8:	212b      	movs	r1, #43	; 0x2b
 8000eda:	2003      	movs	r0, #3
 8000edc:	f003 fcde 	bl	800489c <BSP_SX1272_Write>

  /////////////////////////////////////////////////////////////////////////////////////////
  // Config REG_PACKET_CONFIG2
  BSP_SX1272_Write(REG_PACKET_CONFIG2,0x40); // packet mode
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	2031      	movs	r0, #49	; 0x31
 8000ee4:	f003 fcda 	bl	800489c <BSP_SX1272_Write>
  /////////////////////////////////////////////////////////////////////////////////////////

	BSP_DELAY_ms(100);
 8000ee8:	2064      	movs	r0, #100	; 0x64
 8000eea:	f003 fd2b 	bl	8004944 <BSP_DELAY_ms>

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Reading config mode
 8000eee:	1d7c      	adds	r4, r7, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f003 fca3 	bl	800483c <BSP_SX1272_Read>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	7023      	strb	r3, [r4, #0]
	if( st0 == FSK_STANDBY_MODE )
 8000efa:	1d7b      	adds	r3, r7, #5
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d106      	bne.n	8000f10 <BSP_SX1272_setFSK+0xd0>
	{ // FSK mode
		currentstate._modem = FSK;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <BSP_SX1272_setFSK+0xe8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	771a      	strb	r2, [r3, #28]
		state = 0;
 8000f08:	1dfb      	adds	r3, r7, #7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e005      	b.n	8000f1c <BSP_SX1272_setFSK+0xdc>
			my_printf("\r\n");
		#endif
	}
	else
	{ // LoRa mode
		currentstate._modem = LORA;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <BSP_SX1272_setFSK+0xe8>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	771a      	strb	r2, [r3, #28]
		state = 1;
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** There has been an error while setting FSK **\r\n");
			my_printf("\r\n");
		#endif
	}
	return state;
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b003      	add	sp, #12
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	200000d4 	.word	0x200000d4

08000f2c <BSP_SX1272_getMode>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getMode()
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
	uint8_t st0;
	int8_t state = 2;
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	2202      	movs	r2, #2
 8000f36:	701a      	strb	r2, [r3, #0]
	uint8_t value = 0x00;
 8000f38:	1dbb      	adds	r3, r7, #6
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
	  my_printf("\r\n");
	  my_printf("Starting 'getMode'\r\n");
	#endif

	// Save the previous status
	st0 = BSP_SX1272_Read(REG_OP_MODE);
 8000f3e:	1d7c      	adds	r4, r7, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	f003 fc7b 	bl	800483c <BSP_SX1272_Read>
 8000f46:	0003      	movs	r3, r0
 8000f48:	7023      	strb	r3, [r4, #0]
	// Setting LoRa mode
	if( currentstate._modem == FSK )
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <BSP_SX1272_getMode+0xbc>)
 8000f4c:	7f1b      	ldrb	r3, [r3, #28]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <BSP_SX1272_getMode+0x2a>
	{
		BSP_SX1272_setLORA();
 8000f52:	f7ff ff37 	bl	8000dc4 <BSP_SX1272_setLORA>
	}
	value = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 8000f56:	1dbc      	adds	r4, r7, #6
 8000f58:	201d      	movs	r0, #29
 8000f5a:	f003 fc6f 	bl	800483c <BSP_SX1272_Read>
 8000f5e:	0003      	movs	r3, r0
 8000f60:	7023      	strb	r3, [r4, #0]
	currentstate._bandwidth = (value >> 6);   				// Storing 2 MSB from REG_MODEM_CONFIG1 (=currentstate._bandwidth)
 8000f62:	1dbb      	adds	r3, r7, #6
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	099b      	lsrs	r3, r3, #6
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <BSP_SX1272_getMode+0xbc>)
 8000f6c:	705a      	strb	r2, [r3, #1]
	currentstate._codingRate = (value >> 3) & 0x07;  		// Storing third, forth and fifth bits from
 8000f6e:	1dbb      	adds	r3, r7, #6
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	08db      	lsrs	r3, r3, #3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2207      	movs	r2, #7
 8000f78:	4013      	ands	r3, r2
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <BSP_SX1272_getMode+0xbc>)
 8000f7e:	709a      	strb	r2, [r3, #2]
	value = BSP_SX1272_Read(REG_MODEM_CONFIG2);	// REG_MODEM_CONFIG1 (=currentstate._codingRate)
 8000f80:	1dbc      	adds	r4, r7, #6
 8000f82:	201e      	movs	r0, #30
 8000f84:	f003 fc5a 	bl	800483c <BSP_SX1272_Read>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	7023      	strb	r3, [r4, #0]
	currentstate._spreadingFactor = (value >> 4) & 0x0F; 	// Storing 4 MSB from REG_MODEM_CONFIG2 (=currentstate._spreadingFactor)
 8000f8c:	1dbb      	adds	r3, r7, #6
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <BSP_SX1272_getMode+0xbc>)
 8000f96:	70da      	strb	r2, [r3, #3]
	state = 1;
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]

	if( BSP_SX1272_isBW(currentstate._bandwidth) )		// Checking available values for:
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <BSP_SX1272_getMode+0xbc>)
 8000fa0:	785b      	ldrb	r3, [r3, #1]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 fe21 	bl	8001bec <BSP_SX1272_isBW>
 8000faa:	1e03      	subs	r3, r0, #0
 8000fac:	d010      	beq.n	8000fd0 <BSP_SX1272_getMode+0xa4>
	{								//		currentstate._bandwidth
		if( BSP_SX1272_isCR(currentstate._codingRate) )		//		currentstate._codingRate
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <BSP_SX1272_getMode+0xbc>)
 8000fb0:	789b      	ldrb	r3, [r3, #2]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 ff62 	bl	8001e7c <BSP_SX1272_isCR>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d009      	beq.n	8000fd0 <BSP_SX1272_getMode+0xa4>
		{							//		currentstate._spreadingFactor
			if( BSP_SX1272_isSF(currentstate._spreadingFactor) )
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <BSP_SX1272_getMode+0xbc>)
 8000fbe:	78db      	ldrb	r3, [r3, #3]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 fbd9 	bl	8001778 <BSP_SX1272_isSF>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d002      	beq.n	8000fd0 <BSP_SX1272_getMode+0xa4>
			{
				state = 0;
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
	  my_printf("%d",currentstate._spreadingFactor);
	  my_printf(" ##\r\n");
	  my_printf("\r\n");
	#endif

	BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 8000fd0:	1d7b      	adds	r3, r7, #5
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f003 fc60 	bl	800489c <BSP_SX1272_Write>
	return state;
 8000fdc:	1dfb      	adds	r3, r7, #7
 8000fde:	781b      	ldrb	r3, [r3, #0]
}
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b003      	add	sp, #12
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	200000d4 	.word	0x200000d4

08000fec <BSP_SX1272_setMode>:
   state = -1 --> Forbidden command for this protocol
 Parameters:
   mode: mode number to set the required BW, SF and CR of LoRa modem.
*/
int8_t BSP_SX1272_setMode(uint8_t mode)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	701a      	strb	r2, [r3, #0]
	int8_t state = 2;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	701a      	strb	r2, [r3, #0]
	uint8_t st0;
	uint8_t config1 = 0x00;
 8001000:	230e      	movs	r3, #14
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
	uint8_t config2 = 0x00;
 8001008:	230d      	movs	r3, #13
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setMode'\r\n");
	#endif

	st0 = BSP_SX1272_Read(REG_OP_MODE);		// Save the previous status
 8001010:	230c      	movs	r3, #12
 8001012:	18fc      	adds	r4, r7, r3
 8001014:	2001      	movs	r0, #1
 8001016:	f003 fc11 	bl	800483c <BSP_SX1272_Read>
 800101a:	0003      	movs	r3, r0
 800101c:	7023      	strb	r3, [r4, #0]

	// 'setMode' function only can be called in LoRa mode
	if( currentstate._modem == FSK )
 800101e:	4bdc      	ldr	r3, [pc, #880]	; (8001390 <BSP_SX1272_setMode+0x3a4>)
 8001020:	7f1b      	ldrb	r3, [r3, #28]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <BSP_SX1272_setMode+0x3e>
	{
		BSP_SX1272_setLORA();
 8001026:	f7ff fecd 	bl	8000dc4 <BSP_SX1272_setLORA>
	}

	// LoRa standby mode
	BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 800102a:	2181      	movs	r1, #129	; 0x81
 800102c:	2001      	movs	r0, #1
 800102e:	f003 fc35 	bl	800489c <BSP_SX1272_Write>

	switch (mode)
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d868      	bhi.n	800110c <BSP_SX1272_setMode+0x120>
 800103a:	009a      	lsls	r2, r3, #2
 800103c:	4bd5      	ldr	r3, [pc, #852]	; (8001394 <BSP_SX1272_setMode+0x3a8>)
 800103e:	18d3      	adds	r3, r2, r3
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	469f      	mov	pc, r3
	{
		// mode 1 (better reach, medium time on air)
		case 1: 	BSP_SX1272_setCR(CR_5);		// CR = 4/5
 8001044:	2001      	movs	r0, #1
 8001046:	f000 ff67 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_12);		// SF = 12
 800104a:	200c      	movs	r0, #12
 800104c:	f000 fbdc 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_125);		// BW = 125 KHz
 8001050:	2000      	movs	r0, #0
 8001052:	f000 fe15 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 8001056:	e05d      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		// mode 2 (medium reach, less time on air)
		case 2: 	BSP_SX1272_setCR(CR_5);		// CR = 4/5
 8001058:	2001      	movs	r0, #1
 800105a:	f000 ff5d 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_12);		// SF = 12
 800105e:	200c      	movs	r0, #12
 8001060:	f000 fbd2 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_250);		// BW = 250 KHz
 8001064:	2001      	movs	r0, #1
 8001066:	f000 fe0b 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 800106a:	e053      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		// mode 3 (worst reach, less time on air)
		case 3: 	BSP_SX1272_setCR(CR_5);		// CR = 4/5
 800106c:	2001      	movs	r0, #1
 800106e:	f000 ff53 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_10);		// SF = 10
 8001072:	200a      	movs	r0, #10
 8001074:	f000 fbc8 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_125);		// BW = 125 KHz
 8001078:	2000      	movs	r0, #0
 800107a:	f000 fe01 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 800107e:	e049      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		// mode 4 (better reach, low time on air)
		case 4: 	BSP_SX1272_setCR(CR_5);		// CR = 4/5
 8001080:	2001      	movs	r0, #1
 8001082:	f000 ff49 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_12);		// SF = 12
 8001086:	200c      	movs	r0, #12
 8001088:	f000 fbbe 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_500);		// BW = 500 KHz
 800108c:	2002      	movs	r0, #2
 800108e:	f000 fdf7 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 8001092:	e03f      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		// mode 5 (better reach, medium time on air)
		case 5: 	BSP_SX1272_setCR(CR_5);		// CR = 4/5
 8001094:	2001      	movs	r0, #1
 8001096:	f000 ff3f 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_10);		// SF = 10
 800109a:	200a      	movs	r0, #10
 800109c:	f000 fbb4 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_250);		// BW = 250 KHz
 80010a0:	2001      	movs	r0, #1
 80010a2:	f000 fded 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 80010a6:	e035      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		// mode 6 (better reach, worst time-on-air)
		case 6: 	BSP_SX1272_setCR(CR_5);		// CR = 4/5
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 ff35 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_11);		// SF = 11
 80010ae:	200b      	movs	r0, #11
 80010b0:	f000 fbaa 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_500);		// BW = 500 KHz
 80010b4:	2002      	movs	r0, #2
 80010b6:	f000 fde3 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 80010ba:	e02b      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		// mode 7 (medium-high reach, medium-low time-on-air)
		case 7: 	BSP_SX1272_setCR(CR_5);		// CR = 4/5
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 ff2b 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_9);		// SF = 9
 80010c2:	2009      	movs	r0, #9
 80010c4:	f000 fba0 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_250);		// BW = 250 KHz
 80010c8:	2001      	movs	r0, #1
 80010ca:	f000 fdd9 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 80010ce:	e021      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		// mode 8 (medium reach, medium time-on-air)
		case 8:		BSP_SX1272_setCR(CR_5);		// CR = 4/5
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 ff21 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_9);		// SF = 9
 80010d6:	2009      	movs	r0, #9
 80010d8:	f000 fb96 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_500);		// BW = 500 KHz
 80010dc:	2002      	movs	r0, #2
 80010de:	f000 fdcf 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 80010e2:	e017      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		// mode 9 (medium-low reach, medium-high time-on-air)
		case 9: 	BSP_SX1272_setCR(CR_5);		// CR = 4/5
 80010e4:	2001      	movs	r0, #1
 80010e6:	f000 ff17 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_8);		// SF = 8
 80010ea:	2008      	movs	r0, #8
 80010ec:	f000 fb8c 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_500);		// BW = 500 KHz
 80010f0:	2002      	movs	r0, #2
 80010f2:	f000 fdc5 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 80010f6:	e00d      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		// mode 10 (worst reach, less time_on_air)
		case 10:	BSP_SX1272_setCR(CR_5);		// CR = 4/5
 80010f8:	2001      	movs	r0, #1
 80010fa:	f000 ff0d 	bl	8001f18 <BSP_SX1272_setCR>
					BSP_SX1272_setSF(SF_7);		// SF = 7
 80010fe:	2007      	movs	r0, #7
 8001100:	f000 fb82 	bl	8001808 <BSP_SX1272_setSF>
					BSP_SX1272_setBW(BW_500);		// BW = 500 KHz
 8001104:	2002      	movs	r0, #2
 8001106:	f000 fdbb 	bl	8001c80 <BSP_SX1272_setBW>
					break;
 800110a:	e003      	b.n	8001114 <BSP_SX1272_setMode+0x128>

		default:	state = -1; // The indicated mode doesn't exist
 800110c:	230f      	movs	r3, #15
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	701a      	strb	r2, [r3, #0]

	};


	// Check proper register configuration
	if( state == -1 )	// if state = -1, don't change its value
 8001114:	230f      	movs	r3, #15
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b25b      	sxtb	r3, r3
 800111c:	3301      	adds	r3, #1
 800111e:	d100      	bne.n	8001122 <BSP_SX1272_setMode+0x136>
 8001120:	e13d      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
			my_printf("please select from 1 to 10 **\r\n");
		#endif
	}
	else
	{
		state = 1;
 8001122:	230f      	movs	r3, #15
 8001124:	18fb      	adds	r3, r7, r3
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
		config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 800112a:	230e      	movs	r3, #14
 800112c:	18fc      	adds	r4, r7, r3
 800112e:	201d      	movs	r0, #29
 8001130:	f003 fb84 	bl	800483c <BSP_SX1272_Read>
 8001134:	0003      	movs	r3, r0
 8001136:	7023      	strb	r3, [r4, #0]
		switch (mode)
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b0a      	cmp	r3, #10
 800113e:	d900      	bls.n	8001142 <BSP_SX1272_setMode+0x156>
 8001140:	e12d      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 8001142:	009a      	lsls	r2, r3, #2
 8001144:	4b94      	ldr	r3, [pc, #592]	; (8001398 <BSP_SX1272_setMode+0x3ac>)
 8001146:	18d3      	adds	r3, r2, r3
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	469f      	mov	pc, r3
		{	//		Different way to check for each mode:
			// (config1 >> 3) ---> take out bits 7-3 from REG_MODEM_CONFIG1 (=currentstate._bandwidth & currentstate._codingRate together)
			// (config2 >> 4) ---> take out bits 7-4 from REG_MODEM_CONFIG2 (=currentstate._spreadingFactor)

			// mode 1: BW = 125 KHz, CR = 4/5, SF = 12.
			case 1:  if( (config1 >> 3) == 0x01 )
 800114c:	230e      	movs	r3, #14
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	08db      	lsrs	r3, r3, #3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d000      	beq.n	800115c <BSP_SX1272_setMode+0x170>
 800115a:	e108      	b.n	800136e <BSP_SX1272_setMode+0x382>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 800115c:	230d      	movs	r3, #13
 800115e:	18fc      	adds	r4, r7, r3
 8001160:	201e      	movs	r0, #30
 8001162:	f003 fb6b 	bl	800483c <BSP_SX1272_Read>
 8001166:	0003      	movs	r3, r0
 8001168:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_12 )
 800116a:	230d      	movs	r3, #13
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d000      	beq.n	800117a <BSP_SX1272_setMode+0x18e>
 8001178:	e0f9      	b.n	800136e <BSP_SX1272_setMode+0x382>
							{
							state = 0;
 800117a:	230f      	movs	r3, #15
 800117c:	18fb      	adds	r3, r7, r3
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
							}
						}
 					 break;
 8001182:	e0f4      	b.n	800136e <BSP_SX1272_setMode+0x382>


			// mode 2: BW = 250 KHz, CR = 4/5, SF = 12.
			case 2:  if( (config1 >> 3) == 0x09 )
 8001184:	230e      	movs	r3, #14
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	08db      	lsrs	r3, r3, #3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b09      	cmp	r3, #9
 8001190:	d000      	beq.n	8001194 <BSP_SX1272_setMode+0x1a8>
 8001192:	e0ee      	b.n	8001372 <BSP_SX1272_setMode+0x386>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 8001194:	230d      	movs	r3, #13
 8001196:	18fc      	adds	r4, r7, r3
 8001198:	201e      	movs	r0, #30
 800119a:	f003 fb4f 	bl	800483c <BSP_SX1272_Read>
 800119e:	0003      	movs	r3, r0
 80011a0:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_12 )
 80011a2:	230d      	movs	r3, #13
 80011a4:	18fb      	adds	r3, r7, r3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b0c      	cmp	r3, #12
 80011ae:	d000      	beq.n	80011b2 <BSP_SX1272_setMode+0x1c6>
 80011b0:	e0df      	b.n	8001372 <BSP_SX1272_setMode+0x386>
							{
							state = 0;
 80011b2:	230f      	movs	r3, #15
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
							}
						}
 					 break;
 80011ba:	e0da      	b.n	8001372 <BSP_SX1272_setMode+0x386>

			// mode 3: BW = 125 KHz, CR = 4/5, SF = 10.
			case 3:  if( (config1 >> 3) == 0x01 )
 80011bc:	230e      	movs	r3, #14
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	08db      	lsrs	r3, r3, #3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d000      	beq.n	80011cc <BSP_SX1272_setMode+0x1e0>
 80011ca:	e0d4      	b.n	8001376 <BSP_SX1272_setMode+0x38a>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 80011cc:	230d      	movs	r3, #13
 80011ce:	18fc      	adds	r4, r7, r3
 80011d0:	201e      	movs	r0, #30
 80011d2:	f003 fb33 	bl	800483c <BSP_SX1272_Read>
 80011d6:	0003      	movs	r3, r0
 80011d8:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_10 )
 80011da:	230d      	movs	r3, #13
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b0a      	cmp	r3, #10
 80011e6:	d000      	beq.n	80011ea <BSP_SX1272_setMode+0x1fe>
 80011e8:	e0c5      	b.n	8001376 <BSP_SX1272_setMode+0x38a>
							{
							state = 0;
 80011ea:	230f      	movs	r3, #15
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
							}
						}
 					 break;
 80011f2:	e0c0      	b.n	8001376 <BSP_SX1272_setMode+0x38a>

			// mode 4: BW = 500 KHz, CR = 4/5, SF = 12.
			case 4:  if( (config1 >> 3) == 0x11 )
 80011f4:	230e      	movs	r3, #14
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b11      	cmp	r3, #17
 8001200:	d000      	beq.n	8001204 <BSP_SX1272_setMode+0x218>
 8001202:	e0ba      	b.n	800137a <BSP_SX1272_setMode+0x38e>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 8001204:	230d      	movs	r3, #13
 8001206:	18fc      	adds	r4, r7, r3
 8001208:	201e      	movs	r0, #30
 800120a:	f003 fb17 	bl	800483c <BSP_SX1272_Read>
 800120e:	0003      	movs	r3, r0
 8001210:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_12 )
 8001212:	230d      	movs	r3, #13
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b0c      	cmp	r3, #12
 800121e:	d000      	beq.n	8001222 <BSP_SX1272_setMode+0x236>
 8001220:	e0ab      	b.n	800137a <BSP_SX1272_setMode+0x38e>
							{
							state = 0;
 8001222:	230f      	movs	r3, #15
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
							}
						}
 					 break;
 800122a:	e0a6      	b.n	800137a <BSP_SX1272_setMode+0x38e>

			// mode 5: BW = 250 KHz, CR = 4/5, SF = 10.
			case 5:  if( (config1 >> 3) == 0x09 )
 800122c:	230e      	movs	r3, #14
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b09      	cmp	r3, #9
 8001238:	d000      	beq.n	800123c <BSP_SX1272_setMode+0x250>
 800123a:	e0a0      	b.n	800137e <BSP_SX1272_setMode+0x392>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 800123c:	230d      	movs	r3, #13
 800123e:	18fc      	adds	r4, r7, r3
 8001240:	201e      	movs	r0, #30
 8001242:	f003 fafb 	bl	800483c <BSP_SX1272_Read>
 8001246:	0003      	movs	r3, r0
 8001248:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_10 )
 800124a:	230d      	movs	r3, #13
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b0a      	cmp	r3, #10
 8001256:	d000      	beq.n	800125a <BSP_SX1272_setMode+0x26e>
 8001258:	e091      	b.n	800137e <BSP_SX1272_setMode+0x392>
							{
							state = 0;
 800125a:	230f      	movs	r3, #15
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
							}
						}
 					 break;
 8001262:	e08c      	b.n	800137e <BSP_SX1272_setMode+0x392>

			// mode 6: BW = 500 KHz, CR = 4/5, SF = 11.
			case 6:  if( (config1 >> 3) == 0x11 )
 8001264:	230e      	movs	r3, #14
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	08db      	lsrs	r3, r3, #3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b11      	cmp	r3, #17
 8001270:	d000      	beq.n	8001274 <BSP_SX1272_setMode+0x288>
 8001272:	e086      	b.n	8001382 <BSP_SX1272_setMode+0x396>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 8001274:	230d      	movs	r3, #13
 8001276:	18fc      	adds	r4, r7, r3
 8001278:	201e      	movs	r0, #30
 800127a:	f003 fadf 	bl	800483c <BSP_SX1272_Read>
 800127e:	0003      	movs	r3, r0
 8001280:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_11 )
 8001282:	230d      	movs	r3, #13
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b0b      	cmp	r3, #11
 800128e:	d000      	beq.n	8001292 <BSP_SX1272_setMode+0x2a6>
 8001290:	e077      	b.n	8001382 <BSP_SX1272_setMode+0x396>
							{
							state = 0;
 8001292:	230f      	movs	r3, #15
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
							}
						}
 					 break;
 800129a:	e072      	b.n	8001382 <BSP_SX1272_setMode+0x396>

			// mode 7: BW = 250 KHz, CR = 4/5, SF = 9.
			case 7:  if( (config1 >> 3) == 0x09 )
 800129c:	230e      	movs	r3, #14
 800129e:	18fb      	adds	r3, r7, r3
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	08db      	lsrs	r3, r3, #3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b09      	cmp	r3, #9
 80012a8:	d000      	beq.n	80012ac <BSP_SX1272_setMode+0x2c0>
 80012aa:	e06c      	b.n	8001386 <BSP_SX1272_setMode+0x39a>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 80012ac:	230d      	movs	r3, #13
 80012ae:	18fc      	adds	r4, r7, r3
 80012b0:	201e      	movs	r0, #30
 80012b2:	f003 fac3 	bl	800483c <BSP_SX1272_Read>
 80012b6:	0003      	movs	r3, r0
 80012b8:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_9 )
 80012ba:	230d      	movs	r3, #13
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b09      	cmp	r3, #9
 80012c6:	d15e      	bne.n	8001386 <BSP_SX1272_setMode+0x39a>
							{
							state = 0;
 80012c8:	230f      	movs	r3, #15
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
							}
						}
 					 break;
 80012d0:	e059      	b.n	8001386 <BSP_SX1272_setMode+0x39a>

			// mode 8: BW = 500 KHz, CR = 4/5, SF = 9.
			case 8:  if ((config1 >> 3) == 0x11)
 80012d2:	230e      	movs	r3, #14
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	08db      	lsrs	r3, r3, #3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b11      	cmp	r3, #17
 80012de:	d154      	bne.n	800138a <BSP_SX1272_setMode+0x39e>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 80012e0:	230d      	movs	r3, #13
 80012e2:	18fc      	adds	r4, r7, r3
 80012e4:	201e      	movs	r0, #30
 80012e6:	f003 faa9 	bl	800483c <BSP_SX1272_Read>
 80012ea:	0003      	movs	r3, r0
 80012ec:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_9 )
 80012ee:	230d      	movs	r3, #13
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b09      	cmp	r3, #9
 80012fa:	d146      	bne.n	800138a <BSP_SX1272_setMode+0x39e>
							{
							state = 0;
 80012fc:	230f      	movs	r3, #15
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
							}
						}
 					 break;
 8001304:	e041      	b.n	800138a <BSP_SX1272_setMode+0x39e>

			// mode 9: BW = 500 KHz, CR = 4/5, SF = 8.
			case 9:  if( (config1 >> 3) == 0x11 )
 8001306:	230e      	movs	r3, #14
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	08db      	lsrs	r3, r3, #3
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b11      	cmp	r3, #17
 8001312:	d143      	bne.n	800139c <BSP_SX1272_setMode+0x3b0>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 8001314:	230d      	movs	r3, #13
 8001316:	18fc      	adds	r4, r7, r3
 8001318:	201e      	movs	r0, #30
 800131a:	f003 fa8f 	bl	800483c <BSP_SX1272_Read>
 800131e:	0003      	movs	r3, r0
 8001320:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_8 )
 8001322:	230d      	movs	r3, #13
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b08      	cmp	r3, #8
 800132e:	d135      	bne.n	800139c <BSP_SX1272_setMode+0x3b0>
							{
							state = 0;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
							}
						}
 					 break;
 8001338:	e030      	b.n	800139c <BSP_SX1272_setMode+0x3b0>

			// mode 10: BW = 500 KHz, CR = 4/5, SF = 7.
			case 10: if( (config1 >> 3) == 0x11 )
 800133a:	230e      	movs	r3, #14
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b11      	cmp	r3, #17
 8001346:	d12a      	bne.n	800139e <BSP_SX1272_setMode+0x3b2>
						{  config2 = BSP_SX1272_Read(REG_MODEM_CONFIG2);
 8001348:	230d      	movs	r3, #13
 800134a:	18fc      	adds	r4, r7, r3
 800134c:	201e      	movs	r0, #30
 800134e:	f003 fa75 	bl	800483c <BSP_SX1272_Read>
 8001352:	0003      	movs	r3, r0
 8001354:	7023      	strb	r3, [r4, #0]
						if( (config2 >> 4) == SF_7 )
 8001356:	230d      	movs	r3, #13
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b07      	cmp	r3, #7
 8001362:	d11c      	bne.n	800139e <BSP_SX1272_setMode+0x3b2>
							{
							state = 0;
 8001364:	230f      	movs	r3, #15
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e017      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 					 break;
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	e015      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 					 break;
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	e013      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 					 break;
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	e011      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 					 break;
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	e00f      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 					 break;
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	e00d      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 					 break;
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	e00b      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 					 break;
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	e009      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 					 break;
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	e007      	b.n	800139e <BSP_SX1272_setMode+0x3b2>
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	200000d4 	.word	0x200000d4
 8001394:	08008fc0 	.word	0x08008fc0
 8001398:	08008fec 	.word	0x08008fec
 					 break;
 800139c:	46c0      	nop			; (mov r8, r8)
		my_printf(". **\r\n");
	}
	#endif

	// Getting back to previous status
	BSP_SX1272_Write(REG_OP_MODE, st0);
 800139e:	230c      	movs	r3, #12
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	0019      	movs	r1, r3
 80013a6:	2001      	movs	r0, #1
 80013a8:	f003 fa78 	bl	800489c <BSP_SX1272_Write>

	return state;
 80013ac:	230f      	movs	r3, #15
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b25b      	sxtb	r3, r3
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b005      	add	sp, #20
 80013ba:	bd90      	pop	{r4, r7, pc}

080013bc <BSP_SX1272_getHeader>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t	BSP_SX1272_getHeader()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
	int8_t state = 2;
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	2202      	movs	r2, #2
 80013c6:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'getHeader'\r\n");
	#endif

	// take out bit 2 from REG_MODEM_CONFIG1 indicates ImplicitHeaderModeOn
	if( bitRead(BSP_SX1272_Read(REG_MODEM_CONFIG1), 2) == 0 )
 80013c8:	201d      	movs	r0, #29
 80013ca:	f003 fa37 	bl	800483c <BSP_SX1272_Read>
 80013ce:	0003      	movs	r3, r0
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	001a      	movs	r2, r3
 80013d6:	2301      	movs	r3, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	d106      	bne.n	80013ea <BSP_SX1272_getHeader+0x2e>
	{ // explicit header mode (ON)
		currentstate._header = HEADER_ON;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <BSP_SX1272_getHeader+0x4c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	74da      	strb	r2, [r3, #19]
		state = 1;
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	2201      	movs	r2, #1
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e005      	b.n	80013f6 <BSP_SX1272_getHeader+0x3a>
	}
	else
	{ // implicit header mode (OFF)
		currentstate._header = HEADER_OFF;
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <BSP_SX1272_getHeader+0x4c>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	74da      	strb	r2, [r3, #19]
		state = 1;
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
	}

	state = 0;
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
				my_printf("in implicit header mode ##\r\n");
			}
			my_printf("\r\n");
		#endif
	}
	return state;
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	781b      	ldrb	r3, [r3, #0]
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200000d4 	.word	0x200000d4

0800140c <BSP_SX1272_setHeaderON>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t	BSP_SX1272_setHeaderON()
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  int8_t state = 2;
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	2202      	movs	r2, #2
 8001416:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'setHeaderON'\r\n");
  #endif

  if( currentstate._modem == FSK )
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <BSP_SX1272_setHeaderON+0x98>)
 800141a:	7f1b      	ldrb	r3, [r3, #28]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d103      	bne.n	8001428 <BSP_SX1272_setHeaderON+0x1c>
  {
	  state = -1;		// header is not available in FSK mode
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	e035      	b.n	8001494 <BSP_SX1272_setHeaderON+0x88>
		  my_printf("\r\n");
	  #endif
  }
  else
  {
	config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);	// Save config1 to modify only the header bit
 8001428:	1dbc      	adds	r4, r7, #6
 800142a:	201d      	movs	r0, #29
 800142c:	f003 fa06 	bl	800483c <BSP_SX1272_Read>
 8001430:	0003      	movs	r3, r0
 8001432:	7023      	strb	r3, [r4, #0]
	if( currentstate._spreadingFactor == 6 )
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <BSP_SX1272_setHeaderON+0x98>)
 8001436:	78db      	ldrb	r3, [r3, #3]
 8001438:	2b06      	cmp	r3, #6
 800143a:	d103      	bne.n	8001444 <BSP_SX1272_setHeaderON+0x38>
	{
		state = -1;		// Mandatory headerOFF with SF = 6
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e00b      	b.n	800145c <BSP_SX1272_setHeaderON+0x50>
			my_printf("## Mandatory implicit header mode with spreading factor = 6 ##\r\n");
		#endif
	}
	else
	{
		config1 = config1 & 0b11111011;			// clears bit 2 from config1 = headerON
 8001444:	1dbb      	adds	r3, r7, #6
 8001446:	1dba      	adds	r2, r7, #6
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	2104      	movs	r1, #4
 800144c:	438a      	bics	r2, r1
 800144e:	701a      	strb	r2, [r3, #0]
		BSP_SX1272_Write(REG_MODEM_CONFIG1,config1);	// Update config1
 8001450:	1dbb      	adds	r3, r7, #6
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	0019      	movs	r1, r3
 8001456:	201d      	movs	r0, #29
 8001458:	f003 fa20 	bl	800489c <BSP_SX1272_Write>
	}
	if( currentstate._spreadingFactor != 6 )
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <BSP_SX1272_setHeaderON+0x98>)
 800145e:	78db      	ldrb	r3, [r3, #3]
 8001460:	2b06      	cmp	r3, #6
 8001462:	d017      	beq.n	8001494 <BSP_SX1272_setHeaderON+0x88>
	{ // checking headerON taking out bit 2 from REG_MODEM_CONFIG1
		config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 8001464:	1dbc      	adds	r4, r7, #6
 8001466:	201d      	movs	r0, #29
 8001468:	f003 f9e8 	bl	800483c <BSP_SX1272_Read>
 800146c:	0003      	movs	r3, r0
 800146e:	7023      	strb	r3, [r4, #0]
		if( bitRead(config1, 2) == HEADER_ON )
 8001470:	1dbb      	adds	r3, r7, #6
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	001a      	movs	r2, r3
 800147a:	2301      	movs	r3, #1
 800147c:	4013      	ands	r3, r2
 800147e:	d106      	bne.n	800148e <BSP_SX1272_setHeaderON+0x82>
		{
			state = 0;
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
			currentstate._header = HEADER_ON;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <BSP_SX1272_setHeaderON+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	74da      	strb	r2, [r3, #19]
 800148c:	e002      	b.n	8001494 <BSP_SX1272_setHeaderON+0x88>
				my_printf("\r\n");
			#endif
		}
		else
		{
			state = 1;
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
		}
	}
  }
  return state;
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25b      	sxtb	r3, r3
}
 800149a:	0018      	movs	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	b003      	add	sp, #12
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	200000d4 	.word	0x200000d4

080014a8 <BSP_SX1272_setHeaderOFF>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t	BSP_SX1272_setHeaderOFF()
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 80014ae:	1dfb      	adds	r3, r7, #7
 80014b0:	2202      	movs	r2, #2
 80014b2:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setHeaderOFF'\r\n");
	#endif

	if( currentstate._modem == FSK )
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <BSP_SX1272_setHeaderOFF+0x80>)
 80014b6:	7f1b      	ldrb	r3, [r3, #28]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <BSP_SX1272_setHeaderOFF+0x1c>
	{
		// header is not available in FSK mode
		state = -1;
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	22ff      	movs	r2, #255	; 0xff
 80014c0:	701a      	strb	r2, [r3, #0]
 80014c2:	e029      	b.n	8001518 <BSP_SX1272_setHeaderOFF+0x70>
		#endif
	}
	else
	{
		// Read config1 to modify only the header bit
		config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 80014c4:	1dbc      	adds	r4, r7, #6
 80014c6:	201d      	movs	r0, #29
 80014c8:	f003 f9b8 	bl	800483c <BSP_SX1272_Read>
 80014cc:	0003      	movs	r3, r0
 80014ce:	7023      	strb	r3, [r4, #0]

		// sets bit 2 from REG_MODEM_CONFIG1 = headerOFF
		config1 = config1 | 0b00000100;
 80014d0:	1dbb      	adds	r3, r7, #6
 80014d2:	1dba      	adds	r2, r7, #6
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	2104      	movs	r1, #4
 80014d8:	430a      	orrs	r2, r1
 80014da:	701a      	strb	r2, [r3, #0]
		// Update config1
		BSP_SX1272_Write(REG_MODEM_CONFIG1,config1);
 80014dc:	1dbb      	adds	r3, r7, #6
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	0019      	movs	r1, r3
 80014e2:	201d      	movs	r0, #29
 80014e4:	f003 f9da 	bl	800489c <BSP_SX1272_Write>

		// check register
		config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 80014e8:	1dbc      	adds	r4, r7, #6
 80014ea:	201d      	movs	r0, #29
 80014ec:	f003 f9a6 	bl	800483c <BSP_SX1272_Read>
 80014f0:	0003      	movs	r3, r0
 80014f2:	7023      	strb	r3, [r4, #0]
		if( bitRead(config1, 2) == HEADER_OFF )
 80014f4:	1dbb      	adds	r3, r7, #6
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	001a      	movs	r2, r3
 80014fe:	2301      	movs	r3, #1
 8001500:	4013      	ands	r3, r2
 8001502:	d006      	beq.n	8001512 <BSP_SX1272_setHeaderOFF+0x6a>
		{
			// checking headerOFF taking out bit 2 from REG_MODEM_CONFIG1
			state = 0;
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
			currentstate._header = HEADER_OFF;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <BSP_SX1272_setHeaderOFF+0x80>)
 800150c:	2201      	movs	r2, #1
 800150e:	74da      	strb	r2, [r3, #19]
 8001510:	e002      	b.n	8001518 <BSP_SX1272_setHeaderOFF+0x70>
			    my_printf("\r\n");
			#endif
		}
		else
		{
			state = 1;
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
				my_printf("** Header hasn't been desactivated ##\r\n");
				my_printf("\r\n");
			#endif
		}
	}
	return state;
 8001518:	1dfb      	adds	r3, r7, #7
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	b25b      	sxtb	r3, r3
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b003      	add	sp, #12
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	200000d4 	.word	0x200000d4

0800152c <BSP_SX1272_getCRC>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t	BSP_SX1272_getCRC()
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
	int8_t state = 2;
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	2202      	movs	r2, #2
 8001536:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'getCRC'\r\n");
	#endif

	if( currentstate._modem == LORA )
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <BSP_SX1272_getCRC+0xa0>)
 800153a:	7f1b      	ldrb	r3, [r3, #28]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d11b      	bne.n	8001578 <BSP_SX1272_getCRC+0x4c>
	{ // LoRa mode

		// take out bit 1 from REG_MODEM_CONFIG1 indicates RxPayloadCrcOn
		value = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 8001540:	1dbc      	adds	r4, r7, #6
 8001542:	201d      	movs	r0, #29
 8001544:	f003 f97a 	bl	800483c <BSP_SX1272_Read>
 8001548:	0003      	movs	r3, r0
 800154a:	7023      	strb	r3, [r4, #0]
		if( bitRead(value, 1) == CRC_OFF )
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	085b      	lsrs	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	001a      	movs	r2, r3
 8001556:	2301      	movs	r3, #1
 8001558:	4013      	ands	r3, r2
 800155a:	d106      	bne.n	800156a <BSP_SX1272_getCRC+0x3e>
		{ // CRCoff
			currentstate._CRC = CRC_OFF;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <BSP_SX1272_getCRC+0xa0>)
 800155e:	2200      	movs	r2, #0
 8001560:	755a      	strb	r2, [r3, #21]
			#if (SX1272_debug_mode > 1)
				my_printf("## CRC is desactivated ##\r\n");
				my_printf("\r\n");
			#endif
			state = 0;
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	e021      	b.n	80015ae <BSP_SX1272_getCRC+0x82>
		}
		else
		{ // CRCon
			currentstate._CRC = CRC_ON;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <BSP_SX1272_getCRC+0xa0>)
 800156c:	2201      	movs	r2, #1
 800156e:	755a      	strb	r2, [r3, #21]
			#if (SX1272_debug_mode > 1)
				my_printf("## CRC is activated ##\r\n");
				my_printf("\r\n");
			#endif
			state = 0;
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
 8001576:	e01a      	b.n	80015ae <BSP_SX1272_getCRC+0x82>
	}
	else
	{ // FSK mode

		// take out bit 2 from REG_PACKET_CONFIG1 indicates CrcOn
		value = BSP_SX1272_Read(REG_PACKET_CONFIG1);
 8001578:	1dbc      	adds	r4, r7, #6
 800157a:	2030      	movs	r0, #48	; 0x30
 800157c:	f003 f95e 	bl	800483c <BSP_SX1272_Read>
 8001580:	0003      	movs	r3, r0
 8001582:	7023      	strb	r3, [r4, #0]
		if( bitRead(value, 4) == CRC_OFF )
 8001584:	1dbb      	adds	r3, r7, #6
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	b2db      	uxtb	r3, r3
 800158c:	001a      	movs	r2, r3
 800158e:	2301      	movs	r3, #1
 8001590:	4013      	ands	r3, r2
 8001592:	d106      	bne.n	80015a2 <BSP_SX1272_getCRC+0x76>
		{ // CRCoff
			currentstate._CRC = CRC_OFF;
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <BSP_SX1272_getCRC+0xa0>)
 8001596:	2200      	movs	r2, #0
 8001598:	755a      	strb	r2, [r3, #21]
			#if (SX1272_debug_mode > 1)
				my_printf("## CRC is desactivated ##\r\n");
				my_printf("\r\n");
			#endif
			state = 0;
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
 80015a0:	e005      	b.n	80015ae <BSP_SX1272_getCRC+0x82>
		}
		else
		{ // CRCon
			currentstate._CRC = CRC_ON;
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <BSP_SX1272_getCRC+0xa0>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	755a      	strb	r2, [r3, #21]
			#if (SX1272_debug_mode > 1)
				my_printf("## CRC is activated ##\r\n");
				my_printf("\r\n");
			#endif
			state = 0;
 80015a8:	1dfb      	adds	r3, r7, #7
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
		}
	}
	if( state != 0 )
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b25b      	sxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <BSP_SX1272_getCRC+0x92>
	{
		state = 1;
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** There has been an error while getting configured CRC **\r\n");
			my_printf("\r\n");
		#endif
	}
	return state;
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	781b      	ldrb	r3, [r3, #0]
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b003      	add	sp, #12
 80015c8:	bd90      	pop	{r4, r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	200000d4 	.word	0x200000d4

080015d0 <BSP_SX1272_setCRC_ON>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t	BSP_SX1272_setCRC_ON()
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
  uint8_t state = 2;
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	2202      	movs	r2, #2
 80015da:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'setCRC_ON'\r\n");
  #endif

  if( currentstate._modem == LORA )
 80015dc:	4b31      	ldr	r3, [pc, #196]	; (80016a4 <BSP_SX1272_setCRC_ON+0xd4>)
 80015de:	7f1b      	ldrb	r3, [r3, #28]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d129      	bne.n	8001638 <BSP_SX1272_setCRC_ON+0x68>
  { // LORA mode
	config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);	// Save config1 to modify only the CRC bit
 80015e4:	1dbc      	adds	r4, r7, #6
 80015e6:	201d      	movs	r0, #29
 80015e8:	f003 f928 	bl	800483c <BSP_SX1272_Read>
 80015ec:	0003      	movs	r3, r0
 80015ee:	7023      	strb	r3, [r4, #0]
	config1 = config1 | 0b00000010;				// sets bit 1 from REG_MODEM_CONFIG1 = CRC_ON
 80015f0:	1dbb      	adds	r3, r7, #6
 80015f2:	1dba      	adds	r2, r7, #6
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	2102      	movs	r1, #2
 80015f8:	430a      	orrs	r2, r1
 80015fa:	701a      	strb	r2, [r3, #0]
	BSP_SX1272_Write(REG_MODEM_CONFIG1,config1);
 80015fc:	1dbb      	adds	r3, r7, #6
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	0019      	movs	r1, r3
 8001602:	201d      	movs	r0, #29
 8001604:	f003 f94a 	bl	800489c <BSP_SX1272_Write>

	state = 1;
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]

	config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 800160e:	1dbc      	adds	r4, r7, #6
 8001610:	201d      	movs	r0, #29
 8001612:	f003 f913 	bl	800483c <BSP_SX1272_Read>
 8001616:	0003      	movs	r3, r0
 8001618:	7023      	strb	r3, [r4, #0]
	if( bitRead(config1, 1) == CRC_ON )
 800161a:	1dbb      	adds	r3, r7, #6
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	085b      	lsrs	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	001a      	movs	r2, r3
 8001624:	2301      	movs	r3, #1
 8001626:	4013      	ands	r3, r2
 8001628:	d02f      	beq.n	800168a <BSP_SX1272_setCRC_ON+0xba>
	{ // take out bit 1 from REG_MODEM_CONFIG1 indicates RxPayloadCrcOn
		state = 0;
 800162a:	1dfb      	adds	r3, r7, #7
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
		currentstate._CRC = CRC_ON;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <BSP_SX1272_setCRC_ON+0xd4>)
 8001632:	2201      	movs	r2, #1
 8001634:	755a      	strb	r2, [r3, #21]
 8001636:	e028      	b.n	800168a <BSP_SX1272_setCRC_ON+0xba>
		#endif
	}
  }
  else
  { // FSK mode
	config1 = BSP_SX1272_Read(REG_PACKET_CONFIG1);	// Save config1 to modify only the CRC bit
 8001638:	1dbc      	adds	r4, r7, #6
 800163a:	2030      	movs	r0, #48	; 0x30
 800163c:	f003 f8fe 	bl	800483c <BSP_SX1272_Read>
 8001640:	0003      	movs	r3, r0
 8001642:	7023      	strb	r3, [r4, #0]
	config1 = config1 | 0b00010000;				// set bit 4 and 3 from REG_MODEM_CONFIG1 = CRC_ON
 8001644:	1dbb      	adds	r3, r7, #6
 8001646:	1dba      	adds	r2, r7, #6
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	2110      	movs	r1, #16
 800164c:	430a      	orrs	r2, r1
 800164e:	701a      	strb	r2, [r3, #0]
	BSP_SX1272_Write(REG_PACKET_CONFIG1,config1);
 8001650:	1dbb      	adds	r3, r7, #6
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	0019      	movs	r1, r3
 8001656:	2030      	movs	r0, #48	; 0x30
 8001658:	f003 f920 	bl	800489c <BSP_SX1272_Write>

	state = 1;
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]

	config1 = BSP_SX1272_Read(REG_PACKET_CONFIG1);
 8001662:	1dbc      	adds	r4, r7, #6
 8001664:	2030      	movs	r0, #48	; 0x30
 8001666:	f003 f8e9 	bl	800483c <BSP_SX1272_Read>
 800166a:	0003      	movs	r3, r0
 800166c:	7023      	strb	r3, [r4, #0]
	if( bitRead(config1, 4) == CRC_ON )
 800166e:	1dbb      	adds	r3, r7, #6
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	b2db      	uxtb	r3, r3
 8001676:	001a      	movs	r2, r3
 8001678:	2301      	movs	r3, #1
 800167a:	4013      	ands	r3, r2
 800167c:	d005      	beq.n	800168a <BSP_SX1272_setCRC_ON+0xba>
	{ // take out bit 4 from REG_PACKET_CONFIG1 indicates CrcOn
		state = 0;
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
		currentstate._CRC = CRC_ON;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <BSP_SX1272_setCRC_ON+0xd4>)
 8001686:	2201      	movs	r2, #1
 8001688:	755a      	strb	r2, [r3, #21]
			my_printf("## CRC has been activated ##\r\n");
			my_printf("\r\n");
		#endif
	}
  }
  if( state != 0 )
 800168a:	1dfb      	adds	r3, r7, #7
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <BSP_SX1272_setCRC_ON+0xc8>
  {
	  state = 1;
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
	  #if (SX1272_debug_mode > 1)
		  my_printf("** There has been an error while setting CRC ON **\r\n");
		  my_printf("\r\n");
	  #endif
  }
  return state;
 8001698:	1dfb      	adds	r3, r7, #7
 800169a:	781b      	ldrb	r3, [r3, #0]
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b003      	add	sp, #12
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	200000d4 	.word	0x200000d4

080016a8 <BSP_SX1272_setCRC_OFF>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t	BSP_SX1272_setCRC_OFF()
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
  int8_t state = 2;
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	2202      	movs	r2, #2
 80016b2:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'setCRC_OFF'\r\n");
  #endif

  if( currentstate._modem == LORA )
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <BSP_SX1272_setCRC_OFF+0xcc>)
 80016b6:	7f1b      	ldrb	r3, [r3, #28]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d126      	bne.n	800170a <BSP_SX1272_setCRC_OFF+0x62>
  { // LORA mode
  	config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);	// Save config1 to modify only the CRC bit
 80016bc:	1dbc      	adds	r4, r7, #6
 80016be:	201d      	movs	r0, #29
 80016c0:	f003 f8bc 	bl	800483c <BSP_SX1272_Read>
 80016c4:	0003      	movs	r3, r0
 80016c6:	7023      	strb	r3, [r4, #0]
	config1 = config1 & 0b11111101;				// clears bit 1 from config1 = CRC_OFF
 80016c8:	1dbb      	adds	r3, r7, #6
 80016ca:	1dba      	adds	r2, r7, #6
 80016cc:	7812      	ldrb	r2, [r2, #0]
 80016ce:	2102      	movs	r1, #2
 80016d0:	438a      	bics	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
	BSP_SX1272_Write(REG_MODEM_CONFIG1,config1);
 80016d4:	1dbb      	adds	r3, r7, #6
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	0019      	movs	r1, r3
 80016da:	201d      	movs	r0, #29
 80016dc:	f003 f8de 	bl	800489c <BSP_SX1272_Write>

	config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 80016e0:	1dbc      	adds	r4, r7, #6
 80016e2:	201d      	movs	r0, #29
 80016e4:	f003 f8aa 	bl	800483c <BSP_SX1272_Read>
 80016e8:	0003      	movs	r3, r0
 80016ea:	7023      	strb	r3, [r4, #0]
	if( (bitRead(config1, 1)) == CRC_OFF )
 80016ec:	1dbb      	adds	r3, r7, #6
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	001a      	movs	r2, r3
 80016f6:	2301      	movs	r3, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d12c      	bne.n	8001756 <BSP_SX1272_setCRC_OFF+0xae>
	{ // take out bit 1 from REG_MODEM_CONFIG1 indicates RxPayloadCrcOn
	  state = 0;
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
	  currentstate._CRC = CRC_OFF;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <BSP_SX1272_setCRC_OFF+0xcc>)
 8001704:	2200      	movs	r2, #0
 8001706:	755a      	strb	r2, [r3, #21]
 8001708:	e025      	b.n	8001756 <BSP_SX1272_setCRC_OFF+0xae>
	  #endif
	}
  }
  else
  { // FSK mode
	config1 = BSP_SX1272_Read(REG_PACKET_CONFIG1);	// Save config1 to modify only the CRC bit
 800170a:	1dbc      	adds	r4, r7, #6
 800170c:	2030      	movs	r0, #48	; 0x30
 800170e:	f003 f895 	bl	800483c <BSP_SX1272_Read>
 8001712:	0003      	movs	r3, r0
 8001714:	7023      	strb	r3, [r4, #0]
	config1 = config1 & 0b11101111;				// clears bit 4 from config1 = CRC_OFF
 8001716:	1dbb      	adds	r3, r7, #6
 8001718:	1dba      	adds	r2, r7, #6
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	2110      	movs	r1, #16
 800171e:	438a      	bics	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
	BSP_SX1272_Write(REG_PACKET_CONFIG1,config1);
 8001722:	1dbb      	adds	r3, r7, #6
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	0019      	movs	r1, r3
 8001728:	2030      	movs	r0, #48	; 0x30
 800172a:	f003 f8b7 	bl	800489c <BSP_SX1272_Write>

	config1 = BSP_SX1272_Read(REG_PACKET_CONFIG1);
 800172e:	1dbc      	adds	r4, r7, #6
 8001730:	2030      	movs	r0, #48	; 0x30
 8001732:	f003 f883 	bl	800483c <BSP_SX1272_Read>
 8001736:	0003      	movs	r3, r0
 8001738:	7023      	strb	r3, [r4, #0]
	if( bitRead(config1, 4) == CRC_OFF )
 800173a:	1dbb      	adds	r3, r7, #6
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	b2db      	uxtb	r3, r3
 8001742:	001a      	movs	r2, r3
 8001744:	2301      	movs	r3, #1
 8001746:	4013      	ands	r3, r2
 8001748:	d105      	bne.n	8001756 <BSP_SX1272_setCRC_OFF+0xae>
	{ // take out bit 4 from REG_PACKET_CONFIG1 indicates RxPayloadCrcOn
		state = 0;
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
		currentstate._CRC = CRC_OFF;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <BSP_SX1272_setCRC_OFF+0xcc>)
 8001752:	2200      	movs	r2, #0
 8001754:	755a      	strb	r2, [r3, #21]
		    my_printf("## CRC has been desactivated ##\r\n");
		    my_printf("\r\n");
	    #endif
	}
  }
  if( state != 0 )
 8001756:	1dfb      	adds	r3, r7, #7
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b25b      	sxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <BSP_SX1272_setCRC_OFF+0xbe>
  {
	  state = 1;
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
	  #if (SX1272_debug_mode > 1)
		  my_printf("** There has been an error while setting CRC OFF **\r\n");
		  my_printf("\r\n");
	  #endif
  }
  return state;
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b003      	add	sp, #12
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	200000d4 	.word	0x200000d4

08001778 <BSP_SX1272_isSF>:
		  it's '0' if the SF value does not exist.
 Parameters:
   spr: spreading factor value to check.
*/
uint8_t	BSP_SX1272_isSF(uint8_t spr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	0002      	movs	r2, r0
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	701a      	strb	r2, [r3, #0]
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_isSF'\r\n");
  #endif

  // Checking available values for currentstate._spreadingFactor
  switch(spr)
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	3b06      	subs	r3, #6
 800178a:	2b06      	cmp	r3, #6
 800178c:	d801      	bhi.n	8001792 <BSP_SX1272_isSF+0x1a>
	  case SF_7:
	  case SF_8:
	  case SF_9:
	  case SF_10:
	  case SF_11:
	  case SF_12:	return 1;
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <BSP_SX1272_isSF+0x1c>
					break;

	  default:		return 0;
 8001792:	2300      	movs	r3, #0
  }
  #if (SX1272_debug_mode > 1)
	  my_printf("## Finished 'BSP_SX1272_isSF' ##\r\n");
	  my_printf("\r\n");
  #endif
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}

0800179c <BSP_SX1272_getSF>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t	BSP_SX1272_getSF()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
  int8_t state = 2;
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	2202      	movs	r2, #2
 80017a6:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'getSF'\r\n");
  #endif

  if( currentstate._modem == FSK )
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <BSP_SX1272_getSF+0x68>)
 80017aa:	7f1b      	ldrb	r3, [r3, #28]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <BSP_SX1272_getSF+0x1c>
  {
	  state = -1;		// SF is not available in FSK mode
 80017b0:	1dfb      	adds	r3, r7, #7
 80017b2:	22ff      	movs	r2, #255	; 0xff
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e01e      	b.n	80017f6 <BSP_SX1272_getSF+0x5a>
	  #endif
  }
  else
  {
	// take out bits 7-4 from REG_MODEM_CONFIG2 indicates currentstate._spreadingFactor
	config2 = (BSP_SX1272_Read(REG_MODEM_CONFIG2)) >> 4;
 80017b8:	201e      	movs	r0, #30
 80017ba:	f003 f83f 	bl	800483c <BSP_SX1272_Read>
 80017be:	0003      	movs	r3, r0
 80017c0:	001a      	movs	r2, r3
 80017c2:	1dbb      	adds	r3, r7, #6
 80017c4:	0912      	lsrs	r2, r2, #4
 80017c6:	701a      	strb	r2, [r3, #0]
	currentstate._spreadingFactor = config2;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <BSP_SX1272_getSF+0x68>)
 80017ca:	1dba      	adds	r2, r7, #6
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	70da      	strb	r2, [r3, #3]
	state = 1;
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]

	if( (config2 == currentstate._spreadingFactor) && BSP_SX1272_isSF(currentstate._spreadingFactor) )
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <BSP_SX1272_getSF+0x68>)
 80017d8:	78db      	ldrb	r3, [r3, #3]
 80017da:	1dba      	adds	r2, r7, #6
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d109      	bne.n	80017f6 <BSP_SX1272_getSF+0x5a>
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <BSP_SX1272_getSF+0x68>)
 80017e4:	78db      	ldrb	r3, [r3, #3]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff ffc6 	bl	8001778 <BSP_SX1272_isSF>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d002      	beq.n	80017f6 <BSP_SX1272_getSF+0x5a>
	{
		state = 0;
 80017f0:	1dfb      	adds	r3, r7, #7
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
			my_printf(" ##\r\n");
			my_printf("\r\n");
		#endif
	}
  }
  return state;
 80017f6:	1dfb      	adds	r3, r7, #7
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b25b      	sxtb	r3, r3
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200000d4 	.word	0x200000d4

08001808 <BSP_SX1272_setSF>:
   state = 0  --> The command has been executed with no errors
 Parameters:
   spr: spreading factor value to set in LoRa modem configuration.
*/
uint8_t	BSP_SX1272_setSF(uint8_t spr)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	0002      	movs	r2, r0
 8001810:	1dfb      	adds	r3, r7, #7
 8001812:	701a      	strb	r2, [r3, #0]
	uint8_t st0;
	int8_t state = 2;
 8001814:	230f      	movs	r3, #15
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2202      	movs	r2, #2
 800181a:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'BSP_SX1272_setSF'\r\n");
	#endif

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 800181c:	230c      	movs	r3, #12
 800181e:	18fc      	adds	r4, r7, r3
 8001820:	2001      	movs	r0, #1
 8001822:	f003 f80b 	bl	800483c <BSP_SX1272_Read>
 8001826:	0003      	movs	r3, r0
 8001828:	7023      	strb	r3, [r4, #0]

	if( currentstate._modem == FSK )
 800182a:	4bdd      	ldr	r3, [pc, #884]	; (8001ba0 <BSP_SX1272_setSF+0x398>)
 800182c:	7f1b      	ldrb	r3, [r3, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d107      	bne.n	8001842 <BSP_SX1272_setSF+0x3a>
		/// FSK mode
		#if (SX1272_debug_mode > 1)
			my_printf("## Notice that FSK hasn't Spreading Factor parameter, ");
			my_printf("so you are configuring it in LoRa mode ##\r\n");
		#endif
		state = BSP_SX1272_setLORA();				// Setting LoRa mode
 8001832:	f7ff fac7 	bl	8000dc4 <BSP_SX1272_setLORA>
 8001836:	0003      	movs	r3, r0
 8001838:	001a      	movs	r2, r3
 800183a:	230f      	movs	r3, #15
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e1b5      	b.n	8001bae <BSP_SX1272_setSF+0x3a6>
	}
	else
	{
		/// LoRa mode
		// LoRa standby mode
		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 8001842:	2181      	movs	r1, #129	; 0x81
 8001844:	2001      	movs	r0, #1
 8001846:	f003 f829 	bl	800489c <BSP_SX1272_Write>

		// Read config1 to modify only the LowDataRateOptimize
		config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1));
 800184a:	230e      	movs	r3, #14
 800184c:	18fc      	adds	r4, r7, r3
 800184e:	201d      	movs	r0, #29
 8001850:	f002 fff4 	bl	800483c <BSP_SX1272_Read>
 8001854:	0003      	movs	r3, r0
 8001856:	7023      	strb	r3, [r4, #0]
		// Read config2 to modify SF value (bits 7-4)
		config2 = (BSP_SX1272_Read(REG_MODEM_CONFIG2));
 8001858:	230d      	movs	r3, #13
 800185a:	18fc      	adds	r4, r7, r3
 800185c:	201e      	movs	r0, #30
 800185e:	f002 ffed 	bl	800483c <BSP_SX1272_Read>
 8001862:	0003      	movs	r3, r0
 8001864:	7023      	strb	r3, [r4, #0]

		switch(spr)
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	3b06      	subs	r3, #6
 800186c:	2b06      	cmp	r3, #6
 800186e:	d900      	bls.n	8001872 <BSP_SX1272_setSF+0x6a>
 8001870:	e092      	b.n	8001998 <BSP_SX1272_setSF+0x190>
 8001872:	009a      	lsls	r2, r3, #2
 8001874:	4bcb      	ldr	r3, [pc, #812]	; (8001ba4 <BSP_SX1272_setSF+0x39c>)
 8001876:	18d3      	adds	r3, r2, r3
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	469f      	mov	pc, r3
		{
			case SF_6:
					config2 = config2 & 0b01101111;	// clears bits 7 & 4 from REG_MODEM_CONFIG2
 800187c:	230d      	movs	r3, #13
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	220d      	movs	r2, #13
 8001882:	18ba      	adds	r2, r7, r2
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	216f      	movs	r1, #111	; 0x6f
 8001888:	400a      	ands	r2, r1
 800188a:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b01100000;	// sets bits 6 & 5 from REG_MODEM_CONFIG2
 800188c:	230d      	movs	r3, #13
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	220d      	movs	r2, #13
 8001892:	18ba      	adds	r2, r7, r2
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	2160      	movs	r1, #96	; 0x60
 8001898:	430a      	orrs	r2, r1
 800189a:	701a      	strb	r2, [r3, #0]
					break;
 800189c:	e07c      	b.n	8001998 <BSP_SX1272_setSF+0x190>
			case SF_7:
					config2 = config2 & 0b01111111;	// clears bits 7 from REG_MODEM_CONFIG2
 800189e:	230d      	movs	r3, #13
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	220d      	movs	r2, #13
 80018a4:	18ba      	adds	r2, r7, r2
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	217f      	movs	r1, #127	; 0x7f
 80018aa:	400a      	ands	r2, r1
 80018ac:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b01110000;	// sets bits 6, 5 & 4
 80018ae:	230d      	movs	r3, #13
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	220d      	movs	r2, #13
 80018b4:	18ba      	adds	r2, r7, r2
 80018b6:	7812      	ldrb	r2, [r2, #0]
 80018b8:	2170      	movs	r1, #112	; 0x70
 80018ba:	430a      	orrs	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
					break;
 80018be:	e06b      	b.n	8001998 <BSP_SX1272_setSF+0x190>

			case SF_8:
					config2 = config2 & 0b10001111;	// clears bits 6, 5 & 4 from REG_MODEM_CONFIG2
 80018c0:	230d      	movs	r3, #13
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	220d      	movs	r2, #13
 80018c6:	18ba      	adds	r2, r7, r2
 80018c8:	7812      	ldrb	r2, [r2, #0]
 80018ca:	2170      	movs	r1, #112	; 0x70
 80018cc:	438a      	bics	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b10000000;	// sets bit 7 from REG_MODEM_CONFIG2
 80018d0:	230d      	movs	r3, #13
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	220d      	movs	r2, #13
 80018d6:	18ba      	adds	r2, r7, r2
 80018d8:	7812      	ldrb	r2, [r2, #0]
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	4249      	negs	r1, r1
 80018de:	430a      	orrs	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
					break;
 80018e2:	e059      	b.n	8001998 <BSP_SX1272_setSF+0x190>

			case SF_9:
					config2 = config2 & 0b10011111;	// clears bits 6, 5 & 4 from REG_MODEM_CONFIG2
 80018e4:	230d      	movs	r3, #13
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	220d      	movs	r2, #13
 80018ea:	18ba      	adds	r2, r7, r2
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	2160      	movs	r1, #96	; 0x60
 80018f0:	438a      	bics	r2, r1
 80018f2:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b10010000;	// sets bits 7 & 4 from REG_MODEM_CONFIG2
 80018f4:	230d      	movs	r3, #13
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	220d      	movs	r2, #13
 80018fa:	18ba      	adds	r2, r7, r2
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	2170      	movs	r1, #112	; 0x70
 8001900:	4249      	negs	r1, r1
 8001902:	430a      	orrs	r2, r1
 8001904:	701a      	strb	r2, [r3, #0]
					break;
 8001906:	e047      	b.n	8001998 <BSP_SX1272_setSF+0x190>

			case SF_10:	config2 = config2 & 0b10101111;	// clears bits 6 & 4 from REG_MODEM_CONFIG2
 8001908:	230d      	movs	r3, #13
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	220d      	movs	r2, #13
 800190e:	18ba      	adds	r2, r7, r2
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	2150      	movs	r1, #80	; 0x50
 8001914:	438a      	bics	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b10100000;	// sets bits 7 & 5 from REG_MODEM_CONFIG2
 8001918:	230d      	movs	r3, #13
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	220d      	movs	r2, #13
 800191e:	18ba      	adds	r2, r7, r2
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	2160      	movs	r1, #96	; 0x60
 8001924:	4249      	negs	r1, r1
 8001926:	430a      	orrs	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
					break;
 800192a:	e035      	b.n	8001998 <BSP_SX1272_setSF+0x190>

			case SF_11:
					config2 = config2 & 0b10111111;	// clears bit 6 from REG_MODEM_CONFIG2
 800192c:	230d      	movs	r3, #13
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	220d      	movs	r2, #13
 8001932:	18ba      	adds	r2, r7, r2
 8001934:	7812      	ldrb	r2, [r2, #0]
 8001936:	2140      	movs	r1, #64	; 0x40
 8001938:	438a      	bics	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b10110000;	// sets bits 7, 5 & 4 from REG_MODEM_CONFIG2
 800193c:	230d      	movs	r3, #13
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	220d      	movs	r2, #13
 8001942:	18ba      	adds	r2, r7, r2
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	2150      	movs	r1, #80	; 0x50
 8001948:	4249      	negs	r1, r1
 800194a:	430a      	orrs	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
					BSP_SX1272_getBW();
 800194e:	f000 f95f 	bl	8001c10 <BSP_SX1272_getBW>
					//if( currentstate._bandwidth == BW_125 )
					{ // LowDataRateOptimize (Mandatory with SF_11 if BW_125)
						config1 = config1 | 0b00000001;
 8001952:	230e      	movs	r3, #14
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	220e      	movs	r2, #14
 8001958:	18ba      	adds	r2, r7, r2
 800195a:	7812      	ldrb	r2, [r2, #0]
 800195c:	2101      	movs	r1, #1
 800195e:	430a      	orrs	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001962:	e019      	b.n	8001998 <BSP_SX1272_setSF+0x190>

			case SF_12:
					config2 = config2 & 0b11001111;	// clears bits 5 & 4 from REG_MODEM_CONFIG2
 8001964:	230d      	movs	r3, #13
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	220d      	movs	r2, #13
 800196a:	18ba      	adds	r2, r7, r2
 800196c:	7812      	ldrb	r2, [r2, #0]
 800196e:	2130      	movs	r1, #48	; 0x30
 8001970:	438a      	bics	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
					config2 = config2 | 0b11000000;	// sets bits 7 & 6 from REG_MODEM_CONFIG2
 8001974:	230d      	movs	r3, #13
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	220d      	movs	r2, #13
 800197a:	18ba      	adds	r2, r7, r2
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	2140      	movs	r1, #64	; 0x40
 8001980:	4249      	negs	r1, r1
 8001982:	430a      	orrs	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
					//if( currentstate._bandwidth == BW_125 )
					{ // LowDataRateOptimize (Mandatory with SF_12 if BW_125)
						config1 = config1 | 0b00000001;
 8001986:	230e      	movs	r3, #14
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	220e      	movs	r2, #14
 800198c:	18ba      	adds	r2, r7, r2
 800198e:	7812      	ldrb	r2, [r2, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001996:	46c0      	nop			; (mov r8, r8)
	}

	// Check if it is neccesary to set special settings for SF=6
	if( spr == SF_6 )
 8001998:	1dfb      	adds	r3, r7, #7
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d10a      	bne.n	80019b6 <BSP_SX1272_setSF+0x1ae>
	{
		// Mandatory headerOFF with SF = 6 (Implicit mode)
		BSP_SX1272_setHeaderOFF();
 80019a0:	f7ff fd82 	bl	80014a8 <BSP_SX1272_setHeaderOFF>

		// Set the bit field DetectionOptimize of
		// register RegLoRaDetectOptimize to value "0b101".
		BSP_SX1272_Write(REG_DETECT_OPTIMIZE, 0x05);
 80019a4:	2105      	movs	r1, #5
 80019a6:	2031      	movs	r0, #49	; 0x31
 80019a8:	f002 ff78 	bl	800489c <BSP_SX1272_Write>

		// Write 0x0C in the register RegDetectionThreshold.
		BSP_SX1272_Write(REG_DETECTION_THRESHOLD, 0x0C);
 80019ac:	210c      	movs	r1, #12
 80019ae:	2037      	movs	r0, #55	; 0x37
 80019b0:	f002 ff74 	bl	800489c <BSP_SX1272_Write>
 80019b4:	e007      	b.n	80019c6 <BSP_SX1272_setSF+0x1be>
	}
	else
	{
		// LoRa detection Optimize: 0x03 --> SF7 to SF12
		BSP_SX1272_Write(REG_DETECT_OPTIMIZE, 0x03);
 80019b6:	2103      	movs	r1, #3
 80019b8:	2031      	movs	r0, #49	; 0x31
 80019ba:	f002 ff6f 	bl	800489c <BSP_SX1272_Write>

		// LoRa detection threshold: 0x0A --> SF7 to SF12
		BSP_SX1272_Write(REG_DETECTION_THRESHOLD, 0x0A);
 80019be:	210a      	movs	r1, #10
 80019c0:	2037      	movs	r0, #55	; 0x37
 80019c2:	f002 ff6b 	bl	800489c <BSP_SX1272_Write>
	}

	// sets bit 2-0 (AgcAutoOn and SymbTimout) for any SF value
	config2 = config2 | 0b00000111;
 80019c6:	230d      	movs	r3, #13
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	220d      	movs	r2, #13
 80019cc:	18ba      	adds	r2, r7, r2
 80019ce:	7812      	ldrb	r2, [r2, #0]
 80019d0:	2107      	movs	r1, #7
 80019d2:	430a      	orrs	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]

	// Update 'config1' and 'config2'
	BSP_SX1272_Write(REG_MODEM_CONFIG1, config1);
 80019d6:	230e      	movs	r3, #14
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	0019      	movs	r1, r3
 80019de:	201d      	movs	r0, #29
 80019e0:	f002 ff5c 	bl	800489c <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_MODEM_CONFIG2, config2);
 80019e4:	230d      	movs	r3, #13
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	0019      	movs	r1, r3
 80019ec:	201e      	movs	r0, #30
 80019ee:	f002 ff55 	bl	800489c <BSP_SX1272_Write>

	// Read 'config1' and 'config2' to check update
	config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1));
 80019f2:	230e      	movs	r3, #14
 80019f4:	18fc      	adds	r4, r7, r3
 80019f6:	201d      	movs	r0, #29
 80019f8:	f002 ff20 	bl	800483c <BSP_SX1272_Read>
 80019fc:	0003      	movs	r3, r0
 80019fe:	7023      	strb	r3, [r4, #0]
	config2 = (BSP_SX1272_Read(REG_MODEM_CONFIG2));
 8001a00:	230d      	movs	r3, #13
 8001a02:	18fc      	adds	r4, r7, r3
 8001a04:	201e      	movs	r0, #30
 8001a06:	f002 ff19 	bl	800483c <BSP_SX1272_Read>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	7023      	strb	r3, [r4, #0]

	// (config2 >> 4) ---> take out bits 7-4 from REG_MODEM_CONFIG2 (=currentstate._spreadingFactor)
	// bitRead(config1, 0) ---> take out bits 1 from config1 (=LowDataRateOptimize)
	switch(spr)
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	3b06      	subs	r3, #6
 8001a14:	2b06      	cmp	r3, #6
 8001a16:	d900      	bls.n	8001a1a <BSP_SX1272_setSF+0x212>
 8001a18:	e0b1      	b.n	8001b7e <BSP_SX1272_setSF+0x376>
 8001a1a:	009a      	lsls	r2, r3, #2
 8001a1c:	4b62      	ldr	r3, [pc, #392]	; (8001ba8 <BSP_SX1272_setSF+0x3a0>)
 8001a1e:	18d3      	adds	r3, r2, r3
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	469f      	mov	pc, r3
	{
		case SF_6:	if(		((config2 >> 4) == spr)
 8001a24:	230d      	movs	r3, #13
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	1dfa      	adds	r2, r7, #7
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d000      	beq.n	8001a38 <BSP_SX1272_setSF+0x230>
 8001a36:	e0a7      	b.n	8001b88 <BSP_SX1272_setSF+0x380>
						&& 	(bitRead(config2, 2) == 1)
 8001a38:	230d      	movs	r3, #13
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	001a      	movs	r2, r3
 8001a44:	2301      	movs	r3, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	d100      	bne.n	8001a4c <BSP_SX1272_setSF+0x244>
 8001a4a:	e09d      	b.n	8001b88 <BSP_SX1272_setSF+0x380>
						&& 	(currentstate._header == HEADER_OFF))
 8001a4c:	4b54      	ldr	r3, [pc, #336]	; (8001ba0 <BSP_SX1272_setSF+0x398>)
 8001a4e:	7cdb      	ldrb	r3, [r3, #19]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d000      	beq.n	8001a56 <BSP_SX1272_setSF+0x24e>
 8001a54:	e098      	b.n	8001b88 <BSP_SX1272_setSF+0x380>
					{
						state = 0;
 8001a56:	230f      	movs	r3, #15
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001a5e:	e093      	b.n	8001b88 <BSP_SX1272_setSF+0x380>
		case SF_7:	if(		((config2 >> 4) == 0x07)
 8001a60:	230d      	movs	r3, #13
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b07      	cmp	r3, #7
 8001a6c:	d000      	beq.n	8001a70 <BSP_SX1272_setSF+0x268>
 8001a6e:	e08d      	b.n	8001b8c <BSP_SX1272_setSF+0x384>
						 && (bitRead(config2, 2) == 1))
 8001a70:	230d      	movs	r3, #13
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	001a      	movs	r2, r3
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d100      	bne.n	8001a84 <BSP_SX1272_setSF+0x27c>
 8001a82:	e083      	b.n	8001b8c <BSP_SX1272_setSF+0x384>
					{
						state = 0;
 8001a84:	230f      	movs	r3, #15
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001a8c:	e07e      	b.n	8001b8c <BSP_SX1272_setSF+0x384>
		case SF_8:	if(		((config2 >> 4) == 0x08)
 8001a8e:	230d      	movs	r3, #13
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d000      	beq.n	8001a9e <BSP_SX1272_setSF+0x296>
 8001a9c:	e078      	b.n	8001b90 <BSP_SX1272_setSF+0x388>
						 && (bitRead(config2, 2) == 1))
 8001a9e:	230d      	movs	r3, #13
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	2301      	movs	r3, #1
 8001aac:	4013      	ands	r3, r2
 8001aae:	d100      	bne.n	8001ab2 <BSP_SX1272_setSF+0x2aa>
 8001ab0:	e06e      	b.n	8001b90 <BSP_SX1272_setSF+0x388>
					{
						state = 0;
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001aba:	e069      	b.n	8001b90 <BSP_SX1272_setSF+0x388>
		case SF_9:	if(		((config2 >> 4) == 0x09)
 8001abc:	230d      	movs	r3, #13
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b09      	cmp	r3, #9
 8001ac8:	d000      	beq.n	8001acc <BSP_SX1272_setSF+0x2c4>
 8001aca:	e063      	b.n	8001b94 <BSP_SX1272_setSF+0x38c>
						 && (bitRead(config2, 2) == 1))
 8001acc:	230d      	movs	r3, #13
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	2301      	movs	r3, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	d05a      	beq.n	8001b94 <BSP_SX1272_setSF+0x38c>
					{
						state = 0;
 8001ade:	230f      	movs	r3, #15
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001ae6:	e055      	b.n	8001b94 <BSP_SX1272_setSF+0x38c>
		case SF_10:	if(		((config2 >> 4) == 0x0A)
 8001ae8:	230d      	movs	r3, #13
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b0a      	cmp	r3, #10
 8001af4:	d150      	bne.n	8001b98 <BSP_SX1272_setSF+0x390>
						 && (bitRead(config2, 2) == 1))
 8001af6:	230d      	movs	r3, #13
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	001a      	movs	r2, r3
 8001b02:	2301      	movs	r3, #1
 8001b04:	4013      	ands	r3, r2
 8001b06:	d047      	beq.n	8001b98 <BSP_SX1272_setSF+0x390>
					{
						state = 0;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001b10:	e042      	b.n	8001b98 <BSP_SX1272_setSF+0x390>
		case SF_11:	if(		((config2 >> 4) == 0x0B)
 8001b12:	230d      	movs	r3, #13
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b0b      	cmp	r3, #11
 8001b1e:	d13d      	bne.n	8001b9c <BSP_SX1272_setSF+0x394>
						 && (bitRead(config2, 2) == 1)
 8001b20:	230d      	movs	r3, #13
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d034      	beq.n	8001b9c <BSP_SX1272_setSF+0x394>
						 && (bitRead(config1, 0) == 1))
 8001b32:	230e      	movs	r3, #14
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d02e      	beq.n	8001b9c <BSP_SX1272_setSF+0x394>
					{
						state = 0;
 8001b3e:	230f      	movs	r3, #15
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001b46:	e029      	b.n	8001b9c <BSP_SX1272_setSF+0x394>
		case SF_12:	if(		((config2 >> 4) == 0x0C)
 8001b48:	230d      	movs	r3, #13
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d12a      	bne.n	8001bac <BSP_SX1272_setSF+0x3a4>
						 && (bitRead(config2, 2) == 1)
 8001b56:	230d      	movs	r3, #13
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	001a      	movs	r2, r3
 8001b62:	2301      	movs	r3, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	d021      	beq.n	8001bac <BSP_SX1272_setSF+0x3a4>
						 && (bitRead(config1, 0) == 1))
 8001b68:	230e      	movs	r3, #14
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	4013      	ands	r3, r2
 8001b72:	d01b      	beq.n	8001bac <BSP_SX1272_setSF+0x3a4>
					{
						state = 0;
 8001b74:	230f      	movs	r3, #15
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001b7c:	e016      	b.n	8001bac <BSP_SX1272_setSF+0x3a4>
		default:	state = 1;
 8001b7e:	230f      	movs	r3, #15
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e012      	b.n	8001bae <BSP_SX1272_setSF+0x3a6>
					break;
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	e010      	b.n	8001bae <BSP_SX1272_setSF+0x3a6>
					break;
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	e00e      	b.n	8001bae <BSP_SX1272_setSF+0x3a6>
					break;
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	e00c      	b.n	8001bae <BSP_SX1272_setSF+0x3a6>
					break;
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	e00a      	b.n	8001bae <BSP_SX1272_setSF+0x3a6>
					break;
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	e008      	b.n	8001bae <BSP_SX1272_setSF+0x3a6>
					break;
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	e006      	b.n	8001bae <BSP_SX1272_setSF+0x3a6>
 8001ba0:	200000d4 	.word	0x200000d4
 8001ba4:	08009018 	.word	0x08009018
 8001ba8:	08009034 	.word	0x08009034
					break;
 8001bac:	46c0      	nop			; (mov r8, r8)
	}
  }

  BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 8001bae:	230c      	movs	r3, #12
 8001bb0:	18fb      	adds	r3, r7, r3
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f002 fe70 	bl	800489c <BSP_SX1272_Write>

  if( BSP_SX1272_isSF(spr) )
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff fdd9 	bl	8001778 <BSP_SX1272_isSF>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d007      	beq.n	8001bda <BSP_SX1272_setSF+0x3d2>
  { // Checking available value for currentstate._spreadingFactor
		state = 0;
 8001bca:	230f      	movs	r3, #15
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
		currentstate._spreadingFactor = spr;
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <BSP_SX1272_setSF+0x3e0>)
 8001bd4:	1dfa      	adds	r2, r7, #7
 8001bd6:	7812      	ldrb	r2, [r2, #0]
 8001bd8:	70da      	strb	r2, [r3, #3]
		      my_printf("** There has been an error while setting the spreading factor **");
		      my_printf("\r\n");
		  #endif
	  }
  }
  return state;
 8001bda:	230f      	movs	r3, #15
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781b      	ldrb	r3, [r3, #0]
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b005      	add	sp, #20
 8001be6:	bd90      	pop	{r4, r7, pc}
 8001be8:	200000d4 	.word	0x200000d4

08001bec <BSP_SX1272_isBW>:
		  it's '0' if the BW value does not exist.
 Parameters:
   band: bandwidth value to check.
*/
uint8_t	BSP_SX1272_isBW(uint16_t band)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	1dbb      	adds	r3, r7, #6
 8001bf6:	801a      	strh	r2, [r3, #0]
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_isBW'\r\n");
  #endif

  // Checking available values for currentstate._bandwidth
  switch(band)
 8001bf8:	1dbb      	adds	r3, r7, #6
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	3300      	adds	r3, #0
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d801      	bhi.n	8001c06 <BSP_SX1272_isBW+0x1a>
  {
	  case BW_125:
	  case BW_250:
	  case BW_500:	return 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <BSP_SX1272_isBW+0x1c>
					break;

	  default:		return 0;
 8001c06:	2300      	movs	r3, #0
  }
  #if (SX1272_debug_mode > 1)
	  my_printf("## Finished 'BSP_SX1272_isBW' ##\r\n");
	  my_printf("\r\n");
  #endif
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <BSP_SX1272_getBW>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t	BSP_SX1272_getBW()
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  uint8_t state = 2;
 8001c16:	1dfb      	adds	r3, r7, #7
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'getBW'\r\n");
  #endif

  if( currentstate._modem == FSK )
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <BSP_SX1272_getBW+0x6c>)
 8001c1e:	7f1b      	ldrb	r3, [r3, #28]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d103      	bne.n	8001c2c <BSP_SX1272_getBW+0x1c>
  {
	  state = -1;		// BW is not available in FSK mode
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	22ff      	movs	r2, #255	; 0xff
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	e020      	b.n	8001c6e <BSP_SX1272_getBW+0x5e>
	  #endif
  }
  else
  {
	  // take out bits 7-6 from REG_MODEM_CONFIG1 indicates currentstate._bandwidth
	  config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1)) >> 6;
 8001c2c:	201d      	movs	r0, #29
 8001c2e:	f002 fe05 	bl	800483c <BSP_SX1272_Read>
 8001c32:	0003      	movs	r3, r0
 8001c34:	001a      	movs	r2, r3
 8001c36:	1dbb      	adds	r3, r7, #6
 8001c38:	0992      	lsrs	r2, r2, #6
 8001c3a:	701a      	strb	r2, [r3, #0]
	  currentstate._bandwidth = config1;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <BSP_SX1272_getBW+0x6c>)
 8001c3e:	1dba      	adds	r2, r7, #6
 8001c40:	7812      	ldrb	r2, [r2, #0]
 8001c42:	705a      	strb	r2, [r3, #1]

	  if( (config1 == currentstate._bandwidth) && BSP_SX1272_isBW(currentstate._bandwidth) )
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <BSP_SX1272_getBW+0x6c>)
 8001c46:	785b      	ldrb	r3, [r3, #1]
 8001c48:	1dba      	adds	r2, r7, #6
 8001c4a:	7812      	ldrb	r2, [r2, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10b      	bne.n	8001c68 <BSP_SX1272_getBW+0x58>
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <BSP_SX1272_getBW+0x6c>)
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7ff ffc8 	bl	8001bec <BSP_SX1272_isBW>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d003      	beq.n	8001c68 <BSP_SX1272_getBW+0x58>
	  {
		  state = 0;
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e002      	b.n	8001c6e <BSP_SX1272_getBW+0x5e>
			  my_printf("\r\n");
		  #endif
	  }
	  else
	  {
		  state = 1;
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
			  my_printf("** There has been an error while getting bandwidth **");
			  my_printf("\r\n");
		  #endif
	  }
  }
  return state;
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	b25b      	sxtb	r3, r3
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200000d4 	.word	0x200000d4

08001c80 <BSP_SX1272_setBW>:
   state = 0  --> The command has been executed with no errors
 Parameters:
   band: bandwith value to set in LoRa modem configuration.
*/
int8_t	BSP_SX1272_setBW(uint16_t band)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	0002      	movs	r2, r0
 8001c88:	1dbb      	adds	r3, r7, #6
 8001c8a:	801a      	strh	r2, [r3, #0]
  uint8_t st0;
  int8_t state = 2;
 8001c8c:	230f      	movs	r3, #15
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2202      	movs	r2, #2
 8001c92:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_setBW'\r\n");
  #endif

  st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 8001c94:	230d      	movs	r3, #13
 8001c96:	18fc      	adds	r4, r7, r3
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f002 fdcf 	bl	800483c <BSP_SX1272_Read>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	7023      	strb	r3, [r4, #0]

  if( currentstate._modem == FSK )
 8001ca2:	4b75      	ldr	r3, [pc, #468]	; (8001e78 <BSP_SX1272_setBW+0x1f8>)
 8001ca4:	7f1b      	ldrb	r3, [r3, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <BSP_SX1272_setBW+0x38>
  {
	  #if (SX1272_debug_mode > 1)
		  my_printf("## Notice that FSK hasn't Bandwidth parameter, ");
		  my_printf("so you are configuring it in LoRa mode ##\r\n");
	  #endif
	  state = BSP_SX1272_setLORA();
 8001caa:	f7ff f88b 	bl	8000dc4 <BSP_SX1272_setLORA>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	001a      	movs	r2, r3
 8001cb2:	230f      	movs	r3, #15
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	701a      	strb	r2, [r3, #0]
  }
  BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);	// LoRa standby mode
 8001cb8:	2181      	movs	r1, #129	; 0x81
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f002 fdee 	bl	800489c <BSP_SX1272_Write>
  config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1));	// Save config1 to modify only the BW
 8001cc0:	230e      	movs	r3, #14
 8001cc2:	18fc      	adds	r4, r7, r3
 8001cc4:	201d      	movs	r0, #29
 8001cc6:	f002 fdb9 	bl	800483c <BSP_SX1272_Read>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	7023      	strb	r3, [r4, #0]
  switch(band)
 8001cce:	1dbb      	adds	r3, r7, #6
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d026      	beq.n	8001d24 <BSP_SX1272_setBW+0xa4>
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d035      	beq.n	8001d46 <BSP_SX1272_setBW+0xc6>
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d146      	bne.n	8001d6c <BSP_SX1272_setBW+0xec>
  {
	  case BW_125:  config1 = config1 & 0b00111111;	// clears bits 7 & 6 from REG_MODEM_CONFIG1
 8001cde:	230e      	movs	r3, #14
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	220e      	movs	r2, #14
 8001ce4:	18ba      	adds	r2, r7, r2
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	213f      	movs	r1, #63	; 0x3f
 8001cea:	400a      	ands	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
	  	  	  	  	BSP_SX1272_getSF();
 8001cee:	f7ff fd55 	bl	800179c <BSP_SX1272_getSF>
					if( currentstate._spreadingFactor == 11 )
 8001cf2:	4b61      	ldr	r3, [pc, #388]	; (8001e78 <BSP_SX1272_setBW+0x1f8>)
 8001cf4:	78db      	ldrb	r3, [r3, #3]
 8001cf6:	2b0b      	cmp	r3, #11
 8001cf8:	d107      	bne.n	8001d0a <BSP_SX1272_setBW+0x8a>
					{ // LowDataRateOptimize (Mandatory with BW_125 if SF_11)
						config1 = config1 | 0b00000001;
 8001cfa:	230e      	movs	r3, #14
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	220e      	movs	r2, #14
 8001d00:	18ba      	adds	r2, r7, r2
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	701a      	strb	r2, [r3, #0]
					}
					if( currentstate._spreadingFactor == 12 )
 8001d0a:	4b5b      	ldr	r3, [pc, #364]	; (8001e78 <BSP_SX1272_setBW+0x1f8>)
 8001d0c:	78db      	ldrb	r3, [r3, #3]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d12b      	bne.n	8001d6a <BSP_SX1272_setBW+0xea>
					{ // LowDataRateOptimize (Mandatory with BW_125 if SF_12)
						config1 = config1 | 0b00000001;
 8001d12:	230e      	movs	r3, #14
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	220e      	movs	r2, #14
 8001d18:	18ba      	adds	r2, r7, r2
 8001d1a:	7812      	ldrb	r2, [r2, #0]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001d22:	e022      	b.n	8001d6a <BSP_SX1272_setBW+0xea>
	  case BW_250:  config1 = config1 & 0b01111111;	// clears bit 7 from REG_MODEM_CONFIG1
 8001d24:	230e      	movs	r3, #14
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	220e      	movs	r2, #14
 8001d2a:	18ba      	adds	r2, r7, r2
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	217f      	movs	r1, #127	; 0x7f
 8001d30:	400a      	ands	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b01000000;	// sets bit 6 from REG_MODEM_CONFIG1
 8001d34:	230e      	movs	r3, #14
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	220e      	movs	r2, #14
 8001d3a:	18ba      	adds	r2, r7, r2
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	2140      	movs	r1, #64	; 0x40
 8001d40:	430a      	orrs	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
					break;
 8001d44:	e012      	b.n	8001d6c <BSP_SX1272_setBW+0xec>
	  case BW_500:  config1 = config1 & 0b10111111;	//clears bit 6 from REG_MODEM_CONFIG1
 8001d46:	230e      	movs	r3, #14
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	220e      	movs	r2, #14
 8001d4c:	18ba      	adds	r2, r7, r2
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	2140      	movs	r1, #64	; 0x40
 8001d52:	438a      	bics	r2, r1
 8001d54:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b10000000;	//sets bit 7 from REG_MODEM_CONFIG1
 8001d56:	230e      	movs	r3, #14
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	220e      	movs	r2, #14
 8001d5c:	18ba      	adds	r2, r7, r2
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	4249      	negs	r1, r1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	701a      	strb	r2, [r3, #0]
					break;
 8001d68:	e000      	b.n	8001d6c <BSP_SX1272_setBW+0xec>
					break;
 8001d6a:	46c0      	nop			; (mov r8, r8)
  }
  BSP_SX1272_Write(REG_MODEM_CONFIG1,config1);		// Update config1
 8001d6c:	230e      	movs	r3, #14
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	0019      	movs	r1, r3
 8001d74:	201d      	movs	r0, #29
 8001d76:	f002 fd91 	bl	800489c <BSP_SX1272_Write>

  config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1));
 8001d7a:	230e      	movs	r3, #14
 8001d7c:	18fc      	adds	r4, r7, r3
 8001d7e:	201d      	movs	r0, #29
 8001d80:	f002 fd5c 	bl	800483c <BSP_SX1272_Read>
 8001d84:	0003      	movs	r3, r0
 8001d86:	7023      	strb	r3, [r4, #0]
  // (config1 >> 6) ---> take out bits 7-6 from REG_MODEM_CONFIG1 (=currentstate._bandwidth)
  switch(band)
 8001d88:	1dbb      	adds	r3, r7, #6
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d035      	beq.n	8001dfc <BSP_SX1272_setBW+0x17c>
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d03f      	beq.n	8001e14 <BSP_SX1272_setBW+0x194>
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d14e      	bne.n	8001e36 <BSP_SX1272_setBW+0x1b6>
  {
	   case BW_125: if( (config1 >> 6) == BW_125 )
 8001d98:	230e      	movs	r3, #14
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	099b      	lsrs	r3, r3, #6
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d142      	bne.n	8001e2c <BSP_SX1272_setBW+0x1ac>
					{
						state = 0;
 8001da6:	230f      	movs	r3, #15
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
						if( currentstate._spreadingFactor == 11 )
 8001dae:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <BSP_SX1272_setBW+0x1f8>)
 8001db0:	78db      	ldrb	r3, [r3, #3]
 8001db2:	2b0b      	cmp	r3, #11
 8001db4:	d10e      	bne.n	8001dd4 <BSP_SX1272_setBW+0x154>
						{
							if( bitRead(config1, 0) == 1 )
 8001db6:	230e      	movs	r3, #14
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <BSP_SX1272_setBW+0x14c>
							{ // LowDataRateOptimize
								state = 0;
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e003      	b.n	8001dd4 <BSP_SX1272_setBW+0x154>
							}
							else
							{
								state = 1;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
							}
						}
						if( currentstate._spreadingFactor == 12 )
 8001dd4:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <BSP_SX1272_setBW+0x1f8>)
 8001dd6:	78db      	ldrb	r3, [r3, #3]
 8001dd8:	2b0c      	cmp	r3, #12
 8001dda:	d127      	bne.n	8001e2c <BSP_SX1272_setBW+0x1ac>
						{
							if( bitRead(config1, 0) == 1 )
 8001ddc:	230e      	movs	r3, #14
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4013      	ands	r3, r2
 8001de6:	d004      	beq.n	8001df2 <BSP_SX1272_setBW+0x172>
							{ // LowDataRateOptimize
								state = 0;
 8001de8:	230f      	movs	r3, #15
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
							{
								state = 1;
							}
						}
					}
					break;
 8001df0:	e01c      	b.n	8001e2c <BSP_SX1272_setBW+0x1ac>
								state = 1;
 8001df2:	230f      	movs	r3, #15
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
					break;
 8001dfa:	e017      	b.n	8001e2c <BSP_SX1272_setBW+0x1ac>
	   case BW_250: if( (config1 >> 6) == BW_250 )
 8001dfc:	230e      	movs	r3, #14
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	099b      	lsrs	r3, r3, #6
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d112      	bne.n	8001e30 <BSP_SX1272_setBW+0x1b0>
					{
						state = 0;
 8001e0a:	230f      	movs	r3, #15
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001e12:	e00d      	b.n	8001e30 <BSP_SX1272_setBW+0x1b0>
	   case BW_500: if( (config1 >> 6) == BW_500 )
 8001e14:	230e      	movs	r3, #14
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	099b      	lsrs	r3, r3, #6
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d108      	bne.n	8001e34 <BSP_SX1272_setBW+0x1b4>
					{
						state = 0;
 8001e22:	230f      	movs	r3, #15
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001e2a:	e003      	b.n	8001e34 <BSP_SX1272_setBW+0x1b4>
					break;
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	e002      	b.n	8001e36 <BSP_SX1272_setBW+0x1b6>
					break;
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	e000      	b.n	8001e36 <BSP_SX1272_setBW+0x1b6>
					break;
 8001e34:	46c0      	nop			; (mov r8, r8)
  }

  if( !BSP_SX1272_isBW(band) )
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7ff fed6 	bl	8001bec <BSP_SX1272_isBW>
 8001e40:	1e03      	subs	r3, r0, #0
 8001e42:	d104      	bne.n	8001e4e <BSP_SX1272_setBW+0x1ce>
  {
	  state = 1;
 8001e44:	230f      	movs	r3, #15
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e004      	b.n	8001e58 <BSP_SX1272_setBW+0x1d8>
		  my_printf("\r\n");
	  #endif
  }
  else
  {
	  currentstate._bandwidth = band;
 8001e4e:	1dbb      	adds	r3, r7, #6
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <BSP_SX1272_setBW+0x1f8>)
 8001e56:	705a      	strb	r2, [r3, #1]
		  my_printf("%d",band);
		  my_printf(" has been successfully set ##\r\n");
		  my_printf("\r\n");
	  #endif
  }
  BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 8001e58:	230d      	movs	r3, #13
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	0019      	movs	r1, r3
 8001e60:	2001      	movs	r0, #1
 8001e62:	f002 fd1b 	bl	800489c <BSP_SX1272_Write>
  return state;
 8001e66:	230f      	movs	r3, #15
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b25b      	sxtb	r3, r3
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b005      	add	sp, #20
 8001e74:	bd90      	pop	{r4, r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	200000d4 	.word	0x200000d4

08001e7c <BSP_SX1272_isCR>:
		  it's '0' if the CR value does not exist.
 Parameters:
   cod: coding rate value to check.
*/
uint8_t	BSP_SX1272_isCR(uint8_t cod)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	0002      	movs	r2, r0
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	701a      	strb	r2, [r3, #0]
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_isCR'\r\n");
  #endif

  // Checking available values for currentstate._codingRate
  switch(cod)
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d801      	bhi.n	8001e96 <BSP_SX1272_isCR+0x1a>
  {
	  case CR_5:
	  case CR_6:
	  case CR_7:
	  case CR_8:	return 1;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <BSP_SX1272_isCR+0x1c>
					break;

	  default:		return 0;
 8001e96:	2300      	movs	r3, #0
  }
  #if (SX1272_debug_mode > 1)
	  my_printf("## Finished 'BSP_SX1272_isCR' ##\r\n");
	  my_printf("\r\n");
  #endif
}
 8001e98:	0018      	movs	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <BSP_SX1272_getCR>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t	BSP_SX1272_getCR()
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
  int8_t state = 2;
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'getCR'\r\n");
  #endif

  if( currentstate._modem == FSK )
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <BSP_SX1272_getCR+0x74>)
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d103      	bne.n	8001ebc <BSP_SX1272_getCR+0x1c>
  {
	  state = -1;		// CR is not available in FSK mode
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	22ff      	movs	r2, #255	; 0xff
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	e024      	b.n	8001f06 <BSP_SX1272_getCR+0x66>
	  #endif
  }
  else
  {
	// take out bits 7-3 from REG_MODEM_CONFIG1 indicates currentstate._bandwidth & currentstate._codingRate
	config1 = (BSP_SX1272_Read(REG_MODEM_CONFIG1)) >> 3;
 8001ebc:	201d      	movs	r0, #29
 8001ebe:	f002 fcbd 	bl	800483c <BSP_SX1272_Read>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	1dbb      	adds	r3, r7, #6
 8001ec8:	08d2      	lsrs	r2, r2, #3
 8001eca:	701a      	strb	r2, [r3, #0]
	config1 = config1 & 0b00000111;	// clears bits 7-5 ---> clears currentstate._bandwidth
 8001ecc:	1dbb      	adds	r3, r7, #6
 8001ece:	1dba      	adds	r2, r7, #6
 8001ed0:	7812      	ldrb	r2, [r2, #0]
 8001ed2:	2107      	movs	r1, #7
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	701a      	strb	r2, [r3, #0]
	currentstate._codingRate = config1;
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <BSP_SX1272_getCR+0x74>)
 8001eda:	1dba      	adds	r2, r7, #6
 8001edc:	7812      	ldrb	r2, [r2, #0]
 8001ede:	709a      	strb	r2, [r3, #2]
	state = 1;
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]

	if( (config1 == currentstate._codingRate) && BSP_SX1272_isCR(currentstate._codingRate) )
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <BSP_SX1272_getCR+0x74>)
 8001ee8:	789b      	ldrb	r3, [r3, #2]
 8001eea:	1dba      	adds	r2, r7, #6
 8001eec:	7812      	ldrb	r2, [r2, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d109      	bne.n	8001f06 <BSP_SX1272_getCR+0x66>
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <BSP_SX1272_getCR+0x74>)
 8001ef4:	789b      	ldrb	r3, [r3, #2]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f7ff ffc0 	bl	8001e7c <BSP_SX1272_isCR>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d002      	beq.n	8001f06 <BSP_SX1272_getCR+0x66>
	{
		state = 0;
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
			my_printf(" ##\r\n");
			my_printf("\r\n");
		#endif
	}
  }
  return state;
 8001f06:	1dfb      	adds	r3, r7, #7
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b25b      	sxtb	r3, r3
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b002      	add	sp, #8
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200000d4 	.word	0x200000d4

08001f18 <BSP_SX1272_setCR>:
   state = -1 --> Forbidden command for this protocol
 Parameters:
   cod: coding rate value to set in LoRa modem configuration.
*/
int8_t	BSP_SX1272_setCR(uint8_t cod)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	0002      	movs	r2, r0
 8001f20:	1dfb      	adds	r3, r7, #7
 8001f22:	701a      	strb	r2, [r3, #0]
  uint8_t st0;
  int8_t state = 2;
 8001f24:	230f      	movs	r3, #15
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2202      	movs	r2, #2
 8001f2a:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_setCR'\r\n");
  #endif

  st0 = BSP_SX1272_Read(REG_OP_MODE);		// Save the previous status
 8001f2c:	230d      	movs	r3, #13
 8001f2e:	18fc      	adds	r4, r7, r3
 8001f30:	2001      	movs	r0, #1
 8001f32:	f002 fc83 	bl	800483c <BSP_SX1272_Read>
 8001f36:	0003      	movs	r3, r0
 8001f38:	7023      	strb	r3, [r4, #0]

  if( currentstate._modem == FSK )
 8001f3a:	4b72      	ldr	r3, [pc, #456]	; (8002104 <BSP_SX1272_setCR+0x1ec>)
 8001f3c:	7f1b      	ldrb	r3, [r3, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d107      	bne.n	8001f52 <BSP_SX1272_setCR+0x3a>
  {
	  #if (SX1272_debug_mode > 1)
		  my_printf("## Notice that FSK hasn't Coding Rate parameter, ");
		  my_printf("so you are configuring it in LoRa mode ##\r\n");
	  #endif
	  state = BSP_SX1272_setLORA();
 8001f42:	f7fe ff3f 	bl	8000dc4 <BSP_SX1272_setLORA>
 8001f46:	0003      	movs	r3, r0
 8001f48:	001a      	movs	r2, r3
 8001f4a:	230f      	movs	r3, #15
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e0b9      	b.n	80020c6 <BSP_SX1272_setCR+0x1ae>
  }
  else
  {
	  BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);		// Set Standby mode to write in registers
 8001f52:	2181      	movs	r1, #129	; 0x81
 8001f54:	2001      	movs	r0, #1
 8001f56:	f002 fca1 	bl	800489c <BSP_SX1272_Write>

	  config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);	// Save config1 to modify only the CR
 8001f5a:	230e      	movs	r3, #14
 8001f5c:	18fc      	adds	r4, r7, r3
 8001f5e:	201d      	movs	r0, #29
 8001f60:	f002 fc6c 	bl	800483c <BSP_SX1272_Read>
 8001f64:	0003      	movs	r3, r0
 8001f66:	7023      	strb	r3, [r4, #0]
	  switch(cod)
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d019      	beq.n	8001fa4 <BSP_SX1272_setCR+0x8c>
 8001f70:	dc02      	bgt.n	8001f78 <BSP_SX1272_setCR+0x60>
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d005      	beq.n	8001f82 <BSP_SX1272_setCR+0x6a>
 8001f76:	e048      	b.n	800200a <BSP_SX1272_setCR+0xf2>
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d024      	beq.n	8001fc6 <BSP_SX1272_setCR+0xae>
 8001f7c:	2b04      	cmp	r3, #4
 8001f7e:	d033      	beq.n	8001fe8 <BSP_SX1272_setCR+0xd0>
 8001f80:	e043      	b.n	800200a <BSP_SX1272_setCR+0xf2>
	  {
		 case CR_5: config1 = config1 & 0b11001111;	// clears bits 5 & 4 from REG_MODEM_CONFIG1
 8001f82:	230e      	movs	r3, #14
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	220e      	movs	r2, #14
 8001f88:	18ba      	adds	r2, r7, r2
 8001f8a:	7812      	ldrb	r2, [r2, #0]
 8001f8c:	2130      	movs	r1, #48	; 0x30
 8001f8e:	438a      	bics	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b00001000;	// sets bit 3 from REG_MODEM_CONFIG1
 8001f92:	230e      	movs	r3, #14
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	220e      	movs	r2, #14
 8001f98:	18ba      	adds	r2, r7, r2
 8001f9a:	7812      	ldrb	r2, [r2, #0]
 8001f9c:	2108      	movs	r1, #8
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	701a      	strb	r2, [r3, #0]
					break;
 8001fa2:	e032      	b.n	800200a <BSP_SX1272_setCR+0xf2>
		 case CR_6: config1 = config1 & 0b11010111;	// clears bits 5 & 3 from REG_MODEM_CONFIG1
 8001fa4:	230e      	movs	r3, #14
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	220e      	movs	r2, #14
 8001faa:	18ba      	adds	r2, r7, r2
 8001fac:	7812      	ldrb	r2, [r2, #0]
 8001fae:	2128      	movs	r1, #40	; 0x28
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b00010000;	// sets bit 4 from REG_MODEM_CONFIG1
 8001fb4:	230e      	movs	r3, #14
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	220e      	movs	r2, #14
 8001fba:	18ba      	adds	r2, r7, r2
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
					break;
 8001fc4:	e021      	b.n	800200a <BSP_SX1272_setCR+0xf2>
		 case CR_7: config1 = config1 & 0b11011111;	// clears bit 5 from REG_MODEM_CONFIG1
 8001fc6:	230e      	movs	r3, #14
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	220e      	movs	r2, #14
 8001fcc:	18ba      	adds	r2, r7, r2
 8001fce:	7812      	ldrb	r2, [r2, #0]
 8001fd0:	2120      	movs	r1, #32
 8001fd2:	438a      	bics	r2, r1
 8001fd4:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b00011000;	// sets bits 4 & 3 from REG_MODEM_CONFIG1
 8001fd6:	230e      	movs	r3, #14
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	220e      	movs	r2, #14
 8001fdc:	18ba      	adds	r2, r7, r2
 8001fde:	7812      	ldrb	r2, [r2, #0]
 8001fe0:	2118      	movs	r1, #24
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
					break;
 8001fe6:	e010      	b.n	800200a <BSP_SX1272_setCR+0xf2>
		 case CR_8: config1 = config1 & 0b11100111;	// clears bits 4 & 3 from REG_MODEM_CONFIG1
 8001fe8:	230e      	movs	r3, #14
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	220e      	movs	r2, #14
 8001fee:	18ba      	adds	r2, r7, r2
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	2118      	movs	r1, #24
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	701a      	strb	r2, [r3, #0]
					config1 = config1 | 0b00100000;	// sets bit 5 from REG_MODEM_CONFIG1
 8001ff8:	230e      	movs	r3, #14
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	220e      	movs	r2, #14
 8001ffe:	18ba      	adds	r2, r7, r2
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	2120      	movs	r1, #32
 8002004:	430a      	orrs	r2, r1
 8002006:	701a      	strb	r2, [r3, #0]
					break;
 8002008:	46c0      	nop			; (mov r8, r8)
	  }
	  BSP_SX1272_Write(REG_MODEM_CONFIG1, config1);		// Update config1
 800200a:	230e      	movs	r3, #14
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	0019      	movs	r1, r3
 8002012:	201d      	movs	r0, #29
 8002014:	f002 fc42 	bl	800489c <BSP_SX1272_Write>

	  config1 = BSP_SX1272_Read(REG_MODEM_CONFIG1);
 8002018:	230e      	movs	r3, #14
 800201a:	18fc      	adds	r4, r7, r3
 800201c:	201d      	movs	r0, #29
 800201e:	f002 fc0d 	bl	800483c <BSP_SX1272_Read>
 8002022:	0003      	movs	r3, r0
 8002024:	7023      	strb	r3, [r4, #0]
	  // ((config1 >> 3) & 0b0000111) ---> take out bits 5-3 from REG_MODEM_CONFIG1 (=currentstate._codingRate)
	  switch(cod)
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d017      	beq.n	800205e <BSP_SX1272_setCR+0x146>
 800202e:	dc02      	bgt.n	8002036 <BSP_SX1272_setCR+0x11e>
 8002030:	2b01      	cmp	r3, #1
 8002032:	d005      	beq.n	8002040 <BSP_SX1272_setCR+0x128>
 8002034:	e047      	b.n	80020c6 <BSP_SX1272_setCR+0x1ae>
 8002036:	2b03      	cmp	r3, #3
 8002038:	d020      	beq.n	800207c <BSP_SX1272_setCR+0x164>
 800203a:	2b04      	cmp	r3, #4
 800203c:	d02d      	beq.n	800209a <BSP_SX1272_setCR+0x182>
 800203e:	e042      	b.n	80020c6 <BSP_SX1272_setCR+0x1ae>
	  {
		 case CR_5: if( ((config1 >> 3) & 0b0000111) == 0x01 )
 8002040:	230e      	movs	r3, #14
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	08db      	lsrs	r3, r3, #3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	001a      	movs	r2, r3
 800204c:	2307      	movs	r3, #7
 800204e:	4013      	ands	r3, r2
 8002050:	2b01      	cmp	r3, #1
 8002052:	d131      	bne.n	80020b8 <BSP_SX1272_setCR+0x1a0>
					{
						state = 0;
 8002054:	230f      	movs	r3, #15
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
					}
					break;
 800205c:	e02c      	b.n	80020b8 <BSP_SX1272_setCR+0x1a0>
		 case CR_6: if( ((config1 >> 3) & 0b0000111) == 0x02 )
 800205e:	230e      	movs	r3, #14
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	08db      	lsrs	r3, r3, #3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	001a      	movs	r2, r3
 800206a:	2307      	movs	r3, #7
 800206c:	4013      	ands	r3, r2
 800206e:	2b02      	cmp	r3, #2
 8002070:	d124      	bne.n	80020bc <BSP_SX1272_setCR+0x1a4>
					{
						state = 0;
 8002072:	230f      	movs	r3, #15
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
					}
					break;
 800207a:	e01f      	b.n	80020bc <BSP_SX1272_setCR+0x1a4>
		 case CR_7: if( ((config1 >> 3) & 0b0000111) == 0x03 )
 800207c:	230e      	movs	r3, #14
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	08db      	lsrs	r3, r3, #3
 8002084:	b2db      	uxtb	r3, r3
 8002086:	001a      	movs	r2, r3
 8002088:	2307      	movs	r3, #7
 800208a:	4013      	ands	r3, r2
 800208c:	2b03      	cmp	r3, #3
 800208e:	d117      	bne.n	80020c0 <BSP_SX1272_setCR+0x1a8>
					{
						state = 0;
 8002090:	230f      	movs	r3, #15
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002098:	e012      	b.n	80020c0 <BSP_SX1272_setCR+0x1a8>
		 case CR_8: if( ((config1 >> 3) & 0b0000111) == 0x04 )
 800209a:	230e      	movs	r3, #14
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	001a      	movs	r2, r3
 80020a6:	2307      	movs	r3, #7
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d10a      	bne.n	80020c4 <BSP_SX1272_setCR+0x1ac>
					{
						state = 0;
 80020ae:	230f      	movs	r3, #15
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80020b6:	e005      	b.n	80020c4 <BSP_SX1272_setCR+0x1ac>
					break;
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	e004      	b.n	80020c6 <BSP_SX1272_setCR+0x1ae>
					break;
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	e002      	b.n	80020c6 <BSP_SX1272_setCR+0x1ae>
					break;
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	e000      	b.n	80020c6 <BSP_SX1272_setCR+0x1ae>
					break;
 80020c4:	46c0      	nop			; (mov r8, r8)
	  }
  }

  if( BSP_SX1272_isCR(cod) )
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff fed6 	bl	8001e7c <BSP_SX1272_isCR>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d004      	beq.n	80020de <BSP_SX1272_setCR+0x1c6>
  {
	  currentstate._codingRate = cod;
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <BSP_SX1272_setCR+0x1ec>)
 80020d6:	1dfa      	adds	r2, r7, #7
 80020d8:	7812      	ldrb	r2, [r2, #0]
 80020da:	709a      	strb	r2, [r3, #2]
 80020dc:	e003      	b.n	80020e6 <BSP_SX1272_setCR+0x1ce>
		  my_printf("\r\n");
	  #endif
  }
  else
  {
	  state = 1;
 80020de:	230f      	movs	r3, #15
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
	  #if (SX1272_debug_mode > 1)
		  my_printf("** There has been an error while configuring Coding Rate parameter **\r\n");
		  my_printf("\r\n");
	  #endif
  }
  BSP_SX1272_Write(REG_OP_MODE,st0);	// Getting back to previous status
 80020e6:	230d      	movs	r3, #13
 80020e8:	18fb      	adds	r3, r7, r3
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	0019      	movs	r1, r3
 80020ee:	2001      	movs	r0, #1
 80020f0:	f002 fbd4 	bl	800489c <BSP_SX1272_Write>
  return state;
 80020f4:	230f      	movs	r3, #15
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b25b      	sxtb	r3, r3
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b005      	add	sp, #20
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	200000d4 	.word	0x200000d4

08002108 <BSP_SX1272_isChannel>:
		  it's '0' if the CR value does not exist.
 Parameters:
   ch: frequency channel value to check.
*/
uint8_t	BSP_SX1272_isChannel(uint32_t ch)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	  my_printf("\r\n");
	  my_printf("Starting 'BSP_SX1272_isChannel'\r\n");
  #endif

  // Checking available values for currentstate._channel
  switch(ch)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a38      	ldr	r2, [pc, #224]	; (80021f4 <BSP_SX1272_isChannel+0xec>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d100      	bne.n	800211a <BSP_SX1272_isChannel+0x12>
 8002118:	e065      	b.n	80021e6 <BSP_SX1272_isChannel+0xde>
 800211a:	4a36      	ldr	r2, [pc, #216]	; (80021f4 <BSP_SX1272_isChannel+0xec>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d832      	bhi.n	8002186 <BSP_SX1272_isChannel+0x7e>
 8002120:	4a35      	ldr	r2, [pc, #212]	; (80021f8 <BSP_SX1272_isChannel+0xf0>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d100      	bne.n	8002128 <BSP_SX1272_isChannel+0x20>
 8002126:	e05e      	b.n	80021e6 <BSP_SX1272_isChannel+0xde>
 8002128:	4a33      	ldr	r2, [pc, #204]	; (80021f8 <BSP_SX1272_isChannel+0xf0>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d816      	bhi.n	800215c <BSP_SX1272_isChannel+0x54>
 800212e:	4a33      	ldr	r2, [pc, #204]	; (80021fc <BSP_SX1272_isChannel+0xf4>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d100      	bne.n	8002136 <BSP_SX1272_isChannel+0x2e>
 8002134:	e057      	b.n	80021e6 <BSP_SX1272_isChannel+0xde>
 8002136:	4a31      	ldr	r2, [pc, #196]	; (80021fc <BSP_SX1272_isChannel+0xf4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d808      	bhi.n	800214e <BSP_SX1272_isChannel+0x46>
 800213c:	4a30      	ldr	r2, [pc, #192]	; (8002200 <BSP_SX1272_isChannel+0xf8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d100      	bne.n	8002144 <BSP_SX1272_isChannel+0x3c>
 8002142:	e050      	b.n	80021e6 <BSP_SX1272_isChannel+0xde>
 8002144:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <BSP_SX1272_isChannel+0xfc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d100      	bne.n	800214c <BSP_SX1272_isChannel+0x44>
 800214a:	e04c      	b.n	80021e6 <BSP_SX1272_isChannel+0xde>
 800214c:	e04d      	b.n	80021ea <BSP_SX1272_isChannel+0xe2>
 800214e:	4a2e      	ldr	r2, [pc, #184]	; (8002208 <BSP_SX1272_isChannel+0x100>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d048      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 8002154:	4a2d      	ldr	r2, [pc, #180]	; (800220c <BSP_SX1272_isChannel+0x104>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d045      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 800215a:	e046      	b.n	80021ea <BSP_SX1272_isChannel+0xe2>
 800215c:	4a2c      	ldr	r2, [pc, #176]	; (8002210 <BSP_SX1272_isChannel+0x108>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d041      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 8002162:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <BSP_SX1272_isChannel+0x108>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d807      	bhi.n	8002178 <BSP_SX1272_isChannel+0x70>
 8002168:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <BSP_SX1272_isChannel+0x10c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d03b      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 800216e:	22d9      	movs	r2, #217	; 0xd9
 8002170:	0412      	lsls	r2, r2, #16
 8002172:	4293      	cmp	r3, r2
 8002174:	d037      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 8002176:	e038      	b.n	80021ea <BSP_SX1272_isChannel+0xe2>
 8002178:	4a27      	ldr	r2, [pc, #156]	; (8002218 <BSP_SX1272_isChannel+0x110>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d033      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 800217e:	4a27      	ldr	r2, [pc, #156]	; (800221c <BSP_SX1272_isChannel+0x114>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d030      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 8002184:	e031      	b.n	80021ea <BSP_SX1272_isChannel+0xe2>
 8002186:	4a26      	ldr	r2, [pc, #152]	; (8002220 <BSP_SX1272_isChannel+0x118>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d02c      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 800218c:	4a24      	ldr	r2, [pc, #144]	; (8002220 <BSP_SX1272_isChannel+0x118>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d813      	bhi.n	80021ba <BSP_SX1272_isChannel+0xb2>
 8002192:	4a24      	ldr	r2, [pc, #144]	; (8002224 <BSP_SX1272_isChannel+0x11c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d026      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <BSP_SX1272_isChannel+0x11c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d806      	bhi.n	80021ac <BSP_SX1272_isChannel+0xa4>
 800219e:	4a22      	ldr	r2, [pc, #136]	; (8002228 <BSP_SX1272_isChannel+0x120>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d020      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 80021a4:	4a21      	ldr	r2, [pc, #132]	; (800222c <BSP_SX1272_isChannel+0x124>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01d      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 80021aa:	e01e      	b.n	80021ea <BSP_SX1272_isChannel+0xe2>
 80021ac:	4a20      	ldr	r2, [pc, #128]	; (8002230 <BSP_SX1272_isChannel+0x128>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 80021b2:	4a20      	ldr	r2, [pc, #128]	; (8002234 <BSP_SX1272_isChannel+0x12c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d016      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 80021b8:	e017      	b.n	80021ea <BSP_SX1272_isChannel+0xe2>
 80021ba:	4a1f      	ldr	r2, [pc, #124]	; (8002238 <BSP_SX1272_isChannel+0x130>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d012      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <BSP_SX1272_isChannel+0x130>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d806      	bhi.n	80021d4 <BSP_SX1272_isChannel+0xcc>
 80021c6:	4a1d      	ldr	r2, [pc, #116]	; (800223c <BSP_SX1272_isChannel+0x134>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00c      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 80021cc:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <BSP_SX1272_isChannel+0x138>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d009      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 80021d2:	e00a      	b.n	80021ea <BSP_SX1272_isChannel+0xe2>
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <BSP_SX1272_isChannel+0x13c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d005      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 80021da:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <BSP_SX1272_isChannel+0x140>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d002      	beq.n	80021e6 <BSP_SX1272_isChannel+0xde>
 80021e0:	4a1a      	ldr	r2, [pc, #104]	; (800224c <BSP_SX1272_isChannel+0x144>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <BSP_SX1272_isChannel+0xe2>
	  case CH_07_900:
	  case CH_08_900:
	  case CH_09_900:
	  case CH_10_900:
	  case CH_11_900:
	  case CH_12_900:	return 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <BSP_SX1272_isChannel+0xe4>
						break;

	  default:			return 0;
 80021ea:	2300      	movs	r3, #0
  }
  #if (SX1272_debug_mode > 1)
	  my_printf("## Finished 'BSP_SX1272_isChannel' ##\r\n");
	  my_printf("\r\n");
  #endif
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	00e1c51e 	.word	0x00e1c51e
 80021f8:	00d8accc 	.word	0x00d8accc
 80021fc:	00d87333 	.word	0x00d87333
 8002200:	00d84ccc 	.word	0x00d84ccc
 8002204:	00d86000 	.word	0x00d86000
 8002208:	00d88666 	.word	0x00d88666
 800220c:	00d89999 	.word	0x00d89999
 8002210:	00d90666 	.word	0x00d90666
 8002214:	00d8c000 	.word	0x00d8c000
 8002218:	00d91333 	.word	0x00d91333
 800221c:	00d92000 	.word	0x00d92000
 8002220:	00e4c000 	.word	0x00e4c000
 8002224:	00e363d7 	.word	0x00e363d7
 8002228:	00e24f5c 	.word	0x00e24f5c
 800222c:	00e2d999 	.word	0x00e2d999
 8002230:	00e3ee14 	.word	0x00e3ee14
 8002234:	00e47851 	.word	0x00e47851
 8002238:	00e6170a 	.word	0x00e6170a
 800223c:	00e5028f 	.word	0x00e5028f
 8002240:	00e58ccc 	.word	0x00e58ccc
 8002244:	00e72b85 	.word	0x00e72b85
 8002248:	00e7b5c2 	.word	0x00e7b5c2
 800224c:	00e6a147 	.word	0x00e6a147

08002250 <BSP_SX1272_getChannel>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getChannel()
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
  uint8_t state = 2;
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	2202      	movs	r2, #2
 800225a:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'getChannel'\r\n");
  #endif

  freq3 = BSP_SX1272_Read(REG_FRF_MSB);	// frequency channel MSB
 800225c:	1dbc      	adds	r4, r7, #6
 800225e:	2006      	movs	r0, #6
 8002260:	f002 faec 	bl	800483c <BSP_SX1272_Read>
 8002264:	0003      	movs	r3, r0
 8002266:	7023      	strb	r3, [r4, #0]
  freq2 = BSP_SX1272_Read(REG_FRF_MID);	// frequency channel MID
 8002268:	1d7c      	adds	r4, r7, #5
 800226a:	2007      	movs	r0, #7
 800226c:	f002 fae6 	bl	800483c <BSP_SX1272_Read>
 8002270:	0003      	movs	r3, r0
 8002272:	7023      	strb	r3, [r4, #0]
  freq1 = BSP_SX1272_Read(REG_FRF_LSB);	// frequency channel LSB
 8002274:	1d3c      	adds	r4, r7, #4
 8002276:	2008      	movs	r0, #8
 8002278:	f002 fae0 	bl	800483c <BSP_SX1272_Read>
 800227c:	0003      	movs	r3, r0
 800227e:	7023      	strb	r3, [r4, #0]
  ch = ((uint32_t)freq3 << 16) + ((uint32_t)freq2 << 8) + (uint32_t)freq1;
 8002280:	1dbb      	adds	r3, r7, #6
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	1d7b      	adds	r3, r7, #5
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	18d2      	adds	r2, r2, r3
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	18d3      	adds	r3, r2, r3
 8002294:	603b      	str	r3, [r7, #0]
  currentstate._channel = ch;						// frequency channel
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <BSP_SX1272_getChannel+0x80>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	605a      	str	r2, [r3, #4]

  if( (currentstate._channel == ch) && BSP_SX1272_isChannel(currentstate._channel) )
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <BSP_SX1272_getChannel+0x80>)
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d10a      	bne.n	80022bc <BSP_SX1272_getChannel+0x6c>
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <BSP_SX1272_getChannel+0x80>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7ff ff2c 	bl	8002108 <BSP_SX1272_isChannel>
 80022b0:	1e03      	subs	r3, r0, #0
 80022b2:	d003      	beq.n	80022bc <BSP_SX1272_getChannel+0x6c>
  {
	  state = 0;
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e002      	b.n	80022c2 <BSP_SX1272_getChannel+0x72>
		  my_printf("\r\n");
	  #endif
  }
  else
  {
	  state = 1;
 80022bc:	1dfb      	adds	r3, r7, #7
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
  }
  return state;
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	781b      	ldrb	r3, [r3, #0]
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b003      	add	sp, #12
 80022cc:	bd90      	pop	{r4, r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	200000d4 	.word	0x200000d4

080022d4 <BSP_SX1272_setChannel>:
   state = -1 --> Forbidden command for this protocol
 Parameters:
   ch: frequency channel value to set in configuration.
*/
int8_t BSP_SX1272_setChannel(uint32_t ch)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint8_t st0;
  int8_t state = 2;
 80022dc:	231f      	movs	r3, #31
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'setChannel'\r\n");
  #endif

  st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 80022e4:	231e      	movs	r3, #30
 80022e6:	18fc      	adds	r4, r7, r3
 80022e8:	2001      	movs	r0, #1
 80022ea:	f002 faa7 	bl	800483c <BSP_SX1272_Read>
 80022ee:	0003      	movs	r3, r0
 80022f0:	7023      	strb	r3, [r4, #0]
  if( currentstate._modem == LORA )
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <BSP_SX1272_setChannel+0x10c>)
 80022f4:	7f1b      	ldrb	r3, [r3, #28]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d104      	bne.n	8002304 <BSP_SX1272_setChannel+0x30>
  {
	  // LoRa Stdby mode in order to write in registers
	  BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 80022fa:	2181      	movs	r1, #129	; 0x81
 80022fc:	2001      	movs	r0, #1
 80022fe:	f002 facd 	bl	800489c <BSP_SX1272_Write>
 8002302:	e003      	b.n	800230c <BSP_SX1272_setChannel+0x38>
  }
  else
  {
	  // FSK Stdby mode in order to write in registers
	  BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 8002304:	2101      	movs	r1, #1
 8002306:	2001      	movs	r0, #1
 8002308:	f002 fac8 	bl	800489c <BSP_SX1272_Write>
  }

  freq3 = ((ch >> 16) & 0x0FF);		// frequency channel MSB
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0c1b      	lsrs	r3, r3, #16
 8002310:	22ff      	movs	r2, #255	; 0xff
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
  freq2 = ((ch >> 8) & 0x0FF);		// frequency channel MIB
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	22ff      	movs	r2, #255	; 0xff
 800231c:	4013      	ands	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
  freq1 = (ch & 0xFF);				// frequency channel LSB
 8002320:	2313      	movs	r3, #19
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	701a      	strb	r2, [r3, #0]

  BSP_SX1272_Write(REG_FRF_MSB, freq3);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	0019      	movs	r1, r3
 800232e:	2006      	movs	r0, #6
 8002330:	f002 fab4 	bl	800489c <BSP_SX1272_Write>
  BSP_SX1272_Write(REG_FRF_MID, freq2);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	0019      	movs	r1, r3
 800233a:	2007      	movs	r0, #7
 800233c:	f002 faae 	bl	800489c <BSP_SX1272_Write>
  BSP_SX1272_Write(REG_FRF_LSB, freq1);
 8002340:	2313      	movs	r3, #19
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	0019      	movs	r1, r3
 8002348:	2008      	movs	r0, #8
 800234a:	f002 faa7 	bl	800489c <BSP_SX1272_Write>

  // storing MSB in freq channel value
  freq3 = (BSP_SX1272_Read(REG_FRF_MSB));
 800234e:	2006      	movs	r0, #6
 8002350:	f002 fa74 	bl	800483c <BSP_SX1272_Read>
 8002354:	0003      	movs	r3, r0
 8002356:	61bb      	str	r3, [r7, #24]
  freq = (freq3 << 8) & 0xFFFFFF;
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	60fb      	str	r3, [r7, #12]

  // storing MID in freq channel value
  freq2 = (BSP_SX1272_Read(REG_FRF_MID));
 8002362:	2007      	movs	r0, #7
 8002364:	f002 fa6a 	bl	800483c <BSP_SX1272_Read>
 8002368:	0003      	movs	r3, r0
 800236a:	617b      	str	r3, [r7, #20]
  freq = (freq << 8) + ((freq2 << 8) & 0xFFFFFF);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	18d3      	adds	r3, r2, r3
 800237a:	60fb      	str	r3, [r7, #12]

  // storing LSB in freq channel value
  freq = freq + ((BSP_SX1272_Read(REG_FRF_LSB)) & 0xFFFFFF);
 800237c:	2008      	movs	r0, #8
 800237e:	f002 fa5d 	bl	800483c <BSP_SX1272_Read>
 8002382:	0003      	movs	r3, r0
 8002384:	001a      	movs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	189b      	adds	r3, r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

  if( freq == ch )
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d107      	bne.n	80023a4 <BSP_SX1272_setChannel+0xd0>
  {
    state = 0;
 8002394:	231f      	movs	r3, #31
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
    currentstate._channel = ch;
 800239c:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <BSP_SX1272_setChannel+0x10c>)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	e003      	b.n	80023ac <BSP_SX1272_setChannel+0xd8>
		my_printf("\r\n");
	#endif
  }
  else
  {
    state = 1;
 80023a4:	231f      	movs	r3, #31
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
  }

  if( !BSP_SX1272_isChannel(ch) )
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7ff feaa 	bl	8002108 <BSP_SX1272_isChannel>
 80023b4:	1e03      	subs	r3, r0, #0
 80023b6:	d103      	bne.n	80023c0 <BSP_SX1272_setChannel+0xec>
  {
	 state = -1;
 80023b8:	231f      	movs	r3, #31
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	22ff      	movs	r2, #255	; 0xff
 80023be:	701a      	strb	r2, [r3, #0]
		 my_printf("is not a correct value **\r\n");
		 my_printf("\r\n");
	 #endif
  }

  BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 80023c0:	231e      	movs	r3, #30
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	0019      	movs	r1, r3
 80023c8:	2001      	movs	r0, #1
 80023ca:	f002 fa67 	bl	800489c <BSP_SX1272_Write>
  return state;
 80023ce:	231f      	movs	r3, #31
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b25b      	sxtb	r3, r3
}
 80023d6:	0018      	movs	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	b009      	add	sp, #36	; 0x24
 80023dc:	bd90      	pop	{r4, r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	200000d4 	.word	0x200000d4

080023e4 <BSP_SX1272_getPower>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getPower()
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
  uint8_t state = 2;
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
  uint8_t value = 0x00;
 80023f0:	1dbb      	adds	r3, r7, #6
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'getPower'\r\n");
  #endif

  value = BSP_SX1272_Read(REG_PA_CONFIG);
 80023f6:	1dbc      	adds	r4, r7, #6
 80023f8:	2009      	movs	r0, #9
 80023fa:	f002 fa1f 	bl	800483c <BSP_SX1272_Read>
 80023fe:	0003      	movs	r3, r0
 8002400:	7023      	strb	r3, [r4, #0]
  state = 1;
 8002402:	1dfb      	adds	r3, r7, #7
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]

  currentstate._power = value;
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <BSP_SX1272_getPower+0x48>)
 800240a:	1dba      	adds	r2, r7, #6
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	721a      	strb	r2, [r3, #8]
  if( (value > -1) && (value < 16) )
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b0f      	cmp	r3, #15
 8002416:	d802      	bhi.n	800241e <BSP_SX1272_getPower+0x3a>
  {
	    state = 0;
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
			my_printf(" ##\r\n");
			my_printf("\r\n");
		#endif
	}

  return state;
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b003      	add	sp, #12
 8002428:	bd90      	pop	{r4, r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	200000d4 	.word	0x200000d4

08002430 <BSP_SX1272_setPower>:
 Parameters:
   pow: power option to set in configuration. The input value range is from
   0 to 14 dBm.
*/
int8_t BSP_SX1272_setPower(uint8_t pow)
{
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	0002      	movs	r2, r0
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	701a      	strb	r2, [r3, #0]
  uint8_t st0;
  int8_t state = 2;
 800243c:	230f      	movs	r3, #15
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	2202      	movs	r2, #2
 8002442:	701a      	strb	r2, [r3, #0]
  uint8_t value = 0x00;
 8002444:	230e      	movs	r3, #14
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'setPower'\r\n");
  #endif

  st0 = BSP_SX1272_Read(REG_OP_MODE);	  // Save the previous status
 800244c:	230d      	movs	r3, #13
 800244e:	18fc      	adds	r4, r7, r3
 8002450:	2001      	movs	r0, #1
 8002452:	f002 f9f3 	bl	800483c <BSP_SX1272_Read>
 8002456:	0003      	movs	r3, r0
 8002458:	7023      	strb	r3, [r4, #0]
  if( currentstate._modem == LORA )
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <BSP_SX1272_setPower+0xb8>)
 800245c:	7f1b      	ldrb	r3, [r3, #28]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d104      	bne.n	800246c <BSP_SX1272_setPower+0x3c>
  { // LoRa Stdby mode to write in registers
	  BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 8002462:	2181      	movs	r1, #129	; 0x81
 8002464:	2001      	movs	r0, #1
 8002466:	f002 fa19 	bl	800489c <BSP_SX1272_Write>
 800246a:	e003      	b.n	8002474 <BSP_SX1272_setPower+0x44>
  }
  else
  { // FSK Stdby mode to write in registers
	  BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 800246c:	2101      	movs	r1, #1
 800246e:	2001      	movs	r0, #1
 8002470:	f002 fa14 	bl	800489c <BSP_SX1272_Write>
  }

  if ( (pow >= 0) && (pow < 15) )
 8002474:	1dfb      	adds	r3, r7, #7
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b0e      	cmp	r3, #14
 800247a:	d804      	bhi.n	8002486 <BSP_SX1272_setPower+0x56>
  {
	  currentstate._power = pow;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <BSP_SX1272_setPower+0xb8>)
 800247e:	1dfa      	adds	r2, r7, #7
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	721a      	strb	r2, [r3, #8]
 8002484:	e003      	b.n	800248e <BSP_SX1272_setPower+0x5e>
  }
  else
  {
	  state = -1;
 8002486:	230f      	movs	r3, #15
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	22ff      	movs	r2, #255	; 0xff
 800248c:	701a      	strb	r2, [r3, #0]
		  my_printf("## Power value is not valid ##\r\n");
		  my_printf("\r\n");
	  #endif
  }

  BSP_SX1272_Write(REG_PA_CONFIG, currentstate._power);	// Setting output power value
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <BSP_SX1272_setPower+0xb8>)
 8002490:	7a1b      	ldrb	r3, [r3, #8]
 8002492:	0019      	movs	r1, r3
 8002494:	2009      	movs	r0, #9
 8002496:	f002 fa01 	bl	800489c <BSP_SX1272_Write>
  value = BSP_SX1272_Read(REG_PA_CONFIG);
 800249a:	230e      	movs	r3, #14
 800249c:	18fc      	adds	r4, r7, r3
 800249e:	2009      	movs	r0, #9
 80024a0:	f002 f9cc 	bl	800483c <BSP_SX1272_Read>
 80024a4:	0003      	movs	r3, r0
 80024a6:	7023      	strb	r3, [r4, #0]

  if( value == currentstate._power )
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <BSP_SX1272_setPower+0xb8>)
 80024aa:	7a1b      	ldrb	r3, [r3, #8]
 80024ac:	220e      	movs	r2, #14
 80024ae:	18ba      	adds	r2, r7, r2
 80024b0:	7812      	ldrb	r2, [r2, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d104      	bne.n	80024c0 <BSP_SX1272_setPower+0x90>
  {
	  state = 0;
 80024b6:	230f      	movs	r3, #15
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e003      	b.n	80024c8 <BSP_SX1272_setPower+0x98>
		  my_printf("\r\n");
	  #endif
  }
  else
  {
	  state = 1;
 80024c0:	230f      	movs	r3, #15
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
  }

  BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 80024c8:	230d      	movs	r3, #13
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	0019      	movs	r1, r3
 80024d0:	2001      	movs	r0, #1
 80024d2:	f002 f9e3 	bl	800489c <BSP_SX1272_Write>
  return state;
 80024d6:	230f      	movs	r3, #15
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b25b      	sxtb	r3, r3
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b005      	add	sp, #20
 80024e4:	bd90      	pop	{r4, r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	200000d4 	.word	0x200000d4

080024ec <BSP_SX1272_getPreambleLength>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getPreambleLength()
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
	int8_t state = 2;
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'getPreambleLength'\r\n");
	#endif

	state = 1;
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
	if( currentstate._modem == LORA )
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <BSP_SX1272_getPreambleLength+0x9c>)
 8002500:	7f1b      	ldrb	r3, [r3, #28]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d11b      	bne.n	800253e <BSP_SX1272_getPreambleLength+0x52>
  	{ // LORA mode
  		p_length = BSP_SX1272_Read(REG_PREAMBLE_MSB_LORA);
 8002506:	1dbc      	adds	r4, r7, #6
 8002508:	2020      	movs	r0, #32
 800250a:	f002 f997 	bl	800483c <BSP_SX1272_Read>
 800250e:	0003      	movs	r3, r0
 8002510:	7023      	strb	r3, [r4, #0]
  		// Saving MSB preamble length in LoRa mode
		currentstate._preamblelength = (p_length << 8) & 0xFFFF;
 8002512:	1dbb      	adds	r3, r7, #6
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	b29a      	uxth	r2, r3
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <BSP_SX1272_getPreambleLength+0x9c>)
 800251c:	81da      	strh	r2, [r3, #14]
		p_length = BSP_SX1272_Read(REG_PREAMBLE_LSB_LORA);
 800251e:	1dbc      	adds	r4, r7, #6
 8002520:	2021      	movs	r0, #33	; 0x21
 8002522:	f002 f98b 	bl	800483c <BSP_SX1272_Read>
 8002526:	0003      	movs	r3, r0
 8002528:	7023      	strb	r3, [r4, #0]
  		// Saving LSB preamble length in LoRa mode
		currentstate._preamblelength = currentstate._preamblelength + (p_length & 0xFFFF);
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <BSP_SX1272_getPreambleLength+0x9c>)
 800252c:	89da      	ldrh	r2, [r3, #14]
 800252e:	1dbb      	adds	r3, r7, #6
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	18d3      	adds	r3, r2, r3
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <BSP_SX1272_getPreambleLength+0x9c>)
 800253a:	81da      	strh	r2, [r3, #14]
 800253c:	e01a      	b.n	8002574 <BSP_SX1272_getPreambleLength+0x88>
			my_printf("\r\n");
		#endif
	}
	else
	{ // FSK mode
		p_length = BSP_SX1272_Read(REG_PREAMBLE_MSB_FSK);
 800253e:	1dbc      	adds	r4, r7, #6
 8002540:	2025      	movs	r0, #37	; 0x25
 8002542:	f002 f97b 	bl	800483c <BSP_SX1272_Read>
 8002546:	0003      	movs	r3, r0
 8002548:	7023      	strb	r3, [r4, #0]
		// Saving MSB preamble length in FSK mode
		currentstate._preamblelength = (p_length << 8) & 0xFFFF;
 800254a:	1dbb      	adds	r3, r7, #6
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <BSP_SX1272_getPreambleLength+0x9c>)
 8002554:	81da      	strh	r2, [r3, #14]
		p_length = BSP_SX1272_Read(REG_PREAMBLE_LSB_FSK);
 8002556:	1dbc      	adds	r4, r7, #6
 8002558:	2026      	movs	r0, #38	; 0x26
 800255a:	f002 f96f 	bl	800483c <BSP_SX1272_Read>
 800255e:	0003      	movs	r3, r0
 8002560:	7023      	strb	r3, [r4, #0]
		// Saving LSB preamble length in FSK mode
		currentstate._preamblelength = currentstate._preamblelength + (p_length & 0xFFFF);
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <BSP_SX1272_getPreambleLength+0x9c>)
 8002564:	89da      	ldrh	r2, [r3, #14]
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b29b      	uxth	r3, r3
 800256c:	18d3      	adds	r3, r2, r3
 800256e:	b29a      	uxth	r2, r3
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <BSP_SX1272_getPreambleLength+0x9c>)
 8002572:	81da      	strh	r2, [r3, #14]
			my_printf("%d",currentstate._preamblelength);
			my_printf(" ##");
			my_printf("\r\n");
		#endif
	}
	state = 0;
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
	return state;
 800257a:	1dfb      	adds	r3, r7, #7
 800257c:	781b      	ldrb	r3, [r3, #0]
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b003      	add	sp, #12
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	200000d4 	.word	0x200000d4

0800258c <BSP_SX1272_setPreambleLength>:
   state = 0  --> The command has been executed with no errors
 Parameters:
   l: length value to set as preamble length.
*/
uint8_t BSP_SX1272_setPreambleLength(uint16_t l)
{
 800258c:	b590      	push	{r4, r7, lr}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	0002      	movs	r2, r0
 8002594:	1dbb      	adds	r3, r7, #6
 8002596:	801a      	strh	r2, [r3, #0]
	uint8_t st0;
	uint8_t p_length;
	int8_t state = 2;
 8002598:	230f      	movs	r3, #15
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setPreambleLength'\r\n");
	#endif

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 80025a0:	230e      	movs	r3, #14
 80025a2:	18fc      	adds	r4, r7, r3
 80025a4:	2001      	movs	r0, #1
 80025a6:	f002 f949 	bl	800483c <BSP_SX1272_Read>
 80025aa:	0003      	movs	r3, r0
 80025ac:	7023      	strb	r3, [r4, #0]
	state = 1;
 80025ae:	230f      	movs	r3, #15
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
	if( currentstate._modem == LORA )
 80025b6:	4b29      	ldr	r3, [pc, #164]	; (800265c <BSP_SX1272_setPreambleLength+0xd0>)
 80025b8:	7f1b      	ldrb	r3, [r3, #28]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d11e      	bne.n	80025fc <BSP_SX1272_setPreambleLength+0x70>
  	{ // LoRa mode
  		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);    // Set Standby mode to write in registers
 80025be:	2181      	movs	r1, #129	; 0x81
 80025c0:	2001      	movs	r0, #1
 80025c2:	f002 f96b 	bl	800489c <BSP_SX1272_Write>
  		p_length = ((l >> 8) & 0x0FF);
 80025c6:	1dbb      	adds	r3, r7, #6
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	230d      	movs	r3, #13
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	701a      	strb	r2, [r3, #0]
  		// Storing MSB preamble length in LoRa mode
		BSP_SX1272_Write(REG_PREAMBLE_MSB_LORA, p_length);
 80025d4:	230d      	movs	r3, #13
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	0019      	movs	r1, r3
 80025dc:	2020      	movs	r0, #32
 80025de:	f002 f95d 	bl	800489c <BSP_SX1272_Write>
		p_length = (l & 0x0FF);
 80025e2:	230d      	movs	r3, #13
 80025e4:	18fb      	adds	r3, r7, r3
 80025e6:	1dba      	adds	r2, r7, #6
 80025e8:	8812      	ldrh	r2, [r2, #0]
 80025ea:	701a      	strb	r2, [r3, #0]
		// Storing LSB preamble length in LoRa mode
		BSP_SX1272_Write(REG_PREAMBLE_LSB_LORA, p_length);
 80025ec:	230d      	movs	r3, #13
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	0019      	movs	r1, r3
 80025f4:	2021      	movs	r0, #33	; 0x21
 80025f6:	f002 f951 	bl	800489c <BSP_SX1272_Write>
 80025fa:	e01d      	b.n	8002638 <BSP_SX1272_setPreambleLength+0xac>
	}
	else
	{ // FSK mode
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);    // Set Standby mode to write in registers
 80025fc:	2101      	movs	r1, #1
 80025fe:	2001      	movs	r0, #1
 8002600:	f002 f94c 	bl	800489c <BSP_SX1272_Write>
		p_length = ((l >> 8) & 0x0FF);
 8002604:	1dbb      	adds	r3, r7, #6
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	b29a      	uxth	r2, r3
 800260c:	230d      	movs	r3, #13
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	701a      	strb	r2, [r3, #0]
  		// Storing MSB preamble length in FSK mode
		BSP_SX1272_Write(REG_PREAMBLE_MSB_FSK, p_length);
 8002612:	230d      	movs	r3, #13
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	0019      	movs	r1, r3
 800261a:	2025      	movs	r0, #37	; 0x25
 800261c:	f002 f93e 	bl	800489c <BSP_SX1272_Write>
		p_length = (l & 0x0FF);
 8002620:	230d      	movs	r3, #13
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	1dba      	adds	r2, r7, #6
 8002626:	8812      	ldrh	r2, [r2, #0]
 8002628:	701a      	strb	r2, [r3, #0]
  		// Storing LSB preamble length in FSK mode
		BSP_SX1272_Write(REG_PREAMBLE_LSB_FSK, p_length);
 800262a:	230d      	movs	r3, #13
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	0019      	movs	r1, r3
 8002632:	2026      	movs	r0, #38	; 0x26
 8002634:	f002 f932 	bl	800489c <BSP_SX1272_Write>
	}

	state = 0;
 8002638:	230f      	movs	r3, #15
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
		my_printf("%d",l);
		my_printf(" has been successfully set ##\r\n");
		my_printf("\r\n");
	#endif

	BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 8002640:	230e      	movs	r3, #14
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	0019      	movs	r1, r3
 8002648:	2001      	movs	r0, #1
 800264a:	f002 f927 	bl	800489c <BSP_SX1272_Write>
	return state;
 800264e:	230f      	movs	r3, #15
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	781b      	ldrb	r3, [r3, #0]
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b005      	add	sp, #20
 800265a:	bd90      	pop	{r4, r7, pc}
 800265c:	200000d4 	.word	0x200000d4

08002660 <BSP_SX1272_getPayloadLength>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getPayloadLength()
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	2202      	movs	r2, #2
 800266a:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'getPayloadLength'\r\n");
	#endif

	if( currentstate._modem == LORA )
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <BSP_SX1272_getPayloadLength+0x50>)
 800266e:	7f1b      	ldrb	r3, [r3, #28]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10a      	bne.n	800268a <BSP_SX1272_getPayloadLength+0x2a>
  	{ // LORA mode
  		// Saving payload length in LoRa mode
		currentstate._payloadlength = BSP_SX1272_Read(REG_PAYLOAD_LENGTH_LORA);
 8002674:	2022      	movs	r0, #34	; 0x22
 8002676:	f002 f8e1 	bl	800483c <BSP_SX1272_Read>
 800267a:	0003      	movs	r3, r0
 800267c:	b29a      	uxth	r2, r3
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <BSP_SX1272_getPayloadLength+0x50>)
 8002680:	821a      	strh	r2, [r3, #16]
		state = 1;
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e009      	b.n	800269e <BSP_SX1272_getPayloadLength+0x3e>
	}
	else
	{ // FSK mode
  		// Saving payload length in FSK mode
		currentstate._payloadlength = BSP_SX1272_Read(REG_PAYLOAD_LENGTH_FSK);
 800268a:	2032      	movs	r0, #50	; 0x32
 800268c:	f002 f8d6 	bl	800483c <BSP_SX1272_Read>
 8002690:	0003      	movs	r3, r0
 8002692:	b29a      	uxth	r2, r3
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <BSP_SX1272_getPayloadLength+0x50>)
 8002696:	821a      	strh	r2, [r3, #16]
		state = 1;
 8002698:	1dfb      	adds	r3, r7, #7
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
		my_printf("%d",currentstate._payloadlength);
		my_printf(" ##\r\n");
		my_printf("\r\n");
	#endif

	state = 0;
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
	return state;
 80026a4:	1dfb      	adds	r3, r7, #7
 80026a6:	781b      	ldrb	r3, [r3, #0]
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b002      	add	sp, #8
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200000d4 	.word	0x200000d4

080026b4 <BSP_SX1272_setPacketLength>:
   state = -1 --> Forbidden command for this protocol
 Parameters:
   l: length value to set as payload length.
*/
int8_t BSP_SX1272_setPacketLength(uint8_t l)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	0002      	movs	r2, r0
 80026bc:	1dfb      	adds	r3, r7, #7
 80026be:	701a      	strb	r2, [r3, #0]
	uint8_t st0;
	uint8_t value = 0x00;
 80026c0:	230f      	movs	r3, #15
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
	int8_t state = 2;
 80026c8:	230e      	movs	r3, #14
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2202      	movs	r2, #2
 80026ce:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setPacketLength'\r\n");
	#endif

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 80026d0:	230d      	movs	r3, #13
 80026d2:	18fc      	adds	r4, r7, r3
 80026d4:	2001      	movs	r0, #1
 80026d6:	f002 f8b1 	bl	800483c <BSP_SX1272_Read>
 80026da:	0003      	movs	r3, r0
 80026dc:	7023      	strb	r3, [r4, #0]
	//----
	//	truncPayload(l);
	currentstate.packet_sent.length = l;
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <BSP_SX1272_setPacketLength+0xc8>)
 80026e0:	1dfa      	adds	r2, r7, #7
 80026e2:	2120      	movs	r1, #32
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	545a      	strb	r2, [r3, r1]
	//
	if( currentstate._modem == LORA )
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <BSP_SX1272_setPacketLength+0xc8>)
 80026ea:	7f1b      	ldrb	r3, [r3, #28]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d112      	bne.n	8002716 <BSP_SX1272_setPacketLength+0x62>
  	{ // LORA mode
  		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);    // Set LoRa Standby mode to write in registers
 80026f0:	2181      	movs	r1, #129	; 0x81
 80026f2:	2001      	movs	r0, #1
 80026f4:	f002 f8d2 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_PAYLOAD_LENGTH_LORA, currentstate.packet_sent.length);
 80026f8:	4b20      	ldr	r3, [pc, #128]	; (800277c <BSP_SX1272_setPacketLength+0xc8>)
 80026fa:	2220      	movs	r2, #32
 80026fc:	5c9b      	ldrb	r3, [r3, r2]
 80026fe:	0019      	movs	r1, r3
 8002700:	2022      	movs	r0, #34	; 0x22
 8002702:	f002 f8cb 	bl	800489c <BSP_SX1272_Write>
		// Storing payload length in LoRa mode
		value = BSP_SX1272_Read(REG_PAYLOAD_LENGTH_LORA);
 8002706:	230f      	movs	r3, #15
 8002708:	18fc      	adds	r4, r7, r3
 800270a:	2022      	movs	r0, #34	; 0x22
 800270c:	f002 f896 	bl	800483c <BSP_SX1272_Read>
 8002710:	0003      	movs	r3, r0
 8002712:	7023      	strb	r3, [r4, #0]
 8002714:	e011      	b.n	800273a <BSP_SX1272_setPacketLength+0x86>
	}
	else
	{ // FSK mode
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);    //  Set FSK Standby mode to write in registers
 8002716:	2101      	movs	r1, #1
 8002718:	2001      	movs	r0, #1
 800271a:	f002 f8bf 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_PAYLOAD_LENGTH_FSK, currentstate.packet_sent.length);
 800271e:	4b17      	ldr	r3, [pc, #92]	; (800277c <BSP_SX1272_setPacketLength+0xc8>)
 8002720:	2220      	movs	r2, #32
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	0019      	movs	r1, r3
 8002726:	2032      	movs	r0, #50	; 0x32
 8002728:	f002 f8b8 	bl	800489c <BSP_SX1272_Write>
		// Storing payload length in FSK mode
		value = BSP_SX1272_Read(REG_PAYLOAD_LENGTH_FSK);
 800272c:	230f      	movs	r3, #15
 800272e:	18fc      	adds	r4, r7, r3
 8002730:	2032      	movs	r0, #50	; 0x32
 8002732:	f002 f883 	bl	800483c <BSP_SX1272_Read>
 8002736:	0003      	movs	r3, r0
 8002738:	7023      	strb	r3, [r4, #0]
	}

	if( currentstate.packet_sent.length == value )
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <BSP_SX1272_setPacketLength+0xc8>)
 800273c:	2220      	movs	r2, #32
 800273e:	5c9b      	ldrb	r3, [r3, r2]
 8002740:	220f      	movs	r2, #15
 8002742:	18ba      	adds	r2, r7, r2
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d104      	bne.n	8002754 <BSP_SX1272_setPacketLength+0xa0>
	{
		state = 0;
 800274a:	230e      	movs	r3, #14
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	e003      	b.n	800275c <BSP_SX1272_setPacketLength+0xa8>
			my_printf("\r\n");
		#endif
	}
	else
	{
		state = 1;
 8002754:	230e      	movs	r3, #14
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
	}

	BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 800275c:	230d      	movs	r3, #13
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	0019      	movs	r1, r3
 8002764:	2001      	movs	r0, #1
 8002766:	f002 f899 	bl	800489c <BSP_SX1272_Write>
  	//BSP_DELAY_ms(250);
	return state;
 800276a:	230e      	movs	r3, #14
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	b25b      	sxtb	r3, r3
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	b005      	add	sp, #20
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	200000d4 	.word	0x200000d4

08002780 <BSP_SX1272_getNodeAddress>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getNodeAddress()
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
	uint8_t st0 = 0;
 8002786:	1dbb      	adds	r3, r7, #6
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
	uint8_t state = 2;
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	2202      	movs	r2, #2
 8002790:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'getNodeAddress'\r\n");
	#endif

	if( currentstate._modem == LORA )
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <BSP_SX1272_getNodeAddress+0x64>)
 8002794:	7f1b      	ldrb	r3, [r3, #28]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d103      	bne.n	80027a2 <BSP_SX1272_getNodeAddress+0x22>
	{
		// Nothing to read
		// node address is stored in currentstate._nodeAddress attribute
		state = 0;
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e019      	b.n	80027d6 <BSP_SX1272_getNodeAddress+0x56>
	}
	else
	{
		// FSK mode
		st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 80027a2:	1dbc      	adds	r4, r7, #6
 80027a4:	2001      	movs	r0, #1
 80027a6:	f002 f849 	bl	800483c <BSP_SX1272_Read>
 80027aa:	0003      	movs	r3, r0
 80027ac:	7023      	strb	r3, [r4, #0]

		// Allowing access to FSK registers while in LoRa standby mode
		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_FSK_REGS_MODE);
 80027ae:	21c1      	movs	r1, #193	; 0xc1
 80027b0:	2001      	movs	r0, #1
 80027b2:	f002 f873 	bl	800489c <BSP_SX1272_Write>

		// Read node address
		currentstate._nodeAddress = BSP_SX1272_Read(REG_NODE_ADRS);
 80027b6:	2033      	movs	r0, #51	; 0x33
 80027b8:	f002 f840 	bl	800483c <BSP_SX1272_Read>
 80027bc:	0003      	movs	r3, r0
 80027be:	001a      	movs	r2, r3
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <BSP_SX1272_getNodeAddress+0x64>)
 80027c2:	749a      	strb	r2, [r3, #18]

		// Getting back to previous status
		BSP_SX1272_Write(REG_OP_MODE, st0);
 80027c4:	1dbb      	adds	r3, r7, #6
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	0019      	movs	r1, r3
 80027ca:	2001      	movs	r0, #1
 80027cc:	f002 f866 	bl	800489c <BSP_SX1272_Write>

		// update state
		state = 0;
 80027d0:	1dfb      	adds	r3, r7, #7
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
		my_printf("## Node address configured is ");
		my_printf("%d",currentstate._nodeAddress);
		my_printf(" ##\r\n");
		my_printf("\r\n");
	#endif
	return state;
 80027d6:	1dfb      	adds	r3, r7, #7
 80027d8:	781b      	ldrb	r3, [r3, #0]
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b003      	add	sp, #12
 80027e0:	bd90      	pop	{r4, r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	200000d4 	.word	0x200000d4

080027e8 <BSP_SX1272_setNodeAddress>:
   state = -1 --> Forbidden command for this protocol
 Parameters:
   addr: address value to set as node address.
*/
int8_t BSP_SX1272_setNodeAddress(uint8_t addr)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	0002      	movs	r2, r0
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	701a      	strb	r2, [r3, #0]
	uint8_t st0;
	uint8_t value;
	uint8_t state = 2;
 80027f4:	230f      	movs	r3, #15
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	2202      	movs	r2, #2
 80027fa:	701a      	strb	r2, [r3, #0]
		#endif
	}
	else
	{
		// Saving node address
		currentstate._nodeAddress = addr;
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <BSP_SX1272_setNodeAddress+0xb4>)
 80027fe:	1dfa      	adds	r2, r7, #7
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	749a      	strb	r2, [r3, #18]
		st0 = BSP_SX1272_Read(REG_OP_MODE);	  // Save the previous status
 8002804:	230e      	movs	r3, #14
 8002806:	18fc      	adds	r4, r7, r3
 8002808:	2001      	movs	r0, #1
 800280a:	f002 f817 	bl	800483c <BSP_SX1272_Read>
 800280e:	0003      	movs	r3, r0
 8002810:	7023      	strb	r3, [r4, #0]

		// in LoRa mode
		state = 0;
 8002812:	230f      	movs	r3, #15
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]

		if( currentstate._modem == LORA )
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <BSP_SX1272_setNodeAddress+0xb4>)
 800281c:	7f1b      	ldrb	r3, [r3, #28]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d104      	bne.n	800282c <BSP_SX1272_setNodeAddress+0x44>
		{
			// in LoRa mode, address is SW controlled
			// set status to success
			state = 0;
 8002822:	230f      	movs	r3, #15
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e02f      	b.n	800288c <BSP_SX1272_setNodeAddress+0xa4>
		}
		else if( currentstate._modem == FSK )
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <BSP_SX1272_setNodeAddress+0xb4>)
 800282e:	7f1b      	ldrb	r3, [r3, #28]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d12b      	bne.n	800288c <BSP_SX1272_setNodeAddress+0xa4>
		{
			//Set FSK Standby mode to write in registers
			BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 8002834:	2101      	movs	r1, #1
 8002836:	2001      	movs	r0, #1
 8002838:	f002 f830 	bl	800489c <BSP_SX1272_Write>

			// Storing node and broadcast address
			BSP_SX1272_Write(REG_NODE_ADRS, addr);
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	0019      	movs	r1, r3
 8002842:	2033      	movs	r0, #51	; 0x33
 8002844:	f002 f82a 	bl	800489c <BSP_SX1272_Write>
			BSP_SX1272_Write(REG_BROADCAST_ADRS, BROADCAST_0);
 8002848:	2100      	movs	r1, #0
 800284a:	2034      	movs	r0, #52	; 0x34
 800284c:	f002 f826 	bl	800489c <BSP_SX1272_Write>

			value = BSP_SX1272_Read(REG_NODE_ADRS);
 8002850:	230d      	movs	r3, #13
 8002852:	18fc      	adds	r4, r7, r3
 8002854:	2033      	movs	r0, #51	; 0x33
 8002856:	f001 fff1 	bl	800483c <BSP_SX1272_Read>
 800285a:	0003      	movs	r3, r0
 800285c:	7023      	strb	r3, [r4, #0]
			BSP_SX1272_Write(REG_OP_MODE, st0);		// Getting back to previous status
 800285e:	230e      	movs	r3, #14
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	0019      	movs	r1, r3
 8002866:	2001      	movs	r0, #1
 8002868:	f002 f818 	bl	800489c <BSP_SX1272_Write>

			if( value == currentstate._nodeAddress )
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <BSP_SX1272_setNodeAddress+0xb4>)
 800286e:	7c9b      	ldrb	r3, [r3, #18]
 8002870:	220d      	movs	r2, #13
 8002872:	18ba      	adds	r2, r7, r2
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d104      	bne.n	8002884 <BSP_SX1272_setNodeAddress+0x9c>
			{
				state = 0;
 800287a:	230f      	movs	r3, #15
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e003      	b.n	800288c <BSP_SX1272_setNodeAddress+0xa4>
					my_printf("\r\n");
				#endif
			}
			else
			{
				state = 1;
 8002884:	230f      	movs	r3, #15
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
					my_printf("\r\n");
				#endif
			}
		}
	}
	return state;
 800288c:	230f      	movs	r3, #15
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b25b      	sxtb	r3, r3
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b005      	add	sp, #20
 800289a:	bd90      	pop	{r4, r7, pc}
 800289c:	200000d4 	.word	0x200000d4

080028a0 <BSP_SX1272_getSNR>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int8_t BSP_SX1272_getSNR()
{	// getSNR exists only in LoRa mode
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
  int8_t state = 2;
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	2202      	movs	r2, #2
 80028aa:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'getSNR'\r\n");
  #endif

  if( currentstate._modem == LORA )
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <BSP_SX1272_getSNR+0x7c>)
 80028ae:	7f1b      	ldrb	r3, [r3, #28]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d129      	bne.n	8002908 <BSP_SX1272_getSNR+0x68>
  { // LoRa mode
	  state = 1;
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
	  value = BSP_SX1272_Read(REG_PKT_SNR_VALUE);
 80028ba:	1dbc      	adds	r4, r7, #6
 80028bc:	2019      	movs	r0, #25
 80028be:	f001 ffbd 	bl	800483c <BSP_SX1272_Read>
 80028c2:	0003      	movs	r3, r0
 80028c4:	7023      	strb	r3, [r4, #0]
	  if( value & 0x80 ) // The SNR sign bit is 1
 80028c6:	1dbb      	adds	r3, r7, #6
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b25b      	sxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da10      	bge.n	80028f2 <BSP_SX1272_getSNR+0x52>
	  {
		  // Invert and divide by 4
		  value = ( ( ~value + 1 ) & 0xFF ) >> 2;
 80028d0:	1dbb      	adds	r3, r7, #6
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	425b      	negs	r3, r3
 80028d6:	109b      	asrs	r3, r3, #2
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	1dbb      	adds	r3, r7, #6
 80028dc:	213f      	movs	r1, #63	; 0x3f
 80028de:	400a      	ands	r2, r1
 80028e0:	701a      	strb	r2, [r3, #0]
          currentstate._SNR = -value;
 80028e2:	1dbb      	adds	r3, r7, #6
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	425b      	negs	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	b25a      	sxtb	r2, r3
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <BSP_SX1272_getSNR+0x7c>)
 80028ee:	725a      	strb	r2, [r3, #9]
 80028f0:	e006      	b.n	8002900 <BSP_SX1272_getSNR+0x60>
      }
      else
      {
		  // Divide by 4
		  currentstate._SNR = ( value & 0xFF ) >> 2;
 80028f2:	1dbb      	adds	r3, r7, #6
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	b25a      	sxtb	r2, r3
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <BSP_SX1272_getSNR+0x7c>)
 80028fe:	725a      	strb	r2, [r3, #9]
	  }
	  state = 0;
 8002900:	1dfb      	adds	r3, r7, #7
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e002      	b.n	800290e <BSP_SX1272_getSNR+0x6e>
		  my_printf("\r\n");
	  #endif
  }
  else
  { // forbidden command if FSK mode
	state = -1;
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	22ff      	movs	r2, #255	; 0xff
 800290c:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 0)
		my_printf("** SNR does not exist in FSK mode **\r\n");
		my_printf("\r\n");
	#endif
  }
  return state;
 800290e:	1dfb      	adds	r3, r7, #7
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b25b      	sxtb	r3, r3
}
 8002914:	0018      	movs	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	b003      	add	sp, #12
 800291a:	bd90      	pop	{r4, r7, pc}
 800291c:	200000d4 	.word	0x200000d4

08002920 <BSP_SX1272_getRSSI>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getRSSI()
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 8002926:	2317      	movs	r3, #23
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2202      	movs	r2, #2
 800292c:	701a      	strb	r2, [r3, #0]
	int rssi_mean = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
	int total = 5;
 8002932:	2305      	movs	r3, #5
 8002934:	607b      	str	r3, [r7, #4]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'getRSSI'\r\n");
	#endif

	if( currentstate._modem == LORA )
 8002936:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <BSP_SX1272_getRSSI+0xd4>)
 8002938:	7f1b      	ldrb	r3, [r3, #28]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d128      	bne.n	8002990 <BSP_SX1272_getRSSI+0x70>
	{
		/// LoRa mode
		// get mean value of RSSI
		for(int i = 0; i < total; i++)
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e012      	b.n	800296a <BSP_SX1272_getRSSI+0x4a>
		{
			currentstate._RSSI = -OFFSET_RSSI + BSP_SX1272_Read(REG_RSSI_VALUE_LORA);
 8002944:	201b      	movs	r0, #27
 8002946:	f001 ff79 	bl	800483c <BSP_SX1272_Read>
 800294a:	0003      	movs	r3, r0
 800294c:	3377      	adds	r3, #119	; 0x77
 800294e:	b2db      	uxtb	r3, r3
 8002950:	b25a      	sxtb	r2, r3
 8002952:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <BSP_SX1272_getRSSI+0xd4>)
 8002954:	729a      	strb	r2, [r3, #10]
			rssi_mean += currentstate._RSSI;
 8002956:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <BSP_SX1272_getRSSI+0xd4>)
 8002958:	7a9b      	ldrb	r3, [r3, #10]
 800295a:	b25b      	sxtb	r3, r3
 800295c:	001a      	movs	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	189b      	adds	r3, r3, r2
 8002962:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < total; i++)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3301      	adds	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	429a      	cmp	r2, r3
 8002970:	dbe8      	blt.n	8002944 <BSP_SX1272_getRSSI+0x24>
		}
		rssi_mean = rssi_mean / total;
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	6938      	ldr	r0, [r7, #16]
 8002976:	f002 f971 	bl	8004c5c <__divsi3>
 800297a:	0003      	movs	r3, r0
 800297c:	613b      	str	r3, [r7, #16]
		currentstate._RSSI = rssi_mean;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	b25a      	sxtb	r2, r3
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <BSP_SX1272_getRSSI+0xd4>)
 8002984:	729a      	strb	r2, [r3, #10]

		state = 0;
 8002986:	2317      	movs	r3, #23
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e029      	b.n	80029e4 <BSP_SX1272_getRSSI+0xc4>
	}
	else
	{
		/// FSK mode
		// get mean value of RSSI
		for(int i = 0; i < total; i++)
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	e014      	b.n	80029c0 <BSP_SX1272_getRSSI+0xa0>
		{
			currentstate._RSSI = -(BSP_SX1272_Read(REG_RSSI_VALUE_FSK) >> 1);
 8002996:	2011      	movs	r0, #17
 8002998:	f001 ff50 	bl	800483c <BSP_SX1272_Read>
 800299c:	0003      	movs	r3, r0
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	425b      	negs	r3, r3
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	b25a      	sxtb	r2, r3
 80029a8:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <BSP_SX1272_getRSSI+0xd4>)
 80029aa:	729a      	strb	r2, [r3, #10]
			rssi_mean += currentstate._RSSI;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <BSP_SX1272_getRSSI+0xd4>)
 80029ae:	7a9b      	ldrb	r3, [r3, #10]
 80029b0:	b25b      	sxtb	r3, r3
 80029b2:	001a      	movs	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < total; i++)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3301      	adds	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	dbe6      	blt.n	8002996 <BSP_SX1272_getRSSI+0x76>
		}
		rssi_mean = rssi_mean / total;
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	6938      	ldr	r0, [r7, #16]
 80029cc:	f002 f946 	bl	8004c5c <__divsi3>
 80029d0:	0003      	movs	r3, r0
 80029d2:	613b      	str	r3, [r7, #16]
		currentstate._RSSI = rssi_mean;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	b25a      	sxtb	r2, r3
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <BSP_SX1272_getRSSI+0xd4>)
 80029da:	729a      	strb	r2, [r3, #10]

		state = 0;
 80029dc:	2317      	movs	r3, #23
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
			my_printf(" ##\r\n");
			my_printf("\r\n");
		#endif
	}

	return state;
 80029e4:	2317      	movs	r3, #23
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b006      	add	sp, #24
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	200000d4 	.word	0x200000d4

080029f8 <BSP_SX1272_getRSSIpacket>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 --> Forbidden command for this protocol
*/
int16_t BSP_SX1272_getRSSIpacket()
{	// RSSIpacket only exists in LoRa
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
  int8_t state = 2;
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	2202      	movs	r2, #2
 8002a02:	701a      	strb	r2, [r3, #0]
  #if (SX1272_debug_mode > 1)
	  my_printf("\r\n");
	  my_printf("Starting 'getRSSIpacket'\r\n");
  #endif

  state = 1;
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
  if( currentstate._modem == LORA )
 8002a0a:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <BSP_SX1272_getRSSIpacket+0x100>)
 8002a0c:	7f1b      	ldrb	r3, [r3, #28]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d166      	bne.n	8002ae0 <BSP_SX1272_getRSSIpacket+0xe8>
  { // LoRa mode
	  state = BSP_SX1272_getSNR();
 8002a12:	1dfc      	adds	r4, r7, #7
 8002a14:	f7ff ff44 	bl	80028a0 <BSP_SX1272_getSNR>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	7023      	strb	r3, [r4, #0]
	  if( state == 0 )
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b25b      	sxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d15f      	bne.n	8002ae6 <BSP_SX1272_getRSSIpacket+0xee>
	  {
		  if( currentstate._SNR < 0 )
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <BSP_SX1272_getRSSIpacket+0x100>)
 8002a28:	7a5b      	ldrb	r3, [r3, #9]
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da38      	bge.n	8002aa2 <BSP_SX1272_getRSSIpacket+0xaa>
		  {
			  currentstate._RSSIpacket = -NOISE_ABSOLUTE_ZERO + 10.0 * SignalBwLog[currentstate._bandwidth] + NOISE_FIGURE + ( double )currentstate._SNR;
 8002a30:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <BSP_SX1272_getRSSIpacket+0x100>)
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	4a31      	ldr	r2, [pc, #196]	; (8002afc <BSP_SX1272_getRSSIpacket+0x104>)
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	18d3      	adds	r3, r2, r3
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <BSP_SX1272_getRSSIpacket+0x108>)
 8002a42:	f003 ffbf 	bl	80069c4 <__aeabi_dmul>
 8002a46:	0003      	movs	r3, r0
 8002a48:	000c      	movs	r4, r1
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	0021      	movs	r1, r4
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <BSP_SX1272_getRSSIpacket+0x10c>)
 8002a52:	f004 fa37 	bl	8006ec4 <__aeabi_dsub>
 8002a56:	0003      	movs	r3, r0
 8002a58:	000c      	movs	r4, r1
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	0021      	movs	r1, r4
 8002a5e:	2200      	movs	r2, #0
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <BSP_SX1272_getRSSIpacket+0x110>)
 8002a62:	f003 f86b 	bl	8005b3c <__aeabi_dadd>
 8002a66:	0003      	movs	r3, r0
 8002a68:	000c      	movs	r4, r1
 8002a6a:	0025      	movs	r5, r4
 8002a6c:	001c      	movs	r4, r3
 8002a6e:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <BSP_SX1272_getRSSIpacket+0x100>)
 8002a70:	7a5b      	ldrb	r3, [r3, #9]
 8002a72:	b25b      	sxtb	r3, r3
 8002a74:	0018      	movs	r0, r3
 8002a76:	f004 fd8f 	bl	8007598 <__aeabi_i2d>
 8002a7a:	0002      	movs	r2, r0
 8002a7c:	000b      	movs	r3, r1
 8002a7e:	0020      	movs	r0, r4
 8002a80:	0029      	movs	r1, r5
 8002a82:	f003 f85b 	bl	8005b3c <__aeabi_dadd>
 8002a86:	0003      	movs	r3, r0
 8002a88:	000c      	movs	r4, r1
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	0021      	movs	r1, r4
 8002a8e:	f004 fd4f 	bl	8007530 <__aeabi_d2iz>
 8002a92:	0003      	movs	r3, r0
 8002a94:	b21a      	sxth	r2, r3
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <BSP_SX1272_getRSSIpacket+0x100>)
 8002a98:	819a      	strh	r2, [r3, #12]
			  state = 0;
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e021      	b.n	8002ae6 <BSP_SX1272_getRSSIpacket+0xee>
		  }
		  else
		  {
			  currentstate._RSSIpacket = BSP_SX1272_Read(REG_PKT_RSSI_VALUE);
 8002aa2:	201a      	movs	r0, #26
 8002aa4:	f001 feca 	bl	800483c <BSP_SX1272_Read>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	b21a      	sxth	r2, r3
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <BSP_SX1272_getRSSIpacket+0x100>)
 8002aae:	819a      	strh	r2, [r3, #12]
			  currentstate._RSSIpacket = -OFFSET_RSSI + ( double )currentstate._RSSIpacket;
 8002ab0:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <BSP_SX1272_getRSSIpacket+0x100>)
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f004 fd6e 	bl	8007598 <__aeabi_i2d>
 8002abc:	2200      	movs	r2, #0
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <BSP_SX1272_getRSSIpacket+0x114>)
 8002ac0:	f004 fa00 	bl	8006ec4 <__aeabi_dsub>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	000c      	movs	r4, r1
 8002ac8:	0018      	movs	r0, r3
 8002aca:	0021      	movs	r1, r4
 8002acc:	f004 fd30 	bl	8007530 <__aeabi_d2iz>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	b21a      	sxth	r2, r3
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <BSP_SX1272_getRSSIpacket+0x100>)
 8002ad6:	819a      	strh	r2, [r3, #12]
			  state = 0;
 8002ad8:	1dfb      	adds	r3, r7, #7
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e002      	b.n	8002ae6 <BSP_SX1272_getRSSIpacket+0xee>
	  #endif
	  }
  }
  else
  { // RSSI packet doesn't exist in FSK mode
	state = -1;
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	22ff      	movs	r2, #255	; 0xff
 8002ae4:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 0)
		my_printf("** RSSI packet does not exist in FSK mode **\r\n");
		my_printf("\r\n");
	#endif
  }
  return state;
 8002ae6:	1dfb      	adds	r3, r7, #7
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	b21b      	sxth	r3, r3
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bdb0      	pop	{r4, r5, r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	200000d4 	.word	0x200000d4
 8002afc:	08008fa8 	.word	0x08008fa8
 8002b00:	40240000 	.word	0x40240000
 8002b04:	4065c000 	.word	0x4065c000
 8002b08:	40180000 	.word	0x40180000
 8002b0c:	40612000 	.word	0x40612000

08002b10 <BSP_SX1272_setRetries>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
   state = -1 -->
*/
uint8_t BSP_SX1272_setRetries(uint8_t ret)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	0002      	movs	r2, r0
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	701a      	strb	r2, [r3, #0]
	uint8_t state = 2;
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	2202      	movs	r2, #2
 8002b22:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setRetries'\r\n");
	#endif

	state = 1;
 8002b24:	230f      	movs	r3, #15
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
	if( ret > MAX_RETRIES )
 8002b2c:	1dfb      	adds	r3, r7, #7
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d904      	bls.n	8002b3e <BSP_SX1272_setRetries+0x2e>
	{
		state = -1;
 8002b34:	230f      	movs	r3, #15
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	22ff      	movs	r2, #255	; 0xff
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e007      	b.n	8002b4e <BSP_SX1272_setRetries+0x3e>
			my_printf("\r\n");
		#endif
	}
	else
	{
		currentstate._maxRetries = ret;
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <BSP_SX1272_setRetries+0x4c>)
 8002b40:	1dfa      	adds	r2, r7, #7
 8002b42:	7812      	ldrb	r2, [r2, #0]
 8002b44:	769a      	strb	r2, [r3, #26]
		state = 0;
 8002b46:	230f      	movs	r3, #15
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
			my_printf("%d",currentstate._maxRetries);
			my_printf(" ##\r\n");
			my_printf("\r\n");
		#endif
	}
	return state;
 8002b4e:	230f      	movs	r3, #15
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	781b      	ldrb	r3, [r3, #0]
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200000d4 	.word	0x200000d4

08002b60 <BSP_SX1272_getMaxCurrent>:
   state = 0  --> The command has been executed with no errors
 Parameters:
   rate: value to compute the maximum current supply. Maximum current is 45+5*'rate' [mA]
*/
uint8_t BSP_SX1272_getMaxCurrent()
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
	int8_t state = 2;
 8002b66:	1dbb      	adds	r3, r7, #6
 8002b68:	2202      	movs	r2, #2
 8002b6a:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'getMaxCurrent'\r\n");
	#endif

	state = 1;
 8002b6c:	1dbb      	adds	r3, r7, #6
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
	currentstate._maxCurrent = BSP_SX1272_Read(REG_OCP);
 8002b72:	200b      	movs	r0, #11
 8002b74:	f001 fe62 	bl	800483c <BSP_SX1272_Read>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	001a      	movs	r2, r3
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <BSP_SX1272_getMaxCurrent+0x88>)
 8002b7e:	76da      	strb	r2, [r3, #27]

	// extract only the OcpTrim value from the OCP register
	currentstate._maxCurrent &= 0b00011111;
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <BSP_SX1272_getMaxCurrent+0x88>)
 8002b82:	7edb      	ldrb	r3, [r3, #27]
 8002b84:	221f      	movs	r2, #31
 8002b86:	4013      	ands	r3, r2
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <BSP_SX1272_getMaxCurrent+0x88>)
 8002b8c:	76da      	strb	r2, [r3, #27]

	if( currentstate._maxCurrent <= 15 )
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <BSP_SX1272_getMaxCurrent+0x88>)
 8002b90:	7edb      	ldrb	r3, [r3, #27]
 8002b92:	2b0f      	cmp	r3, #15
 8002b94:	d809      	bhi.n	8002baa <BSP_SX1272_getMaxCurrent+0x4a>
	{
		value = (45 + (5 * currentstate._maxCurrent));
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <BSP_SX1272_getMaxCurrent+0x88>)
 8002b98:	7edb      	ldrb	r3, [r3, #27]
 8002b9a:	1c1a      	adds	r2, r3, #0
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	18d3      	adds	r3, r2, r3
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	1dfb      	adds	r3, r7, #7
 8002ba4:	322d      	adds	r2, #45	; 0x2d
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e011      	b.n	8002bce <BSP_SX1272_getMaxCurrent+0x6e>
	}
	else if( currentstate._maxCurrent <= 27 )
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <BSP_SX1272_getMaxCurrent+0x88>)
 8002bac:	7edb      	ldrb	r3, [r3, #27]
 8002bae:	2b1b      	cmp	r3, #27
 8002bb0:	d80a      	bhi.n	8002bc8 <BSP_SX1272_getMaxCurrent+0x68>
	{
		value = (-30 + (10 * currentstate._maxCurrent));
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <BSP_SX1272_getMaxCurrent+0x88>)
 8002bb4:	7edb      	ldrb	r3, [r3, #27]
 8002bb6:	1c1a      	adds	r2, r3, #0
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	18d3      	adds	r3, r2, r3
 8002bbc:	18db      	adds	r3, r3, r3
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	3a1e      	subs	r2, #30
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e002      	b.n	8002bce <BSP_SX1272_getMaxCurrent+0x6e>
	}
	else
	{
		value = 240;
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	22f0      	movs	r2, #240	; 0xf0
 8002bcc:	701a      	strb	r2, [r3, #0]
	}

	currentstate._maxCurrent = value;
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <BSP_SX1272_getMaxCurrent+0x88>)
 8002bd0:	1dfa      	adds	r2, r7, #7
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	76da      	strb	r2, [r3, #27]
		my_printf("## Maximum current supply configured is ");
		my_printf("%d",value);
		my_printf(" mA ##\r\n");
		my_printf("\r\n");
	#endif
	state = 0;
 8002bd6:	1dbb      	adds	r3, r7, #6
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
	return state;
 8002bdc:	1dbb      	adds	r3, r7, #6
 8002bde:	781b      	ldrb	r3, [r3, #0]
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200000d4 	.word	0x200000d4

08002bec <BSP_SX1272_setMaxCurrent>:
	Imax = 45+5*OcpTrim [mA] 	if OcpTrim <= 15 (120 mA) /
	Imax = -30+10*OcpTrim [mA] 	if 15 < OcpTrim <= 27 (130 to 240 mA)
	Imax = 240mA 				for higher settings
*/
int8_t BSP_SX1272_setMaxCurrent(uint8_t rate)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	1dfb      	adds	r3, r7, #7
 8002bf6:	701a      	strb	r2, [r3, #0]
	int8_t state = 2;
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'setMaxCurrent'\r\n");
	#endif

	// Maximum rate value = 0x1B, because maximum current supply = 240 mA
	if (rate > 0x1B)
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b1b      	cmp	r3, #27
 8002c06:	d904      	bls.n	8002c12 <BSP_SX1272_setMaxCurrent+0x26>
	{
		state = -1;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	22ff      	movs	r2, #255	; 0xff
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e02e      	b.n	8002c70 <BSP_SX1272_setMaxCurrent+0x84>
		#endif
	}
	else
	{
		// Enable Over Current Protection
		rate |= 0b00100000;
 8002c12:	1dfb      	adds	r3, r7, #7
 8002c14:	1dfa      	adds	r2, r7, #7
 8002c16:	7812      	ldrb	r2, [r2, #0]
 8002c18:	2120      	movs	r1, #32
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	701a      	strb	r2, [r3, #0]

		state = 1;
 8002c1e:	230f      	movs	r3, #15
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
		st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 8002c26:	230e      	movs	r3, #14
 8002c28:	18fc      	adds	r4, r7, r3
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f001 fe06 	bl	800483c <BSP_SX1272_Read>
 8002c30:	0003      	movs	r3, r0
 8002c32:	7023      	strb	r3, [r4, #0]
		if( currentstate._modem == LORA )
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <BSP_SX1272_setMaxCurrent+0x94>)
 8002c36:	7f1b      	ldrb	r3, [r3, #28]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d104      	bne.n	8002c46 <BSP_SX1272_setMaxCurrent+0x5a>
		{ // LoRa mode
			BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);	// Set LoRa Standby mode to write in registers
 8002c3c:	2181      	movs	r1, #129	; 0x81
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f001 fe2c 	bl	800489c <BSP_SX1272_Write>
 8002c44:	e003      	b.n	8002c4e <BSP_SX1272_setMaxCurrent+0x62>
		}
		else
		{ // FSK mode
			BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);	// Set FSK Standby mode to write in registers
 8002c46:	2101      	movs	r1, #1
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f001 fe27 	bl	800489c <BSP_SX1272_Write>
		}
		BSP_SX1272_Write(REG_OCP, rate);		// Modifying maximum current supply
 8002c4e:	1dfb      	adds	r3, r7, #7
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	0019      	movs	r1, r3
 8002c54:	200b      	movs	r0, #11
 8002c56:	f001 fe21 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_OP_MODE, st0);		// Getting back to previous status
 8002c5a:	230e      	movs	r3, #14
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	0019      	movs	r1, r3
 8002c62:	2001      	movs	r0, #1
 8002c64:	f001 fe1a 	bl	800489c <BSP_SX1272_Write>
		state = 0;
 8002c68:	230f      	movs	r3, #15
 8002c6a:	18fb      	adds	r3, r7, r3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
	}
	return state;
 8002c70:	230f      	movs	r3, #15
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b25b      	sxtb	r3, r3
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b005      	add	sp, #20
 8002c7e:	bd90      	pop	{r4, r7, pc}
 8002c80:	200000d4 	.word	0x200000d4

08002c84 <BSP_SX1272_getRegs>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getRegs()
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
	int8_t state = 2;
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]
	uint8_t state_f = 2;
 8002c90:	1dbb      	adds	r3, r7, #6
 8002c92:	2202      	movs	r2, #2
 8002c94:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'getRegs'\r\n");
	#endif

	state_f = 1;
 8002c96:	1dbb      	adds	r3, r7, #6
 8002c98:	2201      	movs	r2, #1
 8002c9a:	701a      	strb	r2, [r3, #0]
	state = BSP_SX1272_getMode();			// Stores the BW, CR and SF.
 8002c9c:	f7fe f946 	bl	8000f2c <BSP_SX1272_getMode>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	1dfb      	adds	r3, r7, #7
 8002ca6:	701a      	strb	r2, [r3, #0]
	if( state == 0 )
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <BSP_SX1272_getRegs+0x3c>
	{
		state = BSP_SX1272_getPower();		// Stores the power.
 8002cb2:	f7ff fb97 	bl	80023e4 <BSP_SX1272_getPower>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	001a      	movs	r2, r3
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e002      	b.n	8002cc6 <BSP_SX1272_getRegs+0x42>
	}
	else
	{
		state_f = 1;
 8002cc0:	1dbb      	adds	r3, r7, #6
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** Error getting mode **\r\n");
		#endif
	}
 	if( state == 0 )
 8002cc6:	1dfb      	adds	r3, r7, #7
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	b25b      	sxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <BSP_SX1272_getRegs+0x5a>
	{
		state = BSP_SX1272_getChannel();	// Stores the channel.
 8002cd0:	f7ff fabe 	bl	8002250 <BSP_SX1272_getChannel>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	001a      	movs	r2, r3
 8002cd8:	1dfb      	adds	r3, r7, #7
 8002cda:	701a      	strb	r2, [r3, #0]
 8002cdc:	e002      	b.n	8002ce4 <BSP_SX1272_getRegs+0x60>
	}
	else
	{
		state_f = 1;
 8002cde:	1dbb      	adds	r3, r7, #6
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** Error getting power **\r\n");
		#endif
	}
	if( state == 0 )
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b25b      	sxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <BSP_SX1272_getRegs+0x78>
	{
		state = BSP_SX1272_getCRC();		// Stores the CRC configuration.
 8002cee:	f7fe fc1d 	bl	800152c <BSP_SX1272_getCRC>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e002      	b.n	8002d02 <BSP_SX1272_getRegs+0x7e>
	}
	else
	{
		state_f = 1;
 8002cfc:	1dbb      	adds	r3, r7, #6
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** Error getting channel **\r\n");
		#endif
	}
	if( state == 0 )
 8002d02:	1dfb      	adds	r3, r7, #7
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b25b      	sxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <BSP_SX1272_getRegs+0x96>
	{
		state = BSP_SX1272_getHeader();	// Stores the header configuration.
 8002d0c:	f7fe fb56 	bl	80013bc <BSP_SX1272_getHeader>
 8002d10:	0003      	movs	r3, r0
 8002d12:	001a      	movs	r2, r3
 8002d14:	1dfb      	adds	r3, r7, #7
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e002      	b.n	8002d20 <BSP_SX1272_getRegs+0x9c>
	}
	else
	{
		state_f = 1;
 8002d1a:	1dbb      	adds	r3, r7, #6
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** Error getting CRC **\r\n");
		#endif
	}
	if( state == 0 )
 8002d20:	1dfb      	adds	r3, r7, #7
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <BSP_SX1272_getRegs+0xb4>
	{
		state = BSP_SX1272_getPreambleLength();	// Stores the preamble length.
 8002d2a:	f7ff fbdf 	bl	80024ec <BSP_SX1272_getPreambleLength>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	001a      	movs	r2, r3
 8002d32:	1dfb      	adds	r3, r7, #7
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e002      	b.n	8002d3e <BSP_SX1272_getRegs+0xba>
	}
	else
	{
		state_f = 1;
 8002d38:	1dbb      	adds	r3, r7, #6
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** Error getting header **\r\n");
		#endif
	}
	if( state == 0 )
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b25b      	sxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <BSP_SX1272_getRegs+0xd2>
	{
		state = BSP_SX1272_getPayloadLength();		// Stores the payload length.
 8002d48:	f7ff fc8a 	bl	8002660 <BSP_SX1272_getPayloadLength>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	001a      	movs	r2, r3
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e002      	b.n	8002d5c <BSP_SX1272_getRegs+0xd8>
	}
	else
	{
		state_f = 1;
 8002d56:	1dbb      	adds	r3, r7, #6
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** Error getting preamble length **\r\n");
		#endif
	}
	if( state == 0 )
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <BSP_SX1272_getRegs+0xf0>
	{
		state = BSP_SX1272_getNodeAddress();		// Stores the node address.
 8002d66:	f7ff fd0b 	bl	8002780 <BSP_SX1272_getNodeAddress>
 8002d6a:	0003      	movs	r3, r0
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	1dfb      	adds	r3, r7, #7
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e002      	b.n	8002d7a <BSP_SX1272_getRegs+0xf6>
	}
	else
	{
		state_f = 1;
 8002d74:	1dbb      	adds	r3, r7, #6
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** Error getting payload length **\r\n");
		#endif
	}
	if( state == 0 )
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d106      	bne.n	8002d92 <BSP_SX1272_getRegs+0x10e>
	{
		state = BSP_SX1272_getMaxCurrent();		// Stores the maximum current supply.
 8002d84:	f7ff feec 	bl	8002b60 <BSP_SX1272_getMaxCurrent>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	1dfb      	adds	r3, r7, #7
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e002      	b.n	8002d98 <BSP_SX1272_getRegs+0x114>
	}
	else
	{
		state_f = 1;
 8002d92:	1dbb      	adds	r3, r7, #6
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** Error getting node address **\r\n");
		#endif
	}
	if( state == 0 )
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <BSP_SX1272_getRegs+0x12a>
	{
		state_f = BSP_SX1272_getTemp();		// Stores the module temperature.
 8002da2:	1dbc      	adds	r4, r7, #6
 8002da4:	f001 fa42 	bl	800422c <BSP_SX1272_getTemp>
 8002da8:	0003      	movs	r3, r0
 8002daa:	7023      	strb	r3, [r4, #0]
 8002dac:	e002      	b.n	8002db4 <BSP_SX1272_getRegs+0x130>
	}
	else
	{
		state_f = 1;
 8002dae:	1dbb      	adds	r3, r7, #6
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 1)
			my_printf("** Error getting temperature **\r\n");
			my_printf("\r\n");
		#endif
	}
	return state_f;
 8002db4:	1dbb      	adds	r3, r7, #6
 8002db6:	781b      	ldrb	r3, [r3, #0]
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b003      	add	sp, #12
 8002dbe:	bd90      	pop	{r4, r7, pc}

08002dc0 <BSP_SX1272_truncPayload>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_truncPayload(uint16_t length16)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	1dbb      	adds	r3, r7, #6
 8002dca:	801a      	strh	r2, [r3, #0]
	uint8_t state = 2;
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	701a      	strb	r2, [r3, #0]

	state = 1;
 8002dd4:	230f      	movs	r3, #15
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'truncPayload'\r\n");
	#endif

	if( length16 > MAX_PAYLOAD )
 8002ddc:	1dbb      	adds	r3, r7, #6
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	2bfb      	cmp	r3, #251	; 0xfb
 8002de2:	d903      	bls.n	8002dec <BSP_SX1272_truncPayload+0x2c>
	{
		currentstate._payloadlength = MAX_PAYLOAD;
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <BSP_SX1272_truncPayload+0x50>)
 8002de6:	22fb      	movs	r2, #251	; 0xfb
 8002de8:	821a      	strh	r2, [r3, #16]
 8002dea:	e006      	b.n	8002dfa <BSP_SX1272_truncPayload+0x3a>
	}
	else
	{
		currentstate._payloadlength = (length16 & 0xFF);
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	22ff      	movs	r2, #255	; 0xff
 8002df2:	4013      	ands	r3, r2
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <BSP_SX1272_truncPayload+0x50>)
 8002df8:	821a      	strh	r2, [r3, #16]
	}
	state = 0;
 8002dfa:	230f      	movs	r3, #15
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]

	return state;
 8002e02:	230f      	movs	r3, #15
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	781b      	ldrb	r3, [r3, #0]
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200000d4 	.word	0x200000d4

08002e14 <BSP_SX1272_setACK>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setACK()
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 8002e1a:	1dfb      	adds	r3, r7, #7
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'BSP_SX1272_setACK'\r\n");
	#endif

	BSP_SX1272_clearFlags();	// Initializing flags
 8002e20:	f7fd ff9c 	bl	8000d5c <BSP_SX1272_clearFlags>

	if( currentstate._modem == LORA )
 8002e24:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e26:	7f1b      	ldrb	r3, [r3, #28]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d104      	bne.n	8002e36 <BSP_SX1272_setACK+0x22>
	{ // LoRa mode
		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);	// Stdby LoRa mode to write in FIFO
 8002e2c:	2181      	movs	r1, #129	; 0x81
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f001 fd34 	bl	800489c <BSP_SX1272_Write>
 8002e34:	e003      	b.n	8002e3e <BSP_SX1272_setACK+0x2a>
	}
	else
	{ // FSK mode
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);	// Stdby FSK mode to write in FIFO
 8002e36:	2101      	movs	r1, #1
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f001 fd2f 	bl	800489c <BSP_SX1272_Write>
	}

	// Setting currentstate.ACK length in order to send it
	state = BSP_SX1272_setPacketLength(ACK_LENGTH);
 8002e3e:	2005      	movs	r0, #5
 8002e40:	f7ff fc38 	bl	80026b4 <BSP_SX1272_setPacketLength>
 8002e44:	0003      	movs	r3, r0
 8002e46:	001a      	movs	r2, r3
 8002e48:	1dfb      	adds	r3, r7, #7
 8002e4a:	701a      	strb	r2, [r3, #0]
	if( state == 0 )
 8002e4c:	1dfb      	adds	r3, r7, #7
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d15f      	bne.n	8002f14 <BSP_SX1272_setACK+0x100>
	{
		// Setting currentstate.ACK
		memset( &currentstate.ACK, 0x00, sizeof(currentstate.ACK) );
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	005a      	lsls	r2, r3, #1
 8002e58:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <BSP_SX1272_setACK+0x110>)
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f004 fd34 	bl	80078ca <memset>
		currentstate.ACK.dst = currentstate.packet_received.src; // currentstate.ACK destination is packet source
 8002e62:	4a2f      	ldr	r2, [pc, #188]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e64:	238f      	movs	r3, #143	; 0x8f
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	5cd1      	ldrb	r1, [r2, r3]
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e6c:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <BSP_SX1272_setACK+0x114>)
 8002e6e:	5499      	strb	r1, [r3, r2]
		currentstate.ACK.src = currentstate.packet_received.dst; // currentstate.ACK source is packet destination
 8002e70:	4a2b      	ldr	r2, [pc, #172]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e72:	231e      	movs	r3, #30
 8002e74:	33ff      	adds	r3, #255	; 0xff
 8002e76:	5cd1      	ldrb	r1, [r2, r3]
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e7a:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <BSP_SX1272_setACK+0x118>)
 8002e7c:	5499      	strb	r1, [r3, r2]
		currentstate.ACK.packnum = currentstate.packet_received.packnum; // packet number that has been correctly received
 8002e7e:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e80:	2320      	movs	r3, #32
 8002e82:	33ff      	adds	r3, #255	; 0xff
 8002e84:	5cd1      	ldrb	r1, [r2, r3]
 8002e86:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e88:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <BSP_SX1272_setACK+0x11c>)
 8002e8a:	5499      	strb	r1, [r3, r2]
		currentstate.ACK.length = 0;		  // length = 0 to show that's an currentstate.ACK
 8002e8c:	4a24      	ldr	r2, [pc, #144]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e8e:	2388      	movs	r3, #136	; 0x88
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	2100      	movs	r1, #0
 8002e94:	54d1      	strb	r1, [r2, r3]
		currentstate.ACK.data[0] = currentstate._reception;	// CRC of the received packet
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e98:	7e19      	ldrb	r1, [r3, #24]
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002e9c:	4a25      	ldr	r2, [pc, #148]	; (8002f34 <BSP_SX1272_setACK+0x120>)
 8002e9e:	5499      	strb	r1, [r3, r2]

		// Setting address pointer in FIFO data buffer
		BSP_SX1272_Write(REG_FIFO_ADDR_PTR, 0x00);
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	200d      	movs	r0, #13
 8002ea4:	f001 fcfa 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO_TX_BASE_ADDR, 0x00);
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	200e      	movs	r0, #14
 8002eac:	f001 fcf6 	bl	800489c <BSP_SX1272_Write>

		state = 1;
 8002eb0:	1dfb      	adds	r3, r7, #7
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]

		// Writing currentstate.ACK to send in FIFO
		BSP_SX1272_Write(REG_FIFO, currentstate.ACK.dst); 		// Writing the destination in FIFO
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <BSP_SX1272_setACK+0x114>)
 8002eba:	5c9b      	ldrb	r3, [r3, r2]
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f001 fcec 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.ACK.src);		// Writing the source in FIFO
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <BSP_SX1272_setACK+0x118>)
 8002ec8:	5c9b      	ldrb	r3, [r3, r2]
 8002eca:	0019      	movs	r1, r3
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f001 fce5 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.ACK.packnum);	// Writing the packet number in FIFO
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002ed4:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <BSP_SX1272_setACK+0x11c>)
 8002ed6:	5c9b      	ldrb	r3, [r3, r2]
 8002ed8:	0019      	movs	r1, r3
 8002eda:	2000      	movs	r0, #0
 8002edc:	f001 fcde 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.ACK.length); 	// Writing the packet length in FIFO
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002ee2:	2388      	movs	r3, #136	; 0x88
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	5cd3      	ldrb	r3, [r2, r3]
 8002ee8:	0019      	movs	r1, r3
 8002eea:	2000      	movs	r0, #0
 8002eec:	f001 fcd6 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.ACK.data[0]);	// Writing the currentstate.ACK in FIFO
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002ef2:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <BSP_SX1272_setACK+0x120>)
 8002ef4:	5c9b      	ldrb	r3, [r3, r2]
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f001 fccf 	bl	800489c <BSP_SX1272_Write>
			my_printf("%d",currentstate.ACK.data[0]);			// Printing currentstate.ACK payload
			my_printf(" ##\r\n");
			my_printf("\r\n");
		#endif

		state = 0;
 8002efe:	1dfb      	adds	r3, r7, #7
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
		currentstate._reception = CORRECT_PACKET;		// Updating value to next packet
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <BSP_SX1272_setACK+0x10c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	761a      	strb	r2, [r3, #24]

		BSP_DELAY_ms(500);
 8002f0a:	23fa      	movs	r3, #250	; 0xfa
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f001 fd18 	bl	8004944 <BSP_DELAY_ms>
	}
	return state;
 8002f14:	1dfb      	adds	r3, r7, #7
 8002f16:	781b      	ldrb	r3, [r3, #0]
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200000d4 	.word	0x200000d4
 8002f24:	200002f1 	.word	0x200002f1
 8002f28:	0000021d 	.word	0x0000021d
 8002f2c:	0000021e 	.word	0x0000021e
 8002f30:	0000021f 	.word	0x0000021f
 8002f34:	00000221 	.word	0x00000221

08002f38 <BSP_SX1272_receive>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_receive()
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
	uint8_t state = 1;
 8002f3e:	1dfb      	adds	r3, r7, #7
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'BSP_SX1272_receive'\r\n");
	#endif

	// Initializing currentstate.packet_received struct
	memset( &currentstate.packet_received, 0x00, sizeof(currentstate.packet_received) );
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	005a      	lsls	r2, r3, #1
 8002f48:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <BSP_SX1272_receive+0x98>)
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f004 fcbc 	bl	80078ca <memset>

	// Setting Testmode
	BSP_SX1272_Write(0x31,0x43);
 8002f52:	2143      	movs	r1, #67	; 0x43
 8002f54:	2031      	movs	r0, #49	; 0x31
 8002f56:	f001 fca1 	bl	800489c <BSP_SX1272_Write>
	// Set LowPnTxPllOff
	BSP_SX1272_Write(REG_PA_RAMP, 0x09);
 8002f5a:	2109      	movs	r1, #9
 8002f5c:	200a      	movs	r0, #10
 8002f5e:	f001 fc9d 	bl	800489c <BSP_SX1272_Write>
	// Set LNA gain: Highest gain. LnaBoost:Improved sensitivity
	BSP_SX1272_Write(REG_LNA, 0x23);
 8002f62:	2123      	movs	r1, #35	; 0x23
 8002f64:	200c      	movs	r0, #12
 8002f66:	f001 fc99 	bl	800489c <BSP_SX1272_Write>
	// Setting address pointer in FIFO data buffer
	BSP_SX1272_Write(REG_FIFO_ADDR_PTR, 0x00);
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	200d      	movs	r0, #13
 8002f6e:	f001 fc95 	bl	800489c <BSP_SX1272_Write>
	// change RegSymbTimeoutLsb
	BSP_SX1272_Write(REG_SYMB_TIMEOUT_LSB, 0xFF);
 8002f72:	21ff      	movs	r1, #255	; 0xff
 8002f74:	201f      	movs	r0, #31
 8002f76:	f001 fc91 	bl	800489c <BSP_SX1272_Write>
	// Setting current value of reception buffer pointer
	BSP_SX1272_Write(REG_FIFO_RX_BASE_ADDR, 0x00);
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	200f      	movs	r0, #15
 8002f7e:	f001 fc8d 	bl	800489c <BSP_SX1272_Write>

	// Proceed depending on the protocol selected
	if( currentstate._modem == LORA )
 8002f82:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <BSP_SX1272_receive+0x9c>)
 8002f84:	7f1b      	ldrb	r3, [r3, #28]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10b      	bne.n	8002fa2 <BSP_SX1272_receive+0x6a>
	{
		/// LoRa mode
		// With MAX_LENGTH gets all packets with length < MAX_LENGTH
		state = BSP_SX1272_setPacketLength(MAX_LENGTH);
 8002f8a:	20ff      	movs	r0, #255	; 0xff
 8002f8c:	f7ff fb92 	bl	80026b4 <BSP_SX1272_setPacketLength>
 8002f90:	0003      	movs	r3, r0
 8002f92:	001a      	movs	r2, r3
 8002f94:	1dfb      	adds	r3, r7, #7
 8002f96:	701a      	strb	r2, [r3, #0]
		// Set LORA mode - Rx
		BSP_SX1272_Write(REG_OP_MODE, LORA_RX_MODE);
 8002f98:	2185      	movs	r1, #133	; 0x85
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f001 fc7e 	bl	800489c <BSP_SX1272_Write>
 8002fa0:	e00f      	b.n	8002fc2 <BSP_SX1272_receive+0x8a>
		#endif
	}
	else
	{
		/// FSK mode
		state = BSP_SX1272_setPacketLength(currentstate._payloadlength + OFFSET_PAYLOADLENGTH);
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <BSP_SX1272_receive+0x9c>)
 8002fa4:	8a1b      	ldrh	r3, [r3, #16]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	3305      	adds	r3, #5
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7ff fb81 	bl	80026b4 <BSP_SX1272_setPacketLength>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	701a      	strb	r2, [r3, #0]

		// FSK mode - Rx
		BSP_SX1272_Write(REG_OP_MODE, FSK_RX_MODE);
 8002fba:	2105      	movs	r1, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	f001 fc6d 	bl	800489c <BSP_SX1272_Write>

	#if (SX1272_debug_mode > 1)
		//showRxRegisters();
	#endif

	return state;
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b002      	add	sp, #8
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	200001f1 	.word	0x200001f1
 8002fd4:	200000d4 	.word	0x200000d4

08002fd8 <BSP_SX1272_receivePacketMAXTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_receivePacketMAXTimeout()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
	return BSP_SX1272_receivePacketTimeout(MAX_TIMEOUT);
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <BSP_SX1272_receivePacketMAXTimeout+0x14>)
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 f806 	bl	8002ff0 <BSP_SX1272_receivePacketTimeout>
 8002fe4:	0003      	movs	r3, r0
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	00002710 	.word	0x00002710

08002ff0 <BSP_SX1272_receivePacketTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_receivePacketTimeout(uint32_t wait)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 8002ff8:	230e      	movs	r3, #14
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
	uint8_t state_f = 2;
 8003000:	230f      	movs	r3, #15
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2202      	movs	r2, #2
 8003006:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'receivePacketTimeout'\r\n");
	#endif

	// set RX mode
	state = BSP_SX1272_receive();
 8003008:	230e      	movs	r3, #14
 800300a:	18fc      	adds	r4, r7, r3
 800300c:	f7ff ff94 	bl	8002f38 <BSP_SX1272_receive>
 8003010:	0003      	movs	r3, r0
 8003012:	7023      	strb	r3, [r4, #0]

	// if RX mode is set correctly then wait for data
	if( state == 0 )
 8003014:	230e      	movs	r3, #14
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d114      	bne.n	8003048 <BSP_SX1272_receivePacketTimeout+0x58>
	{
		// Wait for a new packet for 'wait' time
		if( BSP_SX1272_availableData(wait) )
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 f8ed 	bl	8003200 <BSP_SX1272_availableData>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d009      	beq.n	800303e <BSP_SX1272_receivePacketTimeout+0x4e>
		{
			// If packet received, getPacket
			state_f = BSP_SX1272_getPacket(MAX_TIMEOUT);
 800302a:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <BSP_SX1272_receivePacketTimeout+0x74>)
 800302c:	0018      	movs	r0, r3
 800302e:	f000 f9f9 	bl	8003424 <BSP_SX1272_getPacket>
 8003032:	0003      	movs	r3, r0
 8003034:	001a      	movs	r2, r3
 8003036:	230f      	movs	r3, #15
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	701a      	strb	r2, [r3, #0]
 800303c:	e00a      	b.n	8003054 <BSP_SX1272_receivePacketTimeout+0x64>
		}
		else
		{
			state_f = 1;
 800303e:	230f      	movs	r3, #15
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
 8003046:	e005      	b.n	8003054 <BSP_SX1272_receivePacketTimeout+0x64>
		}
	}
	else
	{
		state_f = state;
 8003048:	230f      	movs	r3, #15
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	220e      	movs	r2, #14
 800304e:	18ba      	adds	r2, r7, r2
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
	}
	return state_f;
 8003054:	230f      	movs	r3, #15
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	781b      	ldrb	r3, [r3, #0]
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b005      	add	sp, #20
 8003060:	bd90      	pop	{r4, r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	00002710 	.word	0x00002710

08003068 <BSP_SX1272_receivePacketTimeouACK>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_receivePacketTimeouACK(uint32_t wait)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 8003070:	230f      	movs	r3, #15
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2202      	movs	r2, #2
 8003076:	701a      	strb	r2, [r3, #0]
	uint8_t state_f = 2;
 8003078:	230e      	movs	r3, #14
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2202      	movs	r2, #2
 800307e:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'receivePacketTimeouACK'\r\n");
	#endif

	// set RX mode
	state = BSP_SX1272_receive();
 8003080:	230f      	movs	r3, #15
 8003082:	18fc      	adds	r4, r7, r3
 8003084:	f7ff ff58 	bl	8002f38 <BSP_SX1272_receive>
 8003088:	0003      	movs	r3, r0
 800308a:	7023      	strb	r3, [r4, #0]

	// if RX mode is set correctly then wait for data
	if( state == 0 )
 800308c:	230f      	movs	r3, #15
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <BSP_SX1272_receivePacketTimeouACK+0x60>
	{
		// Wait for a new packet for 'wait' time
		if( BSP_SX1272_availableData(wait) )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 f8b1 	bl	8003200 <BSP_SX1272_availableData>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d009      	beq.n	80030b6 <BSP_SX1272_receivePacketTimeouACK+0x4e>
		{
			// If packet received, getPacket
			state = BSP_SX1272_getPacket(MAX_TIMEOUT);
 80030a2:	4b33      	ldr	r3, [pc, #204]	; (8003170 <BSP_SX1272_receivePacketTimeouACK+0x108>)
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 f9bd 	bl	8003424 <BSP_SX1272_getPacket>
 80030aa:	0003      	movs	r3, r0
 80030ac:	001a      	movs	r2, r3
 80030ae:	230f      	movs	r3, #15
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e010      	b.n	80030d8 <BSP_SX1272_receivePacketTimeouACK+0x70>
		}
		else
		{
			state = 1;
 80030b6:	230f      	movs	r3, #15
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
			state_f = 3;  // There is no packet received
 80030be:	230e      	movs	r3, #14
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	2203      	movs	r2, #3
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	e007      	b.n	80030d8 <BSP_SX1272_receivePacketTimeouACK+0x70>
		}
	}
	else
	{
		state = 1;
 80030c8:	230f      	movs	r3, #15
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
		state_f = 1; // There has been an error with the 'BSP_SX1272_receive' function
 80030d0:	230e      	movs	r3, #14
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
	}


	if( (state == 0) || (state == 3) )
 80030d8:	230f      	movs	r3, #15
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <BSP_SX1272_receivePacketTimeouACK+0x84>
 80030e2:	230f      	movs	r3, #15
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d136      	bne.n	800315a <BSP_SX1272_receivePacketTimeouACK+0xf2>
	{
		if( currentstate._reception == INCORRECT_PACKET )
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <BSP_SX1272_receivePacketTimeouACK+0x10c>)
 80030ee:	7e1b      	ldrb	r3, [r3, #24]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d104      	bne.n	80030fe <BSP_SX1272_receivePacketTimeouACK+0x96>
		{
			state_f = 4;  // The packet has been incorrectly received
 80030f4:	230e      	movs	r3, #14
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2204      	movs	r2, #4
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	e003      	b.n	8003106 <BSP_SX1272_receivePacketTimeouACK+0x9e>
		}
		else
		{
			state_f = 1;  // The packet has been correctly received
 80030fe:	230e      	movs	r3, #14
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
		}
		state = BSP_SX1272_setACK();
 8003106:	230f      	movs	r3, #15
 8003108:	18fc      	adds	r4, r7, r3
 800310a:	f7ff fe83 	bl	8002e14 <BSP_SX1272_setACK>
 800310e:	0003      	movs	r3, r0
 8003110:	7023      	strb	r3, [r4, #0]
		if( state == 0 )
 8003112:	230f      	movs	r3, #15
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d119      	bne.n	8003150 <BSP_SX1272_receivePacketTimeouACK+0xe8>
		{
			state = BSP_SX1272_sendWithTimeout(currentstate._sendTime);
 800311c:	4a15      	ldr	r2, [pc, #84]	; (8003174 <BSP_SX1272_receivePacketTimeouACK+0x10c>)
 800311e:	23c9      	movs	r3, #201	; 0xc9
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	5ad3      	ldrh	r3, [r2, r3]
 8003124:	220f      	movs	r2, #15
 8003126:	18bc      	adds	r4, r7, r2
 8003128:	0018      	movs	r0, r3
 800312a:	f000 fdd5 	bl	8003cd8 <BSP_SX1272_sendWithTimeout>
 800312e:	0003      	movs	r3, r0
 8003130:	7023      	strb	r3, [r4, #0]
			if( state == 0 )
 8003132:	230f      	movs	r3, #15
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <BSP_SX1272_receivePacketTimeouACK+0xde>
			{
			state_f = 0;
 800313c:	230e      	movs	r3, #14
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
		if( state == 0 )
 8003144:	e00d      	b.n	8003162 <BSP_SX1272_receivePacketTimeouACK+0xfa>
				my_printf("\r\n");
			#endif
			}
			else
			{
				state_f = 1; // There has been an error with the 'sendWithTimeout' function
 8003146:	230e      	movs	r3, #14
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
		if( state == 0 )
 800314e:	e008      	b.n	8003162 <BSP_SX1272_receivePacketTimeouACK+0xfa>
			}
		}
		else
		{
			state_f = 1; // There has been an error with the 'BSP_SX1272_setACK' function
 8003150:	230e      	movs	r3, #14
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
		if( state == 0 )
 8003158:	e003      	b.n	8003162 <BSP_SX1272_receivePacketTimeouACK+0xfa>
		}
	}
	else
	{
		state_f = 1;
 800315a:	230e      	movs	r3, #14
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
	}
	return state_f;
 8003162:	230e      	movs	r3, #14
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	781b      	ldrb	r3, [r3, #0]
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b005      	add	sp, #20
 800316e:	bd90      	pop	{r4, r7, pc}
 8003170:	00002710 	.word	0x00002710
 8003174:	200000d4 	.word	0x200000d4

08003178 <BSP_SX1272_receiveAll>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_receiveAll(uint32_t wait)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 8003180:	230f      	movs	r3, #15
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2202      	movs	r2, #2
 8003186:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'receiveAll'\r\n");
	#endif

	if( currentstate._modem == FSK )
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <BSP_SX1272_receiveAll+0x84>)
 800318a:	7f1b      	ldrb	r3, [r3, #28]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d119      	bne.n	80031c4 <BSP_SX1272_receiveAll+0x4c>
	{
		/// FSK mode
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);		// Setting standby FSK mode
 8003190:	2101      	movs	r1, #1
 8003192:	2001      	movs	r0, #1
 8003194:	f001 fb82 	bl	800489c <BSP_SX1272_Write>
		config1 = BSP_SX1272_Read(REG_PACKET_CONFIG1);
 8003198:	230e      	movs	r3, #14
 800319a:	18fc      	adds	r4, r7, r3
 800319c:	2030      	movs	r0, #48	; 0x30
 800319e:	f001 fb4d 	bl	800483c <BSP_SX1272_Read>
 80031a2:	0003      	movs	r3, r0
 80031a4:	7023      	strb	r3, [r4, #0]
		config1 = config1 & 0b11111001;			// clears bits 2-1 from REG_PACKET_CONFIG1
 80031a6:	230e      	movs	r3, #14
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	220e      	movs	r2, #14
 80031ac:	18ba      	adds	r2, r7, r2
 80031ae:	7812      	ldrb	r2, [r2, #0]
 80031b0:	2106      	movs	r1, #6
 80031b2:	438a      	bics	r2, r1
 80031b4:	701a      	strb	r2, [r3, #0]
		BSP_SX1272_Write(REG_PACKET_CONFIG1, config1);		// AddressFiltering = None
 80031b6:	230e      	movs	r3, #14
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	0019      	movs	r1, r3
 80031be:	2030      	movs	r0, #48	; 0x30
 80031c0:	f001 fb6c 	bl	800489c <BSP_SX1272_Write>
		my_printf("## Address filtering desactivated ##\r\n");
		my_printf("\r\n");
	#endif

	// Setting Rx mode
	state = BSP_SX1272_receive();
 80031c4:	230f      	movs	r3, #15
 80031c6:	18fc      	adds	r4, r7, r3
 80031c8:	f7ff feb6 	bl	8002f38 <BSP_SX1272_receive>
 80031cc:	0003      	movs	r3, r0
 80031ce:	7023      	strb	r3, [r4, #0]

	if( state == 0 )
 80031d0:	230f      	movs	r3, #15
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <BSP_SX1272_receiveAll+0x74>
	{
		// Getting all packets received in wait
		state = BSP_SX1272_getPacket(wait);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	0018      	movs	r0, r3
 80031de:	f000 f921 	bl	8003424 <BSP_SX1272_getPacket>
 80031e2:	0003      	movs	r3, r0
 80031e4:	001a      	movs	r2, r3
 80031e6:	230f      	movs	r3, #15
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	701a      	strb	r2, [r3, #0]
	}
	return state;
 80031ec:	230f      	movs	r3, #15
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	781b      	ldrb	r3, [r3, #0]
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b005      	add	sp, #20
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	200000d4 	.word	0x200000d4

08003200 <BSP_SX1272_availableData>:
		  it's '0' if the packet is not for the module.
 Parameters:
   wait: time to wait while there is no a valid header received.
*/
uint8_t	BSP_SX1272_availableData(uint32_t wait)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	uint8_t value;
	uint8_t header = 0;
 8003208:	230e      	movs	r3, #14
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
	uint8_t forme = 0;
 8003210:	230d      	movs	r3, #13
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2200      	movs	r2, #0
 8003216:	701a      	strb	r2, [r3, #0]
	unsigned long previous;

	// update attribute
	currentstate._hreceived = 0;
 8003218:	4b7a      	ldr	r3, [pc, #488]	; (8003404 <BSP_SX1272_availableData+0x204>)
 800321a:	2200      	movs	r2, #0
 800321c:	751a      	strb	r2, [r3, #20]
	#if (SX1272_debug_mode > 0)
		my_printf("\r\n");
		my_printf("Starting 'availableData'\r\n");
	#endif

	previous = millis();
 800321e:	f7fd fd05 	bl	8000c2c <millis>
 8003222:	0003      	movs	r3, r0
 8003224:	60bb      	str	r3, [r7, #8]

	if( currentstate._modem == LORA )
 8003226:	4b77      	ldr	r3, [pc, #476]	; (8003404 <BSP_SX1272_availableData+0x204>)
 8003228:	7f1b      	ldrb	r3, [r3, #28]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d000      	beq.n	8003230 <BSP_SX1272_availableData+0x30>
 800322e:	e06d      	b.n	800330c <BSP_SX1272_availableData+0x10c>
	{
		/// LoRa mode
		// read REG_IRQ_FLAGS
		value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 8003230:	230f      	movs	r3, #15
 8003232:	18fc      	adds	r4, r7, r3
 8003234:	2012      	movs	r0, #18
 8003236:	f001 fb01 	bl	800483c <BSP_SX1272_Read>
 800323a:	0003      	movs	r3, r0
 800323c:	7023      	strb	r3, [r4, #0]

		// Wait to ValidHeader interrupt in REG_IRQ_FLAGS
		while( (bitRead(value, 4) == 0) && (millis()-previous < (unsigned long)wait) )
 800323e:	e011      	b.n	8003264 <BSP_SX1272_availableData+0x64>
		{
			// read REG_IRQ_FLAGS
			value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 8003240:	230f      	movs	r3, #15
 8003242:	18fc      	adds	r4, r7, r3
 8003244:	2012      	movs	r0, #18
 8003246:	f001 faf9 	bl	800483c <BSP_SX1272_Read>
 800324a:	0003      	movs	r3, r0
 800324c:	7023      	strb	r3, [r4, #0]

			// Condition to avoid an overflow (DO NOT REMOVE)
			if( millis() < previous )
 800324e:	f7fd fced 	bl	8000c2c <millis>
 8003252:	0003      	movs	r3, r0
 8003254:	001a      	movs	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	429a      	cmp	r2, r3
 800325a:	d203      	bcs.n	8003264 <BSP_SX1272_availableData+0x64>
			{
				previous = millis();
 800325c:	f7fd fce6 	bl	8000c2c <millis>
 8003260:	0003      	movs	r3, r0
 8003262:	60bb      	str	r3, [r7, #8]
		while( (bitRead(value, 4) == 0) && (millis()-previous < (unsigned long)wait) )
 8003264:	230f      	movs	r3, #15
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	b2db      	uxtb	r3, r3
 800326e:	001a      	movs	r2, r3
 8003270:	2301      	movs	r3, #1
 8003272:	4013      	ands	r3, r2
 8003274:	d108      	bne.n	8003288 <BSP_SX1272_availableData+0x88>
 8003276:	f7fd fcd9 	bl	8000c2c <millis>
 800327a:	0003      	movs	r3, r0
 800327c:	001a      	movs	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	1ad2      	subs	r2, r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	429a      	cmp	r2, r3
 8003286:	d3db      	bcc.n	8003240 <BSP_SX1272_availableData+0x40>
			}
		}

		// Check if ValidHeader was received
		if( bitRead(value, 4) == 1 )
 8003288:	230f      	movs	r3, #15
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	b2db      	uxtb	r3, r3
 8003292:	001a      	movs	r2, r3
 8003294:	2301      	movs	r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d030      	beq.n	80032fc <BSP_SX1272_availableData+0xfc>
		{
			#if (SX1272_debug_mode > 0)
				my_printf("## Valid Header received in LoRa mode ##\r\n");
			#endif
			currentstate._hreceived = 1;
 800329a:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <BSP_SX1272_availableData+0x204>)
 800329c:	2201      	movs	r2, #1
 800329e:	751a      	strb	r2, [r3, #20]
			while( (header == 0) && (millis()-previous < (unsigned long)wait) )
 80032a0:	e011      	b.n	80032c6 <BSP_SX1272_availableData+0xc6>
			{
				// Wait for the increment of the RX buffer pointer
				header = BSP_SX1272_Read(REG_FIFO_RX_BASE_ADDR);
 80032a2:	230e      	movs	r3, #14
 80032a4:	18fc      	adds	r4, r7, r3
 80032a6:	200f      	movs	r0, #15
 80032a8:	f001 fac8 	bl	800483c <BSP_SX1272_Read>
 80032ac:	0003      	movs	r3, r0
 80032ae:	7023      	strb	r3, [r4, #0]

				// Condition to avoid an overflow (DO NOT REMOVE)
				if( millis() < previous )
 80032b0:	f7fd fcbc 	bl	8000c2c <millis>
 80032b4:	0003      	movs	r3, r0
 80032b6:	001a      	movs	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d203      	bcs.n	80032c6 <BSP_SX1272_availableData+0xc6>
				{
					previous = millis();
 80032be:	f7fd fcb5 	bl	8000c2c <millis>
 80032c2:	0003      	movs	r3, r0
 80032c4:	60bb      	str	r3, [r7, #8]
			while( (header == 0) && (millis()-previous < (unsigned long)wait) )
 80032c6:	230e      	movs	r3, #14
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d108      	bne.n	80032e2 <BSP_SX1272_availableData+0xe2>
 80032d0:	f7fd fcac 	bl	8000c2c <millis>
 80032d4:	0003      	movs	r3, r0
 80032d6:	001a      	movs	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1ad2      	subs	r2, r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d3df      	bcc.n	80032a2 <BSP_SX1272_availableData+0xa2>
				}
			}

			// If packet received: Read first uint8_t of the received packet
			if( header != 0 )
 80032e2:	230e      	movs	r3, #14
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d056      	beq.n	800339a <BSP_SX1272_availableData+0x19a>
			{
				currentstate._destination = BSP_SX1272_Read(REG_FIFO);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f001 faa5 	bl	800483c <BSP_SX1272_Read>
 80032f2:	0003      	movs	r3, r0
 80032f4:	001a      	movs	r2, r3
 80032f6:	4b43      	ldr	r3, [pc, #268]	; (8003404 <BSP_SX1272_availableData+0x204>)
 80032f8:	759a      	strb	r2, [r3, #22]
 80032fa:	e04e      	b.n	800339a <BSP_SX1272_availableData+0x19a>
			}
		}
		else
		{
			forme = 0;
 80032fc:	230d      	movs	r3, #13
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
			currentstate._hreceived = 0;
 8003304:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <BSP_SX1272_availableData+0x204>)
 8003306:	2200      	movs	r2, #0
 8003308:	751a      	strb	r2, [r3, #20]
 800330a:	e046      	b.n	800339a <BSP_SX1272_availableData+0x19a>
	}
	else
	{
		/// FSK mode
		// read REG_IRQ_FLAGS2
		value = BSP_SX1272_Read(REG_IRQ_FLAGS2);
 800330c:	230f      	movs	r3, #15
 800330e:	18fc      	adds	r4, r7, r3
 8003310:	203f      	movs	r0, #63	; 0x3f
 8003312:	f001 fa93 	bl	800483c <BSP_SX1272_Read>
 8003316:	0003      	movs	r3, r0
 8003318:	7023      	strb	r3, [r4, #0]
		// Wait to Payload Ready interrupt
		while( (bitRead(value, 5) == 0) && (millis() - previous < wait) )
 800331a:	e011      	b.n	8003340 <BSP_SX1272_availableData+0x140>
		{
			value = BSP_SX1272_Read(REG_IRQ_FLAGS2);
 800331c:	230f      	movs	r3, #15
 800331e:	18fc      	adds	r4, r7, r3
 8003320:	203f      	movs	r0, #63	; 0x3f
 8003322:	f001 fa8b 	bl	800483c <BSP_SX1272_Read>
 8003326:	0003      	movs	r3, r0
 8003328:	7023      	strb	r3, [r4, #0]
			// Condition to avoid an overflow (DO NOT REMOVE)
			if( millis() < previous )
 800332a:	f7fd fc7f 	bl	8000c2c <millis>
 800332e:	0003      	movs	r3, r0
 8003330:	001a      	movs	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d203      	bcs.n	8003340 <BSP_SX1272_availableData+0x140>
			{
				previous = millis();
 8003338:	f7fd fc78 	bl	8000c2c <millis>
 800333c:	0003      	movs	r3, r0
 800333e:	60bb      	str	r3, [r7, #8]
		while( (bitRead(value, 5) == 0) && (millis() - previous < wait) )
 8003340:	230f      	movs	r3, #15
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	b2db      	uxtb	r3, r3
 800334a:	001a      	movs	r2, r3
 800334c:	2301      	movs	r3, #1
 800334e:	4013      	ands	r3, r2
 8003350:	d108      	bne.n	8003364 <BSP_SX1272_availableData+0x164>
 8003352:	f7fd fc6b 	bl	8000c2c <millis>
 8003356:	0003      	movs	r3, r0
 8003358:	001a      	movs	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad2      	subs	r2, r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	429a      	cmp	r2, r3
 8003362:	d3db      	bcc.n	800331c <BSP_SX1272_availableData+0x11c>
			}
		}// end while (millis)
		if( bitRead(value, 5) == 1 )	// something received
 8003364:	230f      	movs	r3, #15
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	b2db      	uxtb	r3, r3
 800336e:	001a      	movs	r2, r3
 8003370:	2301      	movs	r3, #1
 8003372:	4013      	ands	r3, r2
 8003374:	d00a      	beq.n	800338c <BSP_SX1272_availableData+0x18c>
		{
			currentstate._hreceived = 1;
 8003376:	4b23      	ldr	r3, [pc, #140]	; (8003404 <BSP_SX1272_availableData+0x204>)
 8003378:	2201      	movs	r2, #1
 800337a:	751a      	strb	r2, [r3, #20]
			#if (SX1272_debug_mode > 0)
				my_printf("## Valid Preamble detected in FSK mode ##\r\n");
			#endif
			// Reading first uint8_t of the received packet
			currentstate._destination = BSP_SX1272_Read(REG_FIFO);
 800337c:	2000      	movs	r0, #0
 800337e:	f001 fa5d 	bl	800483c <BSP_SX1272_Read>
 8003382:	0003      	movs	r3, r0
 8003384:	001a      	movs	r2, r3
 8003386:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <BSP_SX1272_availableData+0x204>)
 8003388:	759a      	strb	r2, [r3, #22]
 800338a:	e006      	b.n	800339a <BSP_SX1272_availableData+0x19a>
		}
		else
		{
			forme = 0;
 800338c:	230d      	movs	r3, #13
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
			currentstate._hreceived = 0;
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <BSP_SX1272_availableData+0x204>)
 8003396:	2200      	movs	r2, #0
 8003398:	751a      	strb	r2, [r3, #20]

	/* We use 'currentstate._hreceived' because we need to ensure that 'currentstate._destination' value
	 * is correctly updated and is not the 'currentstate._destination' value from the
	 * previously packet
	 */
	if( currentstate._hreceived == 1 )
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <BSP_SX1272_availableData+0x204>)
 800339c:	7d1b      	ldrb	r3, [r3, #20]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d120      	bne.n	80033e4 <BSP_SX1272_availableData+0x1e4>
			my_printf("Broadcast address = ");
			my_printf("%d\r\n",BROADCAST_0);
		#endif

		// Checking destination
		if( (currentstate._destination == currentstate._nodeAddress) || (currentstate._destination == BROADCAST_0) )
 80033a2:	4b18      	ldr	r3, [pc, #96]	; (8003404 <BSP_SX1272_availableData+0x204>)
 80033a4:	7d9a      	ldrb	r2, [r3, #22]
 80033a6:	4b17      	ldr	r3, [pc, #92]	; (8003404 <BSP_SX1272_availableData+0x204>)
 80033a8:	7c9b      	ldrb	r3, [r3, #18]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d003      	beq.n	80033b6 <BSP_SX1272_availableData+0x1b6>
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <BSP_SX1272_availableData+0x204>)
 80033b0:	7d9b      	ldrb	r3, [r3, #22]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d104      	bne.n	80033c0 <BSP_SX1272_availableData+0x1c0>
		{ // LoRa or FSK mode
			forme = 1;
 80033b6:	230d      	movs	r3, #13
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e019      	b.n	80033f4 <BSP_SX1272_availableData+0x1f4>
				my_printf("## Packet received is for me ##\r\n");
			#endif
		}
		else
		{
			forme = 0;
 80033c0:	230d      	movs	r3, #13
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
				my_printf("%d",millis());
			#endif

			// If it is not a correct destination address, then change to
			// STANDBY to minimize power consumption
			if( currentstate._modem == LORA )
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <BSP_SX1272_availableData+0x204>)
 80033ca:	7f1b      	ldrb	r3, [r3, #28]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d104      	bne.n	80033da <BSP_SX1272_availableData+0x1da>
			{
				// Setting standby LoRa mode
				BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
 80033d0:	2181      	movs	r1, #129	; 0x81
 80033d2:	2001      	movs	r0, #1
 80033d4:	f001 fa62 	bl	800489c <BSP_SX1272_Write>
 80033d8:	e00c      	b.n	80033f4 <BSP_SX1272_availableData+0x1f4>
			}
			else
			{
				// Setting standby FSK mode
				BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 80033da:	2101      	movs	r1, #1
 80033dc:	2001      	movs	r0, #1
 80033de:	f001 fa5d 	bl	800489c <BSP_SX1272_Write>
 80033e2:	e007      	b.n	80033f4 <BSP_SX1272_availableData+0x1f4>
	}
	else
	{
		// If timeout has expired, then change to
		// STANDBY to minimize power consumption
		if( currentstate._modem == LORA )
 80033e4:	4b07      	ldr	r3, [pc, #28]	; (8003404 <BSP_SX1272_availableData+0x204>)
 80033e6:	7f1b      	ldrb	r3, [r3, #28]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d003      	beq.n	80033f4 <BSP_SX1272_availableData+0x1f4>
//~ 			BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);
		}
		else
		{
			// Setting standby FSK mode
			BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);
 80033ec:	2101      	movs	r1, #1
 80033ee:	2001      	movs	r0, #1
 80033f0:	f001 fa54 	bl	800489c <BSP_SX1272_Write>
		}
	}
	return forme;
 80033f4:	230d      	movs	r3, #13
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	781b      	ldrb	r3, [r3, #0]
}
 80033fa:	0018      	movs	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b005      	add	sp, #20
 8003400:	bd90      	pop	{r4, r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	200000d4 	.word	0x200000d4

08003408 <BSP_SX1272_getPacketMAXTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getPacketMAXTimeout()
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
	return BSP_SX1272_getPacket(MAX_TIMEOUT);
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <BSP_SX1272_getPacketMAXTimeout+0x18>)
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f808 	bl	8003424 <BSP_SX1272_getPacket>
 8003414:	0003      	movs	r3, r0
 8003416:	b2db      	uxtb	r3, r3
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	00002710 	.word	0x00002710

08003424 <BSP_SX1272_getPacket>:
   state = -1 --> Forbidden parameter value for this function
 Parameters:
   wait: time to wait while there is no a valid header received.
*/
int8_t BSP_SX1272_getPacket(uint32_t wait)
{
 8003424:	b590      	push	{r4, r7, lr}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 800342c:	2317      	movs	r3, #23
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	2202      	movs	r2, #2
 8003432:	701a      	strb	r2, [r3, #0]
	uint8_t state_f = 2;
 8003434:	2316      	movs	r3, #22
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]
	uint8_t value = 0x00;
 800343c:	2315      	movs	r3, #21
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
	unsigned long previous;
	uint8_t p_received = 0;
 8003444:	230f      	movs	r3, #15
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 0)
		my_printf("\r\n");
		my_printf("Starting 'getPacket'\r\n");
	#endif

	previous = millis();
 800344c:	f7fd fbee 	bl	8000c2c <millis>
 8003450:	0003      	movs	r3, r0
 8003452:	613b      	str	r3, [r7, #16]

	if( currentstate._modem == LORA )
 8003454:	4bab      	ldr	r3, [pc, #684]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 8003456:	7f1b      	ldrb	r3, [r3, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d15e      	bne.n	800351a <BSP_SX1272_getPacket+0xf6>
	{
		/// LoRa mode
		// read REG_IRQ_FLAGS
		value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 800345c:	2315      	movs	r3, #21
 800345e:	18fc      	adds	r4, r7, r3
 8003460:	2012      	movs	r0, #18
 8003462:	f001 f9eb 	bl	800483c <BSP_SX1272_Read>
 8003466:	0003      	movs	r3, r0
 8003468:	7023      	strb	r3, [r4, #0]

		// Wait until the packet is received (RxDone flag) or the timeout expires
		while( (bitRead(value, 6) == 0) && (millis()-previous < (unsigned long)wait) )
 800346a:	e011      	b.n	8003490 <BSP_SX1272_getPacket+0x6c>
		{
			value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 800346c:	2315      	movs	r3, #21
 800346e:	18fc      	adds	r4, r7, r3
 8003470:	2012      	movs	r0, #18
 8003472:	f001 f9e3 	bl	800483c <BSP_SX1272_Read>
 8003476:	0003      	movs	r3, r0
 8003478:	7023      	strb	r3, [r4, #0]

			// Condition to avoid an overflow (DO NOT REMOVE)
			if( millis() < previous )
 800347a:	f7fd fbd7 	bl	8000c2c <millis>
 800347e:	0003      	movs	r3, r0
 8003480:	001a      	movs	r2, r3
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	429a      	cmp	r2, r3
 8003486:	d203      	bcs.n	8003490 <BSP_SX1272_getPacket+0x6c>
			{
				previous = millis();
 8003488:	f7fd fbd0 	bl	8000c2c <millis>
 800348c:	0003      	movs	r3, r0
 800348e:	613b      	str	r3, [r7, #16]
		while( (bitRead(value, 6) == 0) && (millis()-previous < (unsigned long)wait) )
 8003490:	2315      	movs	r3, #21
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	099b      	lsrs	r3, r3, #6
 8003498:	b2db      	uxtb	r3, r3
 800349a:	001a      	movs	r2, r3
 800349c:	2301      	movs	r3, #1
 800349e:	4013      	ands	r3, r2
 80034a0:	d108      	bne.n	80034b4 <BSP_SX1272_getPacket+0x90>
 80034a2:	f7fd fbc3 	bl	8000c2c <millis>
 80034a6:	0003      	movs	r3, r0
 80034a8:	001a      	movs	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad2      	subs	r2, r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d3db      	bcc.n	800346c <BSP_SX1272_getPacket+0x48>
			}
		}

		// Check if 'RxDone' is 1 and 'PayloadCrcError' is correct
		if( (bitRead(value, 6) == 1) && (bitRead(value, 5) == 0) )
 80034b4:	2315      	movs	r3, #21
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	001a      	movs	r2, r3
 80034c0:	2301      	movs	r3, #1
 80034c2:	4013      	ands	r3, r2
 80034c4:	d010      	beq.n	80034e8 <BSP_SX1272_getPacket+0xc4>
 80034c6:	2315      	movs	r3, #21
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	001a      	movs	r2, r3
 80034d2:	2301      	movs	r3, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	d107      	bne.n	80034e8 <BSP_SX1272_getPacket+0xc4>
		{
			// packet received & CRC correct
			p_received = 1;	// packet correctly received
 80034d8:	230f      	movs	r3, #15
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	2201      	movs	r2, #1
 80034de:	701a      	strb	r2, [r3, #0]
			currentstate._reception = CORRECT_PACKET;
 80034e0:	4b88      	ldr	r3, [pc, #544]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	761a      	strb	r2, [r3, #24]
 80034e6:	e031      	b.n	800354c <BSP_SX1272_getPacket+0x128>
				#if (SX1272_debug_mode > 0)
					my_printf("NOT 'CRC_ON' enabled\r\n");
				#endif
			}

			if( (bitRead(value, 5) == 0) && (currentstate._CRC == CRC_ON) )
 80034e8:	2315      	movs	r3, #21
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	095b      	lsrs	r3, r3, #5
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	001a      	movs	r2, r3
 80034f4:	2301      	movs	r3, #1
 80034f6:	4013      	ands	r3, r2
 80034f8:	d107      	bne.n	800350a <BSP_SX1272_getPacket+0xe6>
 80034fa:	4b82      	ldr	r3, [pc, #520]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80034fc:	7d5b      	ldrb	r3, [r3, #21]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d103      	bne.n	800350a <BSP_SX1272_getPacket+0xe6>
			{
				// CRC is correct
				currentstate._reception = CORRECT_PACKET;
 8003502:	4b80      	ldr	r3, [pc, #512]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 8003504:	2200      	movs	r2, #0
 8003506:	761a      	strb	r2, [r3, #24]
 8003508:	e020      	b.n	800354c <BSP_SX1272_getPacket+0x128>
			}
			else
			{
				// CRC incorrect
				currentstate._reception = INCORRECT_PACKET;
 800350a:	4b7e      	ldr	r3, [pc, #504]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 800350c:	2201      	movs	r2, #1
 800350e:	761a      	strb	r2, [r3, #24]
				state = 3;
 8003510:	2317      	movs	r3, #23
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2203      	movs	r2, #3
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e018      	b.n	800354c <BSP_SX1272_getPacket+0x128>

	}
	else
	{
		/// FSK mode
		value = BSP_SX1272_Read(REG_IRQ_FLAGS2);
 800351a:	2315      	movs	r3, #21
 800351c:	18fc      	adds	r4, r7, r3
 800351e:	203f      	movs	r0, #63	; 0x3f
 8003520:	f001 f98c 	bl	800483c <BSP_SX1272_Read>
 8003524:	0003      	movs	r3, r0
 8003526:	7023      	strb	r3, [r4, #0]
    currentstate._reception = CORRECT_PACKET;
 8003528:	4b76      	ldr	r3, [pc, #472]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 800352a:	2200      	movs	r2, #0
 800352c:	761a      	strb	r2, [r3, #24]
    p_received = 1;
 800352e:	230f      	movs	r3, #15
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2201      	movs	r2, #1
 8003534:	701a      	strb	r2, [r3, #0]

    BSP_SX1272_getRSSI();
 8003536:	f7ff f9f3 	bl	8002920 <BSP_SX1272_getRSSI>
    //my_printf("RSSI: ");
    //my_printf(currentstate._RSSI, DEC);

    BSP_DELAY_ms(500);// laid !
 800353a:	23fa      	movs	r3, #250	; 0xfa
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	0018      	movs	r0, r3
 8003540:	f001 fa00 	bl	8004944 <BSP_DELAY_ms>
				my_printf("\r\n");
			#endif
		}
*/

		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);	// Setting standby FSK mode
 8003544:	2101      	movs	r1, #1
 8003546:	2001      	movs	r0, #1
 8003548:	f001 f9a8 	bl	800489c <BSP_SX1272_Write>
	}

	/* If a new packet was received correctly, now the information must be
	 * filled inside the structures of the class
	 */
	if( p_received == 1 )
 800354c:	230f      	movs	r3, #15
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d000      	beq.n	8003558 <BSP_SX1272_getPacket+0x134>
 8003556:	e0a1      	b.n	800369c <BSP_SX1272_getPacket+0x278>
	{
		// Store the packet
		if( currentstate._modem == LORA )
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 800355a:	7f1b      	ldrb	r3, [r3, #28]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10d      	bne.n	800357c <BSP_SX1272_getPacket+0x158>
		{
			/// LoRa
			// Setting address pointer in FIFO data buffer
			BSP_SX1272_Write(REG_FIFO_ADDR_PTR, 0x00);
 8003560:	2100      	movs	r1, #0
 8003562:	200d      	movs	r0, #13
 8003564:	f001 f99a 	bl	800489c <BSP_SX1272_Write>
			// Storing first uint8_t of the received packet
			currentstate.packet_received.dst = BSP_SX1272_Read(REG_FIFO);
 8003568:	2000      	movs	r0, #0
 800356a:	f001 f967 	bl	800483c <BSP_SX1272_Read>
 800356e:	0003      	movs	r3, r0
 8003570:	0019      	movs	r1, r3
 8003572:	4a64      	ldr	r2, [pc, #400]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 8003574:	231e      	movs	r3, #30
 8003576:	33ff      	adds	r3, #255	; 0xff
 8003578:	54d1      	strb	r1, [r2, r3]
 800357a:	e028      	b.n	80035ce <BSP_SX1272_getPacket+0x1aa>
		}
		else
		{
			/// FSK
			value = BSP_SX1272_Read(REG_PACKET_CONFIG1);
 800357c:	2315      	movs	r3, #21
 800357e:	18fc      	adds	r4, r7, r3
 8003580:	2030      	movs	r0, #48	; 0x30
 8003582:	f001 f95b 	bl	800483c <BSP_SX1272_Read>
 8003586:	0003      	movs	r3, r0
 8003588:	7023      	strb	r3, [r4, #0]
			if( (bitRead(value, 2) == 0) && (bitRead(value, 1) == 0) )
 800358a:	2315      	movs	r3, #21
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	001a      	movs	r2, r3
 8003596:	2301      	movs	r3, #1
 8003598:	4013      	ands	r3, r2
 800359a:	d112      	bne.n	80035c2 <BSP_SX1272_getPacket+0x19e>
 800359c:	2315      	movs	r3, #21
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	001a      	movs	r2, r3
 80035a8:	2301      	movs	r3, #1
 80035aa:	4013      	ands	r3, r2
 80035ac:	d109      	bne.n	80035c2 <BSP_SX1272_getPacket+0x19e>
			{
				// Storing first uint8_t of the received packet
				currentstate.packet_received.dst = BSP_SX1272_Read(REG_FIFO);
 80035ae:	2000      	movs	r0, #0
 80035b0:	f001 f944 	bl	800483c <BSP_SX1272_Read>
 80035b4:	0003      	movs	r3, r0
 80035b6:	0019      	movs	r1, r3
 80035b8:	4a52      	ldr	r2, [pc, #328]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80035ba:	231e      	movs	r3, #30
 80035bc:	33ff      	adds	r3, #255	; 0xff
 80035be:	54d1      	strb	r1, [r2, r3]
 80035c0:	e005      	b.n	80035ce <BSP_SX1272_getPacket+0x1aa>
			}
			else
			{
				// Storing first uint8_t of the received packet
				currentstate.packet_received.dst = currentstate._destination;
 80035c2:	4b50      	ldr	r3, [pc, #320]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80035c4:	7d99      	ldrb	r1, [r3, #22]
 80035c6:	4a4f      	ldr	r2, [pc, #316]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80035c8:	231e      	movs	r3, #30
 80035ca:	33ff      	adds	r3, #255	; 0xff
 80035cc:	54d1      	strb	r1, [r2, r3]
		}

		// Reading second uint8_t of the received packet
		// Reading third uint8_t of the received packet
		// Reading fourth uint8_t of the received packet
		currentstate.packet_received.src = BSP_SX1272_Read(REG_FIFO);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f001 f934 	bl	800483c <BSP_SX1272_Read>
 80035d4:	0003      	movs	r3, r0
 80035d6:	0019      	movs	r1, r3
 80035d8:	4a4a      	ldr	r2, [pc, #296]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80035da:	238f      	movs	r3, #143	; 0x8f
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	54d1      	strb	r1, [r2, r3]
		currentstate.packet_received.packnum = BSP_SX1272_Read(REG_FIFO);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f001 f92b 	bl	800483c <BSP_SX1272_Read>
 80035e6:	0003      	movs	r3, r0
 80035e8:	0019      	movs	r1, r3
 80035ea:	4a46      	ldr	r2, [pc, #280]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80035ec:	2320      	movs	r3, #32
 80035ee:	33ff      	adds	r3, #255	; 0xff
 80035f0:	54d1      	strb	r1, [r2, r3]
		currentstate.packet_received.length = BSP_SX1272_Read(REG_FIFO);
 80035f2:	2000      	movs	r0, #0
 80035f4:	f001 f922 	bl	800483c <BSP_SX1272_Read>
 80035f8:	0003      	movs	r3, r0
 80035fa:	0019      	movs	r1, r3
 80035fc:	4a41      	ldr	r2, [pc, #260]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80035fe:	2390      	movs	r3, #144	; 0x90
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	54d1      	strb	r1, [r2, r3]

		// calculate the payload length
		if( currentstate._modem == LORA )
 8003604:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 8003606:	7f1b      	ldrb	r3, [r3, #28]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d109      	bne.n	8003620 <BSP_SX1272_getPacket+0x1fc>
		{
			currentstate._payloadlength = currentstate.packet_received.length - OFFSET_PAYLOADLENGTH;
 800360c:	4a3d      	ldr	r2, [pc, #244]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 800360e:	2390      	movs	r3, #144	; 0x90
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b05      	subs	r3, #5
 8003618:	b29a      	uxth	r2, r3
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 800361c:	821a      	strh	r2, [r3, #16]
 800361e:	e016      	b.n	800364e <BSP_SX1272_getPacket+0x22a>
		}
   else
   {
    if(currentstate.packet_received.length>OFFSET_PAYLOADLENGTH)
 8003620:	4a38      	ldr	r2, [pc, #224]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 8003622:	2390      	movs	r3, #144	; 0x90
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	2b05      	cmp	r3, #5
 800362a:	d909      	bls.n	8003640 <BSP_SX1272_getPacket+0x21c>
      currentstate._payloadlength = currentstate.packet_received.length - OFFSET_PAYLOADLENGTH;
 800362c:	4a35      	ldr	r2, [pc, #212]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 800362e:	2390      	movs	r3, #144	; 0x90
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	5cd3      	ldrb	r3, [r2, r3]
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b05      	subs	r3, #5
 8003638:	b29a      	uxth	r2, r3
 800363a:	4b32      	ldr	r3, [pc, #200]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 800363c:	821a      	strh	r2, [r3, #16]
 800363e:	e006      	b.n	800364e <BSP_SX1272_getPacket+0x22a>
    else
      currentstate._payloadlength=currentstate.packet_received.length;
 8003640:	4a30      	ldr	r2, [pc, #192]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 8003642:	2390      	movs	r3, #144	; 0x90
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	b29a      	uxth	r2, r3
 800364a:	4b2e      	ldr	r3, [pc, #184]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 800364c:	821a      	strh	r2, [r3, #16]
			#endif
		}
		else
		{
			// Store payload in 'data'
			for(unsigned int i = 0; i < currentstate._payloadlength; i++)
 800364e:	2300      	movs	r3, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	e00f      	b.n	8003674 <BSP_SX1272_getPacket+0x250>
			{
				currentstate.packet_received.data[i] = BSP_SX1272_Read(REG_FIFO);
 8003654:	2000      	movs	r0, #0
 8003656:	f001 f8f1 	bl	800483c <BSP_SX1272_Read>
 800365a:	0003      	movs	r3, r0
 800365c:	0018      	movs	r0, r3
 800365e:	4929      	ldr	r1, [pc, #164]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 8003660:	2322      	movs	r3, #34	; 0x22
 8003662:	33ff      	adds	r3, #255	; 0xff
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	188a      	adds	r2, r1, r2
 8003668:	18d3      	adds	r3, r2, r3
 800366a:	1c02      	adds	r2, r0, #0
 800366c:	701a      	strb	r2, [r3, #0]
			for(unsigned int i = 0; i < currentstate._payloadlength; i++)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3301      	adds	r3, #1
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	4b23      	ldr	r3, [pc, #140]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 8003676:	8a1b      	ldrh	r3, [r3, #16]
 8003678:	001a      	movs	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	d8e9      	bhi.n	8003654 <BSP_SX1272_getPacket+0x230>
			}
			// Store 'retry'
			currentstate.packet_received.retry = BSP_SX1272_Read(REG_FIFO);
 8003680:	2000      	movs	r0, #0
 8003682:	f001 f8db 	bl	800483c <BSP_SX1272_Read>
 8003686:	0003      	movs	r3, r0
 8003688:	0019      	movs	r1, r3
 800368a:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 800368c:	2387      	movs	r3, #135	; 0x87
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	54d1      	strb	r1, [r2, r3]
				}
				my_printf("%d",currentstate.packet_received.retry);			// Printing number retry
				my_printf(" ##\r\n");
				my_printf("\r\n");
			#endif
			state_f = 0;
 8003692:	2316      	movs	r3, #22
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e018      	b.n	80036ce <BSP_SX1272_getPacket+0x2aa>
		}
	}
	else
	{
		// if packet was NOT received
		state_f = 1;
 800369c:	2316      	movs	r3, #22
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
		if( (currentstate._reception == INCORRECT_PACKET) && (currentstate._retries < currentstate._maxRetries) && (state != 3) )
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80036a6:	7e1b      	ldrb	r3, [r3, #24]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d110      	bne.n	80036ce <BSP_SX1272_getPacket+0x2aa>
 80036ac:	4b15      	ldr	r3, [pc, #84]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80036ae:	7e5a      	ldrb	r2, [r3, #25]
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80036b2:	7e9b      	ldrb	r3, [r3, #26]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d20a      	bcs.n	80036ce <BSP_SX1272_getPacket+0x2aa>
 80036b8:	2317      	movs	r3, #23
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d005      	beq.n	80036ce <BSP_SX1272_getPacket+0x2aa>
		{
			currentstate._retries++;
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80036c4:	7e5b      	ldrb	r3, [r3, #25]
 80036c6:	3301      	adds	r3, #1
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80036cc:	765a      	strb	r2, [r3, #25]
			#endif
		}
	}

	// Setting address pointer in FIFO data buffer to 0x00 again
	if( currentstate._modem == LORA )
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <BSP_SX1272_getPacket+0x2e0>)
 80036d0:	7f1b      	ldrb	r3, [r3, #28]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d103      	bne.n	80036de <BSP_SX1272_getPacket+0x2ba>
	{
		BSP_SX1272_Write(REG_FIFO_ADDR_PTR, 0x00);
 80036d6:	2100      	movs	r1, #0
 80036d8:	200d      	movs	r0, #13
 80036da:	f001 f8df 	bl	800489c <BSP_SX1272_Write>
	}

	// Initializing flags
	BSP_SX1272_clearFlags();
 80036de:	f7fd fb3d 	bl	8000d5c <BSP_SX1272_clearFlags>

	if( wait > MAX_WAIT )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a08      	ldr	r2, [pc, #32]	; (8003708 <BSP_SX1272_getPacket+0x2e4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d903      	bls.n	80036f2 <BSP_SX1272_getPacket+0x2ce>
	{
		state_f = -1;
 80036ea:	2316      	movs	r3, #22
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	22ff      	movs	r2, #255	; 0xff
 80036f0:	701a      	strb	r2, [r3, #0]
			my_printf("** The timeout must be smaller than 12.5 seconds **\r\n");
			my_printf("\r\n");
		#endif
	}

	return state_f;
 80036f2:	2316      	movs	r3, #22
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	b25b      	sxtb	r3, r3
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b007      	add	sp, #28
 8003700:	bd90      	pop	{r4, r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	200000d4 	.word	0x200000d4
 8003708:	00002ee0 	.word	0x00002ee0

0800370c <BSP_SX1272_setDestination>:
   state = 0  --> The command has been executed with no errors
 Parameters:
   dest: destination value of the packet sent.
*/
int8_t BSP_SX1272_setDestination(uint8_t dest)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	0002      	movs	r2, r0
 8003714:	1dfb      	adds	r3, r7, #7
 8003716:	701a      	strb	r2, [r3, #0]
	int8_t state = 2;
 8003718:	230f      	movs	r3, #15
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2202      	movs	r2, #2
 800371e:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setDestination'\r\n");
	#endif

	state = 1;
 8003720:	230f      	movs	r3, #15
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
	currentstate._destination = dest; // Storing destination in a global variable
 8003728:	4b10      	ldr	r3, [pc, #64]	; (800376c <BSP_SX1272_setDestination+0x60>)
 800372a:	1dfa      	adds	r2, r7, #7
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	759a      	strb	r2, [r3, #22]
	currentstate.packet_sent.dst = dest;	 // Setting destination in packet structure
 8003730:	4b0e      	ldr	r3, [pc, #56]	; (800376c <BSP_SX1272_setDestination+0x60>)
 8003732:	1dfa      	adds	r2, r7, #7
 8003734:	7812      	ldrb	r2, [r2, #0]
 8003736:	775a      	strb	r2, [r3, #29]
	currentstate.packet_sent.src = currentstate._nodeAddress; // Setting source in packet structure
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <BSP_SX1272_setDestination+0x60>)
 800373a:	7c9a      	ldrb	r2, [r3, #18]
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <BSP_SX1272_setDestination+0x60>)
 800373e:	779a      	strb	r2, [r3, #30]
	currentstate.packet_sent.packnum = currentstate._packetNumber;	// Setting packet number in packet structure
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <BSP_SX1272_setDestination+0x60>)
 8003742:	7dda      	ldrb	r2, [r3, #23]
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <BSP_SX1272_setDestination+0x60>)
 8003746:	77da      	strb	r2, [r3, #31]
	currentstate._packetNumber++;
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <BSP_SX1272_setDestination+0x60>)
 800374a:	7ddb      	ldrb	r3, [r3, #23]
 800374c:	3301      	adds	r3, #1
 800374e:	b2da      	uxtb	r2, r3
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <BSP_SX1272_setDestination+0x60>)
 8003752:	75da      	strb	r2, [r3, #23]
	state = 0;
 8003754:	230f      	movs	r3, #15
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
		my_printf("## Packet number ");
		my_printf("%d",currentstate.packet_sent.packnum);
		my_printf(" successfully set ##\r\n");
		my_printf("\r\n");
	#endif
	return state;
 800375c:	230f      	movs	r3, #15
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b25b      	sxtb	r3, r3
}
 8003764:	0018      	movs	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}
 800376c:	200000d4 	.word	0x200000d4

08003770 <BSP_SX1272_setTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setTimeout()
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
	uint8_t state = 2;
 8003776:	1dfb      	adds	r3, r7, #7
 8003778:	2202      	movs	r2, #2
 800377a:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setTimeout'\r\n");
	#endif

	state = 1;
 800377c:	1dfb      	adds	r3, r7, #7
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
	if( currentstate._modem == LORA )
 8003782:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <BSP_SX1272_setTimeout+0xc0>)
 8003784:	7f1b      	ldrb	r3, [r3, #28]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d143      	bne.n	8003812 <BSP_SX1272_setTimeout+0xa2>
	{
		// calculate 'delay'
		delay = ((0.1*currentstate._sendTime) + 1);
 800378a:	4a29      	ldr	r2, [pc, #164]	; (8003830 <BSP_SX1272_setTimeout+0xc0>)
 800378c:	23c9      	movs	r3, #201	; 0xc9
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	5ad3      	ldrh	r3, [r2, r3]
 8003792:	0018      	movs	r0, r3
 8003794:	f003 ff00 	bl	8007598 <__aeabi_i2d>
 8003798:	4a26      	ldr	r2, [pc, #152]	; (8003834 <BSP_SX1272_setTimeout+0xc4>)
 800379a:	4b27      	ldr	r3, [pc, #156]	; (8003838 <BSP_SX1272_setTimeout+0xc8>)
 800379c:	f003 f912 	bl	80069c4 <__aeabi_dmul>
 80037a0:	0003      	movs	r3, r0
 80037a2:	000c      	movs	r4, r1
 80037a4:	0018      	movs	r0, r3
 80037a6:	0021      	movs	r1, r4
 80037a8:	2200      	movs	r2, #0
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <BSP_SX1272_setTimeout+0xcc>)
 80037ac:	f002 f9c6 	bl	8005b3c <__aeabi_dadd>
 80037b0:	0003      	movs	r3, r0
 80037b2:	000c      	movs	r4, r1
 80037b4:	001a      	movs	r2, r3
 80037b6:	0023      	movs	r3, r4
 80037b8:	1d3c      	adds	r4, r7, #4
 80037ba:	0010      	movs	r0, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	f001 fbf3 	bl	8004fa8 <__aeabi_d2uiz>
 80037c2:	0003      	movs	r3, r0
 80037c4:	8023      	strh	r3, [r4, #0]

		float Tpacket = BSP_SX1272_timeOnAir(currentstate._payloadlength);
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <BSP_SX1272_setTimeout+0xc0>)
 80037c8:	8a1b      	ldrh	r3, [r3, #16]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f83a 	bl	8003844 <BSP_SX1272_timeOnAir>
 80037d0:	1c03      	adds	r3, r0, #0
 80037d2:	603b      	str	r3, [r7, #0]

		// calculate final send/BSP_SX1272_receive timeout adding an offset and a random value
		currentstate._sendTime = (uint16_t) Tpacket + (rand()%delay) + 1000;
 80037d4:	6838      	ldr	r0, [r7, #0]
 80037d6:	f001 fbcf 	bl	8004f78 <__aeabi_f2uiz>
 80037da:	0003      	movs	r3, r0
 80037dc:	b29c      	uxth	r4, r3
 80037de:	f004 f8ab 	bl	8007938 <rand>
 80037e2:	0002      	movs	r2, r0
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	0019      	movs	r1, r3
 80037ea:	0010      	movs	r0, r2
 80037ec:	f001 fb1c 	bl	8004e28 <__aeabi_idivmod>
 80037f0:	000b      	movs	r3, r1
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	18e3      	adds	r3, r4, r3
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	22fa      	movs	r2, #250	; 0xfa
 80037fa:	0092      	lsls	r2, r2, #2
 80037fc:	4694      	mov	ip, r2
 80037fe:	4463      	add	r3, ip
 8003800:	b299      	uxth	r1, r3
 8003802:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <BSP_SX1272_setTimeout+0xc0>)
 8003804:	23c9      	movs	r3, #201	; 0xc9
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	52d1      	strh	r1, [r2, r3]
			my_printf("Tpacket:");
			my_printf(Tpacket);
		#endif

		// update state
		state = 0;
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e007      	b.n	8003822 <BSP_SX1272_setTimeout+0xb2>
	}
	else
	{
		// update state
		currentstate._sendTime = MAX_TIMEOUT;
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <BSP_SX1272_setTimeout+0xc0>)
 8003814:	23c9      	movs	r3, #201	; 0xc9
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4909      	ldr	r1, [pc, #36]	; (8003840 <BSP_SX1272_setTimeout+0xd0>)
 800381a:	52d1      	strh	r1, [r2, r3]

		// update state
		state = 0;
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("Timeout to send/BSP_SX1272_receive is: ");
		my_printf("%d",currentstate._sendTime);
	#endif

	return state;
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	781b      	ldrb	r3, [r3, #0]
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b003      	add	sp, #12
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	200000d4 	.word	0x200000d4
 8003834:	9999999a 	.word	0x9999999a
 8003838:	3fb99999 	.word	0x3fb99999
 800383c:	3ff00000 	.word	0x3ff00000
 8003840:	00002710 	.word	0x00002710

08003844 <BSP_SX1272_timeOnAir>:
 Function: It gets the theoretical value of the time-on-air of the packet
 Link: http://www.semtech.com/images/datasheet/sx1272.pdf
 Returns: Float that determines the time-on-air
*/
float BSP_SX1272_timeOnAir( uint16_t payloadlength )
{
 8003844:	b5b0      	push	{r4, r5, r7, lr}
 8003846:	b092      	sub	sp, #72	; 0x48
 8003848:	af00      	add	r7, sp, #0
 800384a:	0002      	movs	r2, r0
 800384c:	230e      	movs	r3, #14
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	801a      	strh	r2, [r3, #0]
	float BW;
	float DE = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	643b      	str	r3, [r7, #64]	; 0x40
	float SF = currentstate._spreadingFactor;
 8003856:	4b83      	ldr	r3, [pc, #524]	; (8003a64 <BSP_SX1272_timeOnAir+0x220>)
 8003858:	78db      	ldrb	r3, [r3, #3]
 800385a:	0018      	movs	r0, r3
 800385c:	f002 f928 	bl	8005ab0 <__aeabi_ui2f>
 8003860:	1c03      	adds	r3, r0, #0
 8003862:	63bb      	str	r3, [r7, #56]	; 0x38
	float PL = payloadlength + OFFSET_PAYLOADLENGTH;
 8003864:	230e      	movs	r3, #14
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	3305      	adds	r3, #5
 800386c:	0018      	movs	r0, r3
 800386e:	f002 f8cf 	bl	8005a10 <__aeabi_i2f>
 8003872:	1c03      	adds	r3, r0, #0
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
	float H = currentstate._header;
 8003876:	4b7b      	ldr	r3, [pc, #492]	; (8003a64 <BSP_SX1272_timeOnAir+0x220>)
 8003878:	7cdb      	ldrb	r3, [r3, #19]
 800387a:	0018      	movs	r0, r3
 800387c:	f002 f918 	bl	8005ab0 <__aeabi_ui2f>
 8003880:	1c03      	adds	r3, r0, #0
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
	float CR = currentstate._codingRate;
 8003884:	4b77      	ldr	r3, [pc, #476]	; (8003a64 <BSP_SX1272_timeOnAir+0x220>)
 8003886:	789b      	ldrb	r3, [r3, #2]
 8003888:	0018      	movs	r0, r3
 800388a:	f002 f911 	bl	8005ab0 <__aeabi_ui2f>
 800388e:	1c03      	adds	r3, r0, #0
 8003890:	633b      	str	r3, [r7, #48]	; 0x30

	// Dara rate optimization enabled if SF is 11 or 12
	if( SF > 10) DE = 1.0;
 8003892:	4975      	ldr	r1, [pc, #468]	; (8003a68 <BSP_SX1272_timeOnAir+0x224>)
 8003894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003896:	f001 fb31 	bl	8004efc <__aeabi_fcmpgt>
 800389a:	1e03      	subs	r3, r0, #0
 800389c:	d003      	beq.n	80038a6 <BSP_SX1272_timeOnAir+0x62>
 800389e:	23fe      	movs	r3, #254	; 0xfe
 80038a0:	059b      	lsls	r3, r3, #22
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40
 80038a4:	e001      	b.n	80038aa <BSP_SX1272_timeOnAir+0x66>
	else DE = 0.0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	643b      	str	r3, [r7, #64]	; 0x40

	// payload correction
	if( payloadlength == 0 ) PL = 255;
 80038aa:	230e      	movs	r3, #14
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <BSP_SX1272_timeOnAir+0x74>
 80038b4:	4b6d      	ldr	r3, [pc, #436]	; (8003a6c <BSP_SX1272_timeOnAir+0x228>)
 80038b6:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Bandwidth value setting
	if( currentstate._bandwidth == BW_125 ) 		BW = 125.0;
 80038b8:	4b6a      	ldr	r3, [pc, #424]	; (8003a64 <BSP_SX1272_timeOnAir+0x220>)
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <BSP_SX1272_timeOnAir+0x82>
 80038c0:	4b6b      	ldr	r3, [pc, #428]	; (8003a70 <BSP_SX1272_timeOnAir+0x22c>)
 80038c2:	647b      	str	r3, [r7, #68]	; 0x44
 80038c4:	e00f      	b.n	80038e6 <BSP_SX1272_timeOnAir+0xa2>
	else if( currentstate._bandwidth == BW_250 ) BW = 250.0;
 80038c6:	4b67      	ldr	r3, [pc, #412]	; (8003a64 <BSP_SX1272_timeOnAir+0x220>)
 80038c8:	785b      	ldrb	r3, [r3, #1]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <BSP_SX1272_timeOnAir+0x90>
 80038ce:	4b69      	ldr	r3, [pc, #420]	; (8003a74 <BSP_SX1272_timeOnAir+0x230>)
 80038d0:	647b      	str	r3, [r7, #68]	; 0x44
 80038d2:	e008      	b.n	80038e6 <BSP_SX1272_timeOnAir+0xa2>
	else if( currentstate._bandwidth == BW_500 ) BW = 500.0;
 80038d4:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <BSP_SX1272_timeOnAir+0x220>)
 80038d6:	785b      	ldrb	r3, [r3, #1]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d102      	bne.n	80038e2 <BSP_SX1272_timeOnAir+0x9e>
 80038dc:	4b66      	ldr	r3, [pc, #408]	; (8003a78 <BSP_SX1272_timeOnAir+0x234>)
 80038de:	647b      	str	r3, [r7, #68]	; 0x44
 80038e0:	e001      	b.n	80038e6 <BSP_SX1272_timeOnAir+0xa2>
	else BW = 125.0;
 80038e2:	4b63      	ldr	r3, [pc, #396]	; (8003a70 <BSP_SX1272_timeOnAir+0x22c>)
 80038e4:	647b      	str	r3, [r7, #68]	; 0x44

	// Calculation steps:
	float Tsym = pow(2,SF)/(BW); // ms
 80038e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80038e8:	f003 fe98 	bl	800761c <__aeabi_f2d>
 80038ec:	0003      	movs	r3, r0
 80038ee:	000c      	movs	r4, r1
 80038f0:	2000      	movs	r0, #0
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	05c9      	lsls	r1, r1, #23
 80038f6:	001a      	movs	r2, r3
 80038f8:	0023      	movs	r3, r4
 80038fa:	f004 fa1f 	bl	8007d3c <pow>
 80038fe:	0004      	movs	r4, r0
 8003900:	000d      	movs	r5, r1
 8003902:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003904:	f003 fe8a 	bl	800761c <__aeabi_f2d>
 8003908:	0002      	movs	r2, r0
 800390a:	000b      	movs	r3, r1
 800390c:	0020      	movs	r0, r4
 800390e:	0029      	movs	r1, r5
 8003910:	f002 fc24 	bl	800615c <__aeabi_ddiv>
 8003914:	0003      	movs	r3, r0
 8003916:	000c      	movs	r4, r1
 8003918:	0018      	movs	r0, r3
 800391a:	0021      	movs	r1, r4
 800391c:	f003 fed0 	bl	80076c0 <__aeabi_d2f>
 8003920:	1c03      	adds	r3, r0, #0
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
	float Tpreamble = (8+4.25)*Tsym;// ms
 8003924:	4955      	ldr	r1, [pc, #340]	; (8003a7c <BSP_SX1272_timeOnAir+0x238>)
 8003926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003928:	f001 fd96 	bl	8005458 <__aeabi_fmul>
 800392c:	1c03      	adds	r3, r0, #0
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
	float argument1 = ceil( (8.0*PL-4.0*SF+28.0+16.0-20.0*H)/(4.0*(SF-2.0*DE)) )*(CR+4.0);
 8003930:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003932:	f003 fe73 	bl	800761c <__aeabi_f2d>
 8003936:	2200      	movs	r2, #0
 8003938:	4b51      	ldr	r3, [pc, #324]	; (8003a80 <BSP_SX1272_timeOnAir+0x23c>)
 800393a:	f003 f843 	bl	80069c4 <__aeabi_dmul>
 800393e:	0003      	movs	r3, r0
 8003940:	000c      	movs	r4, r1
 8003942:	0025      	movs	r5, r4
 8003944:	001c      	movs	r4, r3
 8003946:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003948:	f003 fe68 	bl	800761c <__aeabi_f2d>
 800394c:	2200      	movs	r2, #0
 800394e:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <BSP_SX1272_timeOnAir+0x240>)
 8003950:	f003 f838 	bl	80069c4 <__aeabi_dmul>
 8003954:	0002      	movs	r2, r0
 8003956:	000b      	movs	r3, r1
 8003958:	0020      	movs	r0, r4
 800395a:	0029      	movs	r1, r5
 800395c:	f003 fab2 	bl	8006ec4 <__aeabi_dsub>
 8003960:	0003      	movs	r3, r0
 8003962:	000c      	movs	r4, r1
 8003964:	0018      	movs	r0, r3
 8003966:	0021      	movs	r1, r4
 8003968:	2200      	movs	r2, #0
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <BSP_SX1272_timeOnAir+0x244>)
 800396c:	f002 f8e6 	bl	8005b3c <__aeabi_dadd>
 8003970:	0003      	movs	r3, r0
 8003972:	000c      	movs	r4, r1
 8003974:	0018      	movs	r0, r3
 8003976:	0021      	movs	r1, r4
 8003978:	2200      	movs	r2, #0
 800397a:	4b44      	ldr	r3, [pc, #272]	; (8003a8c <BSP_SX1272_timeOnAir+0x248>)
 800397c:	f002 f8de 	bl	8005b3c <__aeabi_dadd>
 8003980:	0003      	movs	r3, r0
 8003982:	000c      	movs	r4, r1
 8003984:	0025      	movs	r5, r4
 8003986:	001c      	movs	r4, r3
 8003988:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800398a:	f003 fe47 	bl	800761c <__aeabi_f2d>
 800398e:	2200      	movs	r2, #0
 8003990:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <BSP_SX1272_timeOnAir+0x24c>)
 8003992:	f003 f817 	bl	80069c4 <__aeabi_dmul>
 8003996:	0002      	movs	r2, r0
 8003998:	000b      	movs	r3, r1
 800399a:	0020      	movs	r0, r4
 800399c:	0029      	movs	r1, r5
 800399e:	f003 fa91 	bl	8006ec4 <__aeabi_dsub>
 80039a2:	0003      	movs	r3, r0
 80039a4:	000c      	movs	r4, r1
 80039a6:	0025      	movs	r5, r4
 80039a8:	001c      	movs	r4, r3
 80039aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039ac:	f003 fe36 	bl	800761c <__aeabi_f2d>
 80039b0:	6038      	str	r0, [r7, #0]
 80039b2:	6079      	str	r1, [r7, #4]
 80039b4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80039b6:	f003 fe31 	bl	800761c <__aeabi_f2d>
 80039ba:	0002      	movs	r2, r0
 80039bc:	000b      	movs	r3, r1
 80039be:	f002 f8bd 	bl	8005b3c <__aeabi_dadd>
 80039c2:	0002      	movs	r2, r0
 80039c4:	000b      	movs	r3, r1
 80039c6:	6838      	ldr	r0, [r7, #0]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	f003 fa7b 	bl	8006ec4 <__aeabi_dsub>
 80039ce:	0002      	movs	r2, r0
 80039d0:	000b      	movs	r3, r1
 80039d2:	0010      	movs	r0, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	2200      	movs	r2, #0
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <BSP_SX1272_timeOnAir+0x240>)
 80039da:	f002 fff3 	bl	80069c4 <__aeabi_dmul>
 80039de:	0002      	movs	r2, r0
 80039e0:	000b      	movs	r3, r1
 80039e2:	0020      	movs	r0, r4
 80039e4:	0029      	movs	r1, r5
 80039e6:	f002 fbb9 	bl	800615c <__aeabi_ddiv>
 80039ea:	0003      	movs	r3, r0
 80039ec:	000c      	movs	r4, r1
 80039ee:	0018      	movs	r0, r3
 80039f0:	0021      	movs	r1, r4
 80039f2:	f004 f921 	bl	8007c38 <ceil>
 80039f6:	0004      	movs	r4, r0
 80039f8:	000d      	movs	r5, r1
 80039fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039fc:	f003 fe0e 	bl	800761c <__aeabi_f2d>
 8003a00:	2200      	movs	r2, #0
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <BSP_SX1272_timeOnAir+0x240>)
 8003a04:	f002 f89a 	bl	8005b3c <__aeabi_dadd>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	000b      	movs	r3, r1
 8003a0c:	0020      	movs	r0, r4
 8003a0e:	0029      	movs	r1, r5
 8003a10:	f002 ffd8 	bl	80069c4 <__aeabi_dmul>
 8003a14:	0003      	movs	r3, r0
 8003a16:	000c      	movs	r4, r1
 8003a18:	0018      	movs	r0, r3
 8003a1a:	0021      	movs	r1, r4
 8003a1c:	f003 fe50 	bl	80076c0 <__aeabi_d2f>
 8003a20:	1c03      	adds	r3, r0, #0
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
	float argument2 = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	623b      	str	r3, [r7, #32]
	float payloadSymbNb = 8 + max( argument1, argument2);
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1c11      	adds	r1, r2, #0
 8003a2e:	1c18      	adds	r0, r3, #0
 8003a30:	f7fd f904 	bl	8000c3c <max>
 8003a34:	0003      	movs	r3, r0
 8003a36:	3308      	adds	r3, #8
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f001 ffe9 	bl	8005a10 <__aeabi_i2f>
 8003a3e:	1c03      	adds	r3, r0, #0
 8003a40:	61fb      	str	r3, [r7, #28]
	float Tpayload = payloadSymbNb * Tsym;
 8003a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a44:	69f8      	ldr	r0, [r7, #28]
 8003a46:	f001 fd07 	bl	8005458 <__aeabi_fmul>
 8003a4a:	1c03      	adds	r3, r0, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
	float Tpacket = Tpreamble + Tpayload;
 8003a4e:	69b9      	ldr	r1, [r7, #24]
 8003a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a52:	f001 fac7 	bl	8004fe4 <__aeabi_fadd>
 8003a56:	1c03      	adds	r3, r0, #0
 8003a58:	617b      	str	r3, [r7, #20]

	return Tpacket;
 8003a5a:	697b      	ldr	r3, [r7, #20]
}
 8003a5c:	1c18      	adds	r0, r3, #0
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b012      	add	sp, #72	; 0x48
 8003a62:	bdb0      	pop	{r4, r5, r7, pc}
 8003a64:	200000d4 	.word	0x200000d4
 8003a68:	41200000 	.word	0x41200000
 8003a6c:	437f0000 	.word	0x437f0000
 8003a70:	42fa0000 	.word	0x42fa0000
 8003a74:	437a0000 	.word	0x437a0000
 8003a78:	43fa0000 	.word	0x43fa0000
 8003a7c:	41440000 	.word	0x41440000
 8003a80:	40200000 	.word	0x40200000
 8003a84:	40100000 	.word	0x40100000
 8003a88:	403c0000 	.word	0x403c0000
 8003a8c:	40300000 	.word	0x40300000
 8003a90:	40340000 	.word	0x40340000

08003a94 <BSP_SX1272_setPayload>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setPayload(char *payload)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 8003a9c:	230b      	movs	r3, #11
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	701a      	strb	r2, [r3, #0]
	uint8_t state_f = 2;
 8003aa4:	230a      	movs	r3, #10
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'setPayload'\r\n");
	#endif

	state = 1;
 8003aac:	230b      	movs	r3, #11
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
	length16 = (uint16_t)strlen(payload);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f001 f83e 	bl	8004b38 <strlen>
 8003abc:	0002      	movs	r2, r0
 8003abe:	2308      	movs	r3, #8
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	801a      	strh	r2, [r3, #0]
	state = BSP_SX1272_truncPayload(length16);
 8003ac4:	230b      	movs	r3, #11
 8003ac6:	18fc      	adds	r4, r7, r3
 8003ac8:	2308      	movs	r3, #8
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f7ff f976 	bl	8002dc0 <BSP_SX1272_truncPayload>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	7023      	strb	r3, [r4, #0]
	if( state == 0 )
 8003ad8:	230b      	movs	r3, #11
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d117      	bne.n	8003b12 <BSP_SX1272_setPayload+0x7e>
	{
		// fill data field until the end of the string
		for(unsigned int i = 0; i < currentstate._payloadlength; i++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e00d      	b.n	8003b04 <BSP_SX1272_setPayload+0x70>
		{
			currentstate.packet_sent.data[i] = payload[i];
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	18d3      	adds	r3, r2, r3
 8003aee:	7818      	ldrb	r0, [r3, #0]
 8003af0:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <BSP_SX1272_setPayload+0xd0>)
 8003af2:	2121      	movs	r1, #33	; 0x21
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	18d3      	adds	r3, r2, r3
 8003af8:	185b      	adds	r3, r3, r1
 8003afa:	1c02      	adds	r2, r0, #0
 8003afc:	701a      	strb	r2, [r3, #0]
		for(unsigned int i = 0; i < currentstate._payloadlength; i++)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <BSP_SX1272_setPayload+0xd0>)
 8003b06:	8a1b      	ldrh	r3, [r3, #16]
 8003b08:	001a      	movs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d8eb      	bhi.n	8003ae8 <BSP_SX1272_setPayload+0x54>
 8003b10:	e005      	b.n	8003b1e <BSP_SX1272_setPayload+0x8a>
		}
	}
	else
	{
		state_f = state;
 8003b12:	230a      	movs	r3, #10
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	220b      	movs	r2, #11
 8003b18:	18ba      	adds	r2, r7, r2
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	701a      	strb	r2, [r3, #0]
	}

	// In the case of FSK mode, the max payload is more restrictive
	if( ( currentstate._modem == FSK ) && ( currentstate._payloadlength > MAX_PAYLOAD_FSK ) )
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <BSP_SX1272_setPayload+0xd0>)
 8003b20:	7f1b      	ldrb	r3, [r3, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <BSP_SX1272_setPayload+0xa8>
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <BSP_SX1272_setPayload+0xd0>)
 8003b28:	8a1b      	ldrh	r3, [r3, #16]
 8003b2a:	2b3c      	cmp	r3, #60	; 0x3c
 8003b2c:	d906      	bls.n	8003b3c <BSP_SX1272_setPayload+0xa8>
	{
		currentstate._payloadlength = MAX_PAYLOAD_FSK;
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <BSP_SX1272_setPayload+0xd0>)
 8003b30:	223c      	movs	r2, #60	; 0x3c
 8003b32:	821a      	strh	r2, [r3, #16]
		state = 1;
 8003b34:	230b      	movs	r3, #11
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	2201      	movs	r2, #1
 8003b3a:	701a      	strb	r2, [r3, #0]
		#endif
	}

	// Set length with the actual counter value
	// Setting packet length in packet structure
	state_f = BSP_SX1272_setPacketLength(currentstate._payloadlength + OFFSET_PAYLOADLENGTH);
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <BSP_SX1272_setPayload+0xd0>)
 8003b3e:	8a1b      	ldrh	r3, [r3, #16]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	3305      	adds	r3, #5
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7fe fdb4 	bl	80026b4 <BSP_SX1272_setPacketLength>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	001a      	movs	r2, r3
 8003b50:	230a      	movs	r3, #10
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	701a      	strb	r2, [r3, #0]
	return state_f;
 8003b56:	230a      	movs	r3, #10
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	781b      	ldrb	r3, [r3, #0]
}
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b005      	add	sp, #20
 8003b62:	bd90      	pop	{r4, r7, pc}
 8003b64:	200000d4 	.word	0x200000d4

08003b68 <BSP_SX1272_setPacket>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_setPacket(uint8_t dest, char *payload)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	0002      	movs	r2, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	1dfb      	adds	r3, r7, #7
 8003b74:	701a      	strb	r2, [r3, #0]
	int8_t state = 2;
 8003b76:	230f      	movs	r3, #15
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'setPacket'\r\n");
	#endif

	// Save the previous status
	st0 = BSP_SX1272_Read(REG_OP_MODE);
 8003b7e:	230b      	movs	r3, #11
 8003b80:	18fc      	adds	r4, r7, r3
 8003b82:	2001      	movs	r0, #1
 8003b84:	f000 fe5a 	bl	800483c <BSP_SX1272_Read>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	7023      	strb	r3, [r4, #0]
	// Initializing flags
	BSP_SX1272_clearFlags();
 8003b8c:	f7fd f8e6 	bl	8000d5c <BSP_SX1272_clearFlags>

	// Updating incorrect value
	currentstate._reception = CORRECT_PACKET;
 8003b90:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	761a      	strb	r2, [r3, #24]


	if (currentstate._retries == 0)
 8003b96:	4b49      	ldr	r3, [pc, #292]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003b98:	7e5b      	ldrb	r3, [r3, #25]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d118      	bne.n	8003bd0 <BSP_SX1272_setPacket+0x68>
	{
		// Updating these values only if it is the first try
		// Setting destination in packet structure
		state = BSP_SX1272_setDestination(dest);
 8003b9e:	230f      	movs	r3, #15
 8003ba0:	18fc      	adds	r4, r7, r3
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7ff fdb0 	bl	800370c <BSP_SX1272_setDestination>
 8003bac:	0003      	movs	r3, r0
 8003bae:	7023      	strb	r3, [r4, #0]
		if( state == 0 )
 8003bb0:	230f      	movs	r3, #15
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d11b      	bne.n	8003bf4 <BSP_SX1272_setPacket+0x8c>
		{
			state = BSP_SX1272_setPayload(payload);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f7ff ff68 	bl	8003a94 <BSP_SX1272_setPayload>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	230f      	movs	r3, #15
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e011      	b.n	8003bf4 <BSP_SX1272_setPacket+0x8c>
		}
	}
	else
	{
		state = BSP_SX1272_setPacketLength(currentstate._payloadlength + OFFSET_PAYLOADLENGTH);
 8003bd0:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003bd2:	8a1b      	ldrh	r3, [r3, #16]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	3305      	adds	r3, #5
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	220f      	movs	r2, #15
 8003bdc:	18bc      	adds	r4, r7, r2
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7fe fd68 	bl	80026b4 <BSP_SX1272_setPacketLength>
 8003be4:	0003      	movs	r3, r0
 8003be6:	7023      	strb	r3, [r4, #0]
		currentstate.packet_sent.retry = currentstate._retries;
 8003be8:	4b34      	ldr	r3, [pc, #208]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003bea:	7e59      	ldrb	r1, [r3, #25]
 8003bec:	4a33      	ldr	r2, [pc, #204]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003bee:	238e      	movs	r3, #142	; 0x8e
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	54d1      	strb	r1, [r2, r3]
			my_printf(" time **\r\n");
		#endif
	}

	// Setting address pointer in FIFO data buffer
	BSP_SX1272_Write(REG_FIFO_TX_BASE_ADDR, 0x00);
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	200e      	movs	r0, #14
 8003bf8:	f000 fe50 	bl	800489c <BSP_SX1272_Write>
	BSP_SX1272_Write(REG_FIFO_ADDR_PTR, 0x00);
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	200d      	movs	r0, #13
 8003c00:	f000 fe4c 	bl	800489c <BSP_SX1272_Write>
	if( state == 0 )
 8003c04:	230f      	movs	r3, #15
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b25b      	sxtb	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d147      	bne.n	8003ca0 <BSP_SX1272_setPacket+0x138>
	{
		state = 1;
 8003c10:	230f      	movs	r3, #15
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
		// Writing packet to send in FIFO
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.dst); 		// Writing the destination in FIFO
 8003c18:	4b28      	ldr	r3, [pc, #160]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003c1a:	7f5b      	ldrb	r3, [r3, #29]
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	2000      	movs	r0, #0
 8003c20:	f000 fe3c 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.src);		// Writing the source in FIFO
 8003c24:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003c26:	7f9b      	ldrb	r3, [r3, #30]
 8003c28:	0019      	movs	r1, r3
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	f000 fe36 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.packnum);	// Writing the packet number in FIFO
 8003c30:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003c32:	7fdb      	ldrb	r3, [r3, #31]
 8003c34:	0019      	movs	r1, r3
 8003c36:	2000      	movs	r0, #0
 8003c38:	f000 fe30 	bl	800489c <BSP_SX1272_Write>
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.length); 	// Writing the packet length in FIFO
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003c3e:	2220      	movs	r2, #32
 8003c40:	5c9b      	ldrb	r3, [r3, r2]
 8003c42:	0019      	movs	r1, r3
 8003c44:	2000      	movs	r0, #0
 8003c46:	f000 fe29 	bl	800489c <BSP_SX1272_Write>
		for( uint16_t i = 0; i < currentstate._payloadlength; i++)
 8003c4a:	230c      	movs	r3, #12
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	2200      	movs	r2, #0
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	e012      	b.n	8003c7a <BSP_SX1272_setPacket+0x112>
		{
			BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.data[i]);  // Writing the payload in FIFO
 8003c54:	230c      	movs	r3, #12
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	4a18      	ldr	r2, [pc, #96]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003c5c:	2121      	movs	r1, #33	; 0x21
 8003c5e:	18d3      	adds	r3, r2, r3
 8003c60:	185b      	adds	r3, r3, r1
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	0019      	movs	r1, r3
 8003c66:	2000      	movs	r0, #0
 8003c68:	f000 fe18 	bl	800489c <BSP_SX1272_Write>
		for( uint16_t i = 0; i < currentstate._payloadlength; i++)
 8003c6c:	230c      	movs	r3, #12
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	881a      	ldrh	r2, [r3, #0]
 8003c72:	230c      	movs	r3, #12
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	3201      	adds	r2, #1
 8003c78:	801a      	strh	r2, [r3, #0]
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003c7c:	8a1b      	ldrh	r3, [r3, #16]
 8003c7e:	220c      	movs	r2, #12
 8003c80:	18ba      	adds	r2, r7, r2
 8003c82:	8812      	ldrh	r2, [r2, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d3e5      	bcc.n	8003c54 <BSP_SX1272_setPacket+0xec>
		}
		BSP_SX1272_Write(REG_FIFO, currentstate.packet_sent.retry);		// Writing the number retry in FIFO
 8003c88:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <BSP_SX1272_setPacket+0x154>)
 8003c8a:	238e      	movs	r3, #142	; 0x8e
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	5cd3      	ldrb	r3, [r2, r3]
 8003c90:	0019      	movs	r1, r3
 8003c92:	2000      	movs	r0, #0
 8003c94:	f000 fe02 	bl	800489c <BSP_SX1272_Write>
		state = 0;
 8003c98:	230f      	movs	r3, #15
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
			}
			my_printf("%d",currentstate.packet_sent.retry);			// Printing retry number
			my_printf(" ##\r\n");
		#endif
	}
	BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 8003ca0:	230b      	movs	r3, #11
 8003ca2:	18fb      	adds	r3, r7, r3
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f000 fdf7 	bl	800489c <BSP_SX1272_Write>
	return state;
 8003cae:	230f      	movs	r3, #15
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	781b      	ldrb	r3, [r3, #0]
}
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b005      	add	sp, #20
 8003cba:	bd90      	pop	{r4, r7, pc}
 8003cbc:	200000d4 	.word	0x200000d4

08003cc0 <BSP_SX1272_sendWithMAXTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendWithMAXTimeout()
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	return BSP_SX1272_sendWithTimeout(MAX_TIMEOUT);
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <BSP_SX1272_sendWithMAXTimeout+0x14>)
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 f806 	bl	8003cd8 <BSP_SX1272_sendWithTimeout>
 8003ccc:	0003      	movs	r3, r0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	00002710 	.word	0x00002710

08003cd8 <BSP_SX1272_sendWithTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendWithTimeout(uint32_t wait)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 8003ce0:	230f      	movs	r3, #15
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	701a      	strb	r2, [r3, #0]
	uint8_t value = 0x00;
 8003ce8:	230e      	movs	r3, #14
 8003cea:	18fb      	adds	r3, r7, r3
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'sendWithTimeout'\r\n");
	#endif

	// wait to TxDone flag
	previous = millis();
 8003cf0:	f7fc ff9c 	bl	8000c2c <millis>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	60bb      	str	r3, [r7, #8]
	if( currentstate._modem == LORA )
 8003cf8:	4b42      	ldr	r3, [pc, #264]	; (8003e04 <BSP_SX1272_sendWithTimeout+0x12c>)
 8003cfa:	7f1b      	ldrb	r3, [r3, #28]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d136      	bne.n	8003d6e <BSP_SX1272_sendWithTimeout+0x96>
	{
		/// LoRa mode
		// Initializing flags
		BSP_SX1272_clearFlags();
 8003d00:	f7fd f82c 	bl	8000d5c <BSP_SX1272_clearFlags>
		// LORA mode - Tx
		BSP_SX1272_Write(REG_OP_MODE, LORA_TX_MODE);
 8003d04:	2183      	movs	r1, #131	; 0x83
 8003d06:	2001      	movs	r0, #1
 8003d08:	f000 fdc8 	bl	800489c <BSP_SX1272_Write>

		value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 8003d0c:	230e      	movs	r3, #14
 8003d0e:	18fc      	adds	r4, r7, r3
 8003d10:	2012      	movs	r0, #18
 8003d12:	f000 fd93 	bl	800483c <BSP_SX1272_Read>
 8003d16:	0003      	movs	r3, r0
 8003d18:	7023      	strb	r3, [r4, #0]

		// Wait until the packet is sent (TX Done flag) or the timeout expires
		while ((bitRead(value, 3) == 0) && (millis() - previous < wait))
 8003d1a:	e011      	b.n	8003d40 <BSP_SX1272_sendWithTimeout+0x68>
		{
			value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 8003d1c:	230e      	movs	r3, #14
 8003d1e:	18fc      	adds	r4, r7, r3
 8003d20:	2012      	movs	r0, #18
 8003d22:	f000 fd8b 	bl	800483c <BSP_SX1272_Read>
 8003d26:	0003      	movs	r3, r0
 8003d28:	7023      	strb	r3, [r4, #0]
			// Condition to avoid an overflow (DO NOT REMOVE)
			if( millis() < previous )
 8003d2a:	f7fc ff7f 	bl	8000c2c <millis>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	001a      	movs	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d203      	bcs.n	8003d40 <BSP_SX1272_sendWithTimeout+0x68>
			{
				previous = millis();
 8003d38:	f7fc ff78 	bl	8000c2c <millis>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	60bb      	str	r3, [r7, #8]
		while ((bitRead(value, 3) == 0) && (millis() - previous < wait))
 8003d40:	230e      	movs	r3, #14
 8003d42:	18fb      	adds	r3, r7, r3
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d108      	bne.n	8003d64 <BSP_SX1272_sendWithTimeout+0x8c>
 8003d52:	f7fc ff6b 	bl	8000c2c <millis>
 8003d56:	0003      	movs	r3, r0
 8003d58:	001a      	movs	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	1ad2      	subs	r2, r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3db      	bcc.n	8003d1c <BSP_SX1272_sendWithTimeout+0x44>
			}
		}
		state = 1;
 8003d64:	230f      	movs	r3, #15
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e033      	b.n	8003dd6 <BSP_SX1272_sendWithTimeout+0xfe>
	}
	else
	{
    // Initializing flags
		/// FSK mode
		BSP_SX1272_Write(REG_OP_MODE, FSK_TX_MODE);  // FSK mode - Tx
 8003d6e:	2103      	movs	r1, #3
 8003d70:	2001      	movs	r0, #1
 8003d72:	f000 fd93 	bl	800489c <BSP_SX1272_Write>

		value = BSP_SX1272_Read(REG_IRQ_FLAGS2);
 8003d76:	230e      	movs	r3, #14
 8003d78:	18fc      	adds	r4, r7, r3
 8003d7a:	203f      	movs	r0, #63	; 0x3f
 8003d7c:	f000 fd5e 	bl	800483c <BSP_SX1272_Read>
 8003d80:	0003      	movs	r3, r0
 8003d82:	7023      	strb	r3, [r4, #0]
		// Wait until the packet is sent (Packet Sent flag) or the timeout expires
		while ((bitRead(value, 3) == 0) && (millis() - previous < wait))
 8003d84:	e011      	b.n	8003daa <BSP_SX1272_sendWithTimeout+0xd2>
		{
			value = BSP_SX1272_Read(REG_IRQ_FLAGS2);
 8003d86:	230e      	movs	r3, #14
 8003d88:	18fc      	adds	r4, r7, r3
 8003d8a:	203f      	movs	r0, #63	; 0x3f
 8003d8c:	f000 fd56 	bl	800483c <BSP_SX1272_Read>
 8003d90:	0003      	movs	r3, r0
 8003d92:	7023      	strb	r3, [r4, #0]

			// Condition to avoid an overflow (DO NOT REMOVE)
			if( millis() < previous )
 8003d94:	f7fc ff4a 	bl	8000c2c <millis>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d203      	bcs.n	8003daa <BSP_SX1272_sendWithTimeout+0xd2>
			{
				previous = millis();
 8003da2:	f7fc ff43 	bl	8000c2c <millis>
 8003da6:	0003      	movs	r3, r0
 8003da8:	60bb      	str	r3, [r7, #8]
		while ((bitRead(value, 3) == 0) && (millis() - previous < wait))
 8003daa:	230e      	movs	r3, #14
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	08db      	lsrs	r3, r3, #3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	001a      	movs	r2, r3
 8003db6:	2301      	movs	r3, #1
 8003db8:	4013      	ands	r3, r2
 8003dba:	d108      	bne.n	8003dce <BSP_SX1272_sendWithTimeout+0xf6>
 8003dbc:	f7fc ff36 	bl	8000c2c <millis>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d3db      	bcc.n	8003d86 <BSP_SX1272_sendWithTimeout+0xae>
			}
		}
		state = 1;
 8003dce:	230f      	movs	r3, #15
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
	}
	if( bitRead(value, 3) == 1 )
 8003dd6:	230e      	movs	r3, #14
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	08db      	lsrs	r3, r3, #3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	001a      	movs	r2, r3
 8003de2:	2301      	movs	r3, #1
 8003de4:	4013      	ands	r3, r2
 8003de6:	d003      	beq.n	8003df0 <BSP_SX1272_sendWithTimeout+0x118>
	{
		state = 0;	// Packet successfully sent
 8003de8:	230f      	movs	r3, #15
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
			#endif
		}
	}

	// Initializing flags
	BSP_SX1272_clearFlags();
 8003df0:	f7fc ffb4 	bl	8000d5c <BSP_SX1272_clearFlags>
	return state;
 8003df4:	230f      	movs	r3, #15
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	781b      	ldrb	r3, [r3, #0]
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b005      	add	sp, #20
 8003e00:	bd90      	pop	{r4, r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	200000d4 	.word	0x200000d4

08003e08 <BSP_SX1272_sendPacketMAXTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendPacketMAXTimeout(uint8_t dest, char *payload)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	0002      	movs	r2, r0
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	1dfb      	adds	r3, r7, #7
 8003e14:	701a      	strb	r2, [r3, #0]
	return BSP_SX1272_sendPacketTimeout(dest, payload, MAX_TIMEOUT);
 8003e16:	4a06      	ldr	r2, [pc, #24]	; (8003e30 <BSP_SX1272_sendPacketMAXTimeout+0x28>)
 8003e18:	6839      	ldr	r1, [r7, #0]
 8003e1a:	1dfb      	adds	r3, r7, #7
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 f808 	bl	8003e34 <BSP_SX1272_sendPacketTimeout>
 8003e24:	0003      	movs	r3, r0
}
 8003e26:	0018      	movs	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b002      	add	sp, #8
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	00002710 	.word	0x00002710

08003e34 <BSP_SX1272_sendPacketTimeout>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendPacketTimeout(uint8_t dest, char *payload, uint32_t wait)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	230f      	movs	r3, #15
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	1c02      	adds	r2, r0, #0
 8003e44:	701a      	strb	r2, [r3, #0]
	uint8_t state = 2;
 8003e46:	2317      	movs	r3, #23
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'sendPacketTimeout'\r\n");
		my_printf("Passe dans sendPacketTimeout(uint8_t dest, char *payload, uint32_t wait)\r\n");
	#endif

	state = BSP_SX1272_setPacket(dest, payload);	// Setting a packet with 'dest' destination
 8003e4e:	2317      	movs	r3, #23
 8003e50:	18fc      	adds	r4, r7, r3
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	230f      	movs	r3, #15
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7ff fe83 	bl	8003b68 <BSP_SX1272_setPacket>
 8003e62:	0003      	movs	r3, r0
 8003e64:	7023      	strb	r3, [r4, #0]
	if (state == 0)								// and writing it in FIFO.
 8003e66:	2317      	movs	r3, #23
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d107      	bne.n	8003e80 <BSP_SX1272_sendPacketTimeout+0x4c>
	{
		state = BSP_SX1272_sendWithTimeout(wait);	// Sending the packet
 8003e70:	2317      	movs	r3, #23
 8003e72:	18fc      	adds	r4, r7, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7ff ff2e 	bl	8003cd8 <BSP_SX1272_sendWithTimeout>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	7023      	strb	r3, [r4, #0]
	}
	return state;
 8003e80:	2317      	movs	r3, #23
 8003e82:	18fb      	adds	r3, r7, r3
 8003e84:	781b      	ldrb	r3, [r3, #0]
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b007      	add	sp, #28
 8003e8c:	bd90      	pop	{r4, r7, pc}

08003e8e <BSP_SX1272_sendPacketMAXTimeoutACK>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendPacketMAXTimeoutACK(uint8_t dest, char *payload)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	0002      	movs	r2, r0
 8003e96:	6039      	str	r1, [r7, #0]
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	701a      	strb	r2, [r3, #0]
	return BSP_SX1272_sendPacketTimeoutACK(dest, payload, MAX_TIMEOUT);
 8003e9c:	4a05      	ldr	r2, [pc, #20]	; (8003eb4 <BSP_SX1272_sendPacketMAXTimeoutACK+0x26>)
 8003e9e:	6839      	ldr	r1, [r7, #0]
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 f807 	bl	8003eb8 <BSP_SX1272_sendPacketTimeoutACK>
 8003eaa:	0003      	movs	r3, r0
}
 8003eac:	0018      	movs	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	b002      	add	sp, #8
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	00002710 	.word	0x00002710

08003eb8 <BSP_SX1272_sendPacketTimeoutACK>:
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendPacketTimeoutACK(	uint8_t dest,
											char *payload,
											uint32_t wait)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	230f      	movs	r3, #15
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	1c02      	adds	r2, r0, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
	uint8_t state = 2;
 8003eca:	2317      	movs	r3, #23
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
	uint8_t state_f = 2;
 8003ed2:	2316      	movs	r3, #22
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'sendPacketTimeouACK'\r\n");
	#endif

	state = BSP_SX1272_sendPacketTimeout(dest, payload, wait);	// Sending packet to 'dest' destination
 8003eda:	2317      	movs	r3, #23
 8003edc:	18fc      	adds	r4, r7, r3
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	230f      	movs	r3, #15
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7ff ffa3 	bl	8003e34 <BSP_SX1272_sendPacketTimeout>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	7023      	strb	r3, [r4, #0]
	if( state == 0 )
 8003ef2:	2317      	movs	r3, #23
 8003ef4:	18fb      	adds	r3, r7, r3
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <BSP_SX1272_sendPacketTimeoutACK+0x52>
	{
		state = BSP_SX1272_receive();	// Setting Rx mode to wait an currentstate.ACK
 8003efc:	2317      	movs	r3, #23
 8003efe:	18fc      	adds	r4, r7, r3
 8003f00:	f7ff f81a 	bl	8002f38 <BSP_SX1272_receive>
 8003f04:	0003      	movs	r3, r0
 8003f06:	7023      	strb	r3, [r4, #0]
 8003f08:	e003      	b.n	8003f12 <BSP_SX1272_sendPacketTimeoutACK+0x5a>
	}
	else
	{
		state_f = 1;
 8003f0a:	2316      	movs	r3, #22
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
	}
	if( state == 0 )
 8003f12:	2317      	movs	r3, #23
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d113      	bne.n	8003f44 <BSP_SX1272_sendPacketTimeoutACK+0x8c>
	{
		if( BSP_SX1272_availableData(MAX_TIMEOUT) )
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <BSP_SX1272_sendPacketTimeoutACK+0xa4>)
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7ff f96e 	bl	8003200 <BSP_SX1272_availableData>
 8003f24:	1e03      	subs	r3, r0, #0
 8003f26:	d008      	beq.n	8003f3a <BSP_SX1272_sendPacketTimeoutACK+0x82>
		{
			state_f = BSP_SX1272_getACK(MAX_TIMEOUT);	// Getting currentstate.ACK
 8003f28:	2316      	movs	r3, #22
 8003f2a:	18fc      	adds	r4, r7, r3
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <BSP_SX1272_sendPacketTimeoutACK+0xa4>)
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 f816 	bl	8003f60 <BSP_SX1272_getACK>
 8003f34:	0003      	movs	r3, r0
 8003f36:	7023      	strb	r3, [r4, #0]
 8003f38:	e008      	b.n	8003f4c <BSP_SX1272_sendPacketTimeoutACK+0x94>
		}
		else
		{
			state_f = 9;
 8003f3a:	2316      	movs	r3, #22
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2209      	movs	r2, #9
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e003      	b.n	8003f4c <BSP_SX1272_sendPacketTimeoutACK+0x94>
		}
	}
	else
	{
		state_f = 1;
 8003f44:	2316      	movs	r3, #22
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
	}

	return state_f;
 8003f4c:	2316      	movs	r3, #22
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	781b      	ldrb	r3, [r3, #0]
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b007      	add	sp, #28
 8003f58:	bd90      	pop	{r4, r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	00002710 	.word	0x00002710

08003f60 <BSP_SX1272_getACK>:
   state = 0  --> The currentstate.ACK has been received with no errors
 Parameters:
   wait: time to wait while there is no a valid header received.
*/
uint8_t BSP_SX1272_getACK(uint32_t wait)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	uint8_t state = 2;
 8003f68:	2317      	movs	r3, #23
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	701a      	strb	r2, [r3, #0]
	uint8_t value = 0x00;
 8003f70:	2316      	movs	r3, #22
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
	unsigned long previous;
	uint8_t a_received = 0;
 8003f78:	230f      	movs	r3, #15
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'geACK'\r\n");
	#endif

    previous = millis();
 8003f80:	f7fc fe54 	bl	8000c2c <millis>
 8003f84:	0003      	movs	r3, r0
 8003f86:	613b      	str	r3, [r7, #16]

	if( currentstate._modem == LORA )
 8003f88:	4b7a      	ldr	r3, [pc, #488]	; (8004174 <BSP_SX1272_getACK+0x214>)
 8003f8a:	7f1b      	ldrb	r3, [r3, #28]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d13d      	bne.n	800400c <BSP_SX1272_getACK+0xac>
	{ // LoRa mode
	    value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 8003f90:	2316      	movs	r3, #22
 8003f92:	18fc      	adds	r4, r7, r3
 8003f94:	2012      	movs	r0, #18
 8003f96:	f000 fc51 	bl	800483c <BSP_SX1272_Read>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	7023      	strb	r3, [r4, #0]
		// Wait until the currentstate.ACK is received (RxDone flag) or the timeout expires
		while ((bitRead(value, 6) == 0) && (millis() - previous < wait))
 8003f9e:	e011      	b.n	8003fc4 <BSP_SX1272_getACK+0x64>
		{
			value = BSP_SX1272_Read(REG_IRQ_FLAGS);
 8003fa0:	2316      	movs	r3, #22
 8003fa2:	18fc      	adds	r4, r7, r3
 8003fa4:	2012      	movs	r0, #18
 8003fa6:	f000 fc49 	bl	800483c <BSP_SX1272_Read>
 8003faa:	0003      	movs	r3, r0
 8003fac:	7023      	strb	r3, [r4, #0]
			if( millis() < previous )
 8003fae:	f7fc fe3d 	bl	8000c2c <millis>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	001a      	movs	r2, r3
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d203      	bcs.n	8003fc4 <BSP_SX1272_getACK+0x64>
			{
				previous = millis();
 8003fbc:	f7fc fe36 	bl	8000c2c <millis>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	613b      	str	r3, [r7, #16]
		while ((bitRead(value, 6) == 0) && (millis() - previous < wait))
 8003fc4:	2316      	movs	r3, #22
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	001a      	movs	r2, r3
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d108      	bne.n	8003fe8 <BSP_SX1272_getACK+0x88>
 8003fd6:	f7fc fe29 	bl	8000c2c <millis>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	001a      	movs	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad2      	subs	r2, r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d3db      	bcc.n	8003fa0 <BSP_SX1272_getACK+0x40>
			}
		}
		if( bitRead(value, 6) == 1 )
 8003fe8:	2316      	movs	r3, #22
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	001a      	movs	r2, r3
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d003      	beq.n	8004002 <BSP_SX1272_getACK+0xa2>
		{ // currentstate.ACK received
			a_received = 1;
 8003ffa:	230f      	movs	r3, #15
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
		}
		// Standby para minimizar el consumo
		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_MODE);	// Setting standby LoRa mode
 8004002:	2181      	movs	r1, #129	; 0x81
 8004004:	2001      	movs	r0, #1
 8004006:	f000 fc49 	bl	800489c <BSP_SX1272_Write>
 800400a:	e03c      	b.n	8004086 <BSP_SX1272_getACK+0x126>
	}
	else
	{ // FSK mode
		value = BSP_SX1272_Read(REG_IRQ_FLAGS2);
 800400c:	2316      	movs	r3, #22
 800400e:	18fc      	adds	r4, r7, r3
 8004010:	203f      	movs	r0, #63	; 0x3f
 8004012:	f000 fc13 	bl	800483c <BSP_SX1272_Read>
 8004016:	0003      	movs	r3, r0
 8004018:	7023      	strb	r3, [r4, #0]
		// Wait until the packet is received (RxDone flag) or the timeout expires
		while ((bitRead(value, 2) == 0) && (millis() - previous < wait))
 800401a:	e011      	b.n	8004040 <BSP_SX1272_getACK+0xe0>
		{
			value = BSP_SX1272_Read(REG_IRQ_FLAGS2);
 800401c:	2316      	movs	r3, #22
 800401e:	18fc      	adds	r4, r7, r3
 8004020:	203f      	movs	r0, #63	; 0x3f
 8004022:	f000 fc0b 	bl	800483c <BSP_SX1272_Read>
 8004026:	0003      	movs	r3, r0
 8004028:	7023      	strb	r3, [r4, #0]
			if( millis() < previous )
 800402a:	f7fc fdff 	bl	8000c2c <millis>
 800402e:	0003      	movs	r3, r0
 8004030:	001a      	movs	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d203      	bcs.n	8004040 <BSP_SX1272_getACK+0xe0>
			{
				previous = millis();
 8004038:	f7fc fdf8 	bl	8000c2c <millis>
 800403c:	0003      	movs	r3, r0
 800403e:	613b      	str	r3, [r7, #16]
		while ((bitRead(value, 2) == 0) && (millis() - previous < wait))
 8004040:	2316      	movs	r3, #22
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	b2db      	uxtb	r3, r3
 800404a:	001a      	movs	r2, r3
 800404c:	2301      	movs	r3, #1
 800404e:	4013      	ands	r3, r2
 8004050:	d108      	bne.n	8004064 <BSP_SX1272_getACK+0x104>
 8004052:	f7fc fdeb 	bl	8000c2c <millis>
 8004056:	0003      	movs	r3, r0
 8004058:	001a      	movs	r2, r3
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad2      	subs	r2, r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d3db      	bcc.n	800401c <BSP_SX1272_getACK+0xbc>
			}
		}
		if( bitRead(value, 2) == 1 )
 8004064:	2316      	movs	r3, #22
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	089b      	lsrs	r3, r3, #2
 800406c:	b2db      	uxtb	r3, r3
 800406e:	001a      	movs	r2, r3
 8004070:	2301      	movs	r3, #1
 8004072:	4013      	ands	r3, r2
 8004074:	d003      	beq.n	800407e <BSP_SX1272_getACK+0x11e>
		{ // currentstate.ACK received
			a_received = 1;
 8004076:	230f      	movs	r3, #15
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
		}
		// Standby para minimizar el consumo
		BSP_SX1272_Write(REG_OP_MODE, FSK_STANDBY_MODE);	// Setting standby FSK mode
 800407e:	2101      	movs	r1, #1
 8004080:	2001      	movs	r0, #1
 8004082:	f000 fc0b 	bl	800489c <BSP_SX1272_Write>
	}

	if( a_received )
 8004086:	230f      	movs	r3, #15
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d063      	beq.n	8004158 <BSP_SX1272_getACK+0x1f8>
	{
//----	BSP_SX1272_Write(REG_FIFO_ADDR_PTR, 0x00);  // Setting address pointer in FIFO data buffer
		// Storing the received currentstate.ACK
		currentstate.ACK.dst = currentstate._destination;
 8004090:	4b38      	ldr	r3, [pc, #224]	; (8004174 <BSP_SX1272_getACK+0x214>)
 8004092:	7d99      	ldrb	r1, [r3, #22]
 8004094:	4b37      	ldr	r3, [pc, #220]	; (8004174 <BSP_SX1272_getACK+0x214>)
 8004096:	4a38      	ldr	r2, [pc, #224]	; (8004178 <BSP_SX1272_getACK+0x218>)
 8004098:	5499      	strb	r1, [r3, r2]
		currentstate.ACK.src = BSP_SX1272_Read(REG_FIFO);
 800409a:	2000      	movs	r0, #0
 800409c:	f000 fbce 	bl	800483c <BSP_SX1272_Read>
 80040a0:	0003      	movs	r3, r0
 80040a2:	0019      	movs	r1, r3
 80040a4:	4b33      	ldr	r3, [pc, #204]	; (8004174 <BSP_SX1272_getACK+0x214>)
 80040a6:	4a35      	ldr	r2, [pc, #212]	; (800417c <BSP_SX1272_getACK+0x21c>)
 80040a8:	5499      	strb	r1, [r3, r2]
		currentstate.ACK.packnum = BSP_SX1272_Read(REG_FIFO);
 80040aa:	2000      	movs	r0, #0
 80040ac:	f000 fbc6 	bl	800483c <BSP_SX1272_Read>
 80040b0:	0003      	movs	r3, r0
 80040b2:	0019      	movs	r1, r3
 80040b4:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <BSP_SX1272_getACK+0x214>)
 80040b6:	4a32      	ldr	r2, [pc, #200]	; (8004180 <BSP_SX1272_getACK+0x220>)
 80040b8:	5499      	strb	r1, [r3, r2]
		currentstate.ACK.length = BSP_SX1272_Read(REG_FIFO);
 80040ba:	2000      	movs	r0, #0
 80040bc:	f000 fbbe 	bl	800483c <BSP_SX1272_Read>
 80040c0:	0003      	movs	r3, r0
 80040c2:	0019      	movs	r1, r3
 80040c4:	4a2b      	ldr	r2, [pc, #172]	; (8004174 <BSP_SX1272_getACK+0x214>)
 80040c6:	2388      	movs	r3, #136	; 0x88
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	54d1      	strb	r1, [r2, r3]
		currentstate.ACK.data[0] = BSP_SX1272_Read(REG_FIFO);
 80040cc:	2000      	movs	r0, #0
 80040ce:	f000 fbb5 	bl	800483c <BSP_SX1272_Read>
 80040d2:	0003      	movs	r3, r0
 80040d4:	0019      	movs	r1, r3
 80040d6:	4b27      	ldr	r3, [pc, #156]	; (8004174 <BSP_SX1272_getACK+0x214>)
 80040d8:	4a2a      	ldr	r2, [pc, #168]	; (8004184 <BSP_SX1272_getACK+0x224>)
 80040da:	5499      	strb	r1, [r3, r2]

		// Checking the received currentstate.ACK
		if( currentstate.ACK.dst == currentstate.packet_sent.src )
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <BSP_SX1272_getACK+0x214>)
 80040de:	4a26      	ldr	r2, [pc, #152]	; (8004178 <BSP_SX1272_getACK+0x218>)
 80040e0:	5c9a      	ldrb	r2, [r3, r2]
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <BSP_SX1272_getACK+0x214>)
 80040e4:	7f9b      	ldrb	r3, [r3, #30]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d131      	bne.n	800414e <BSP_SX1272_getACK+0x1ee>
		{
			if( currentstate.ACK.src == currentstate.packet_sent.dst )
 80040ea:	4b22      	ldr	r3, [pc, #136]	; (8004174 <BSP_SX1272_getACK+0x214>)
 80040ec:	4a23      	ldr	r2, [pc, #140]	; (800417c <BSP_SX1272_getACK+0x21c>)
 80040ee:	5c9a      	ldrb	r2, [r3, r2]
 80040f0:	4b20      	ldr	r3, [pc, #128]	; (8004174 <BSP_SX1272_getACK+0x214>)
 80040f2:	7f5b      	ldrb	r3, [r3, #29]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d125      	bne.n	8004144 <BSP_SX1272_getACK+0x1e4>
			{
				if( currentstate.ACK.packnum == currentstate.packet_sent.packnum )
 80040f8:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <BSP_SX1272_getACK+0x214>)
 80040fa:	4a21      	ldr	r2, [pc, #132]	; (8004180 <BSP_SX1272_getACK+0x220>)
 80040fc:	5c9a      	ldrb	r2, [r3, r2]
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <BSP_SX1272_getACK+0x214>)
 8004100:	7fdb      	ldrb	r3, [r3, #31]
 8004102:	429a      	cmp	r2, r3
 8004104:	d119      	bne.n	800413a <BSP_SX1272_getACK+0x1da>
				{
					if( currentstate.ACK.length == 0 )
 8004106:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <BSP_SX1272_getACK+0x214>)
 8004108:	2388      	movs	r3, #136	; 0x88
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	5cd3      	ldrb	r3, [r2, r3]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10e      	bne.n	8004130 <BSP_SX1272_getACK+0x1d0>
					{
						if( currentstate.ACK.data[0] == CORRECT_PACKET )
 8004112:	4b18      	ldr	r3, [pc, #96]	; (8004174 <BSP_SX1272_getACK+0x214>)
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <BSP_SX1272_getACK+0x224>)
 8004116:	5c9b      	ldrb	r3, [r3, r2]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d104      	bne.n	8004126 <BSP_SX1272_getACK+0x1c6>
						{
							state = 0;
 800411c:	2317      	movs	r3, #23
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e01c      	b.n	8004160 <BSP_SX1272_getACK+0x200>
							my_printf("\r\n");
							#endif
						}
						else
						{
							state = 3;
 8004126:	2317      	movs	r3, #23
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	2203      	movs	r2, #3
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e017      	b.n	8004160 <BSP_SX1272_getACK+0x200>
							#endif
						}
					}
					else
					{
						state = 4;
 8004130:	2317      	movs	r3, #23
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	2204      	movs	r2, #4
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e012      	b.n	8004160 <BSP_SX1272_getACK+0x200>
						#endif
					}
				}
				else
				{
					state = 5;
 800413a:	2317      	movs	r3, #23
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2205      	movs	r2, #5
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e00d      	b.n	8004160 <BSP_SX1272_getACK+0x200>
					#endif
				}
			}
			else
			{
				state = 6;
 8004144:	2317      	movs	r3, #23
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2206      	movs	r2, #6
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e008      	b.n	8004160 <BSP_SX1272_getACK+0x200>
				#endif
			}
		}
		else
		{
			state = 7;
 800414e:	2317      	movs	r3, #23
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	2207      	movs	r2, #7
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	e003      	b.n	8004160 <BSP_SX1272_getACK+0x200>
			#endif
		}
	}
	else
	{
		state = 8;
 8004158:	2317      	movs	r3, #23
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2208      	movs	r2, #8
 800415e:	701a      	strb	r2, [r3, #0]
		#if (SX1272_debug_mode > 0)
			my_printf("** currentstate.ACK lost **\r\n");
			my_printf("\r\n");
		#endif
	}
	BSP_SX1272_clearFlags();	// Initializing flags
 8004160:	f7fc fdfc 	bl	8000d5c <BSP_SX1272_clearFlags>
	return state;
 8004164:	2317      	movs	r3, #23
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	781b      	ldrb	r3, [r3, #0]
}
 800416a:	0018      	movs	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	b007      	add	sp, #28
 8004170:	bd90      	pop	{r4, r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	200000d4 	.word	0x200000d4
 8004178:	0000021d 	.word	0x0000021d
 800417c:	0000021e 	.word	0x0000021e
 8004180:	0000021f 	.word	0x0000021f
 8004184:	00000221 	.word	0x00000221

08004188 <BSP_SX1272_sendPacketMAXTimeoutACKRetries>:
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendPacketMAXTimeoutACKRetries(	uint8_t dest,
													char  *payload)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	0002      	movs	r2, r0
 8004190:	6039      	str	r1, [r7, #0]
 8004192:	1dfb      	adds	r3, r7, #7
 8004194:	701a      	strb	r2, [r3, #0]
	return BSP_SX1272_sendPacketTimeoutACKRetries(dest, payload, MAX_TIMEOUT);
 8004196:	4a06      	ldr	r2, [pc, #24]	; (80041b0 <BSP_SX1272_sendPacketMAXTimeoutACKRetries+0x28>)
 8004198:	6839      	ldr	r1, [r7, #0]
 800419a:	1dfb      	adds	r3, r7, #7
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 f808 	bl	80041b4 <BSP_SX1272_sendPacketTimeoutACKRetries>
 80041a4:	0003      	movs	r3, r0
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b002      	add	sp, #8
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	00002710 	.word	0x00002710

080041b4 <BSP_SX1272_sendPacketTimeoutACKRetries>:
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_sendPacketTimeoutACKRetries(uint8_t dest,
												char *payload,
												uint32_t wait)
{
 80041b4:	b590      	push	{r4, r7, lr}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	230f      	movs	r3, #15
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	1c02      	adds	r2, r0, #0
 80041c4:	701a      	strb	r2, [r3, #0]
	uint8_t state = 2;
 80041c6:	2317      	movs	r3, #23
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	2202      	movs	r2, #2
 80041cc:	701a      	strb	r2, [r3, #0]
		my_printf("\r\n");
		my_printf("Starting 'sendPacketTimeouACKRetries'\r\n");
	#endif

	// Sending packet to 'dest' destination and waiting an currentstate.ACK response.
	state = 1;
 80041ce:	2317      	movs	r3, #23
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
	while( (state != 0) && (currentstate._retries <= currentstate._maxRetries) )
 80041d6:	e011      	b.n	80041fc <BSP_SX1272_sendPacketTimeoutACKRetries+0x48>
	{
		state = BSP_SX1272_sendPacketTimeoutACK(dest, payload, wait);
 80041d8:	2317      	movs	r3, #23
 80041da:	18fc      	adds	r4, r7, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	230f      	movs	r3, #15
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7ff fe66 	bl	8003eb8 <BSP_SX1272_sendPacketTimeoutACK>
 80041ec:	0003      	movs	r3, r0
 80041ee:	7023      	strb	r3, [r4, #0]
		currentstate._retries++;
 80041f0:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <BSP_SX1272_sendPacketTimeoutACKRetries+0x74>)
 80041f2:	7e5b      	ldrb	r3, [r3, #25]
 80041f4:	3301      	adds	r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <BSP_SX1272_sendPacketTimeoutACKRetries+0x74>)
 80041fa:	765a      	strb	r2, [r3, #25]
	while( (state != 0) && (currentstate._retries <= currentstate._maxRetries) )
 80041fc:	2317      	movs	r3, #23
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <BSP_SX1272_sendPacketTimeoutACKRetries+0x5e>
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <BSP_SX1272_sendPacketTimeoutACKRetries+0x74>)
 8004208:	7e5a      	ldrb	r2, [r3, #25]
 800420a:	4b07      	ldr	r3, [pc, #28]	; (8004228 <BSP_SX1272_sendPacketTimeoutACKRetries+0x74>)
 800420c:	7e9b      	ldrb	r3, [r3, #26]
 800420e:	429a      	cmp	r2, r3
 8004210:	d9e2      	bls.n	80041d8 <BSP_SX1272_sendPacketTimeoutACKRetries+0x24>
	}
	currentstate._retries = 0;
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <BSP_SX1272_sendPacketTimeoutACKRetries+0x74>)
 8004214:	2200      	movs	r2, #0
 8004216:	765a      	strb	r2, [r3, #25]

	return state;
 8004218:	2317      	movs	r3, #23
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	781b      	ldrb	r3, [r3, #0]
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b007      	add	sp, #28
 8004224:	bd90      	pop	{r4, r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	200000d4 	.word	0x200000d4

0800422c <BSP_SX1272_getTemp>:
   state = 2  --> The command has not been executed
   state = 1  --> There has been an error while executing the command
   state = 0  --> The command has been executed with no errors
*/
uint8_t BSP_SX1272_getTemp()
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
	uint8_t st0;
	uint8_t state = 2;
 8004232:	1dfb      	adds	r3, r7, #7
 8004234:	2202      	movs	r2, #2
 8004236:	701a      	strb	r2, [r3, #0]
	#if (SX1272_debug_mode > 1)
		my_printf("\r\n");
		my_printf("Starting 'getTemp'\r\n");
	#endif

	st0 = BSP_SX1272_Read(REG_OP_MODE);	// Save the previous status
 8004238:	1dbc      	adds	r4, r7, #6
 800423a:	2001      	movs	r0, #1
 800423c:	f000 fafe 	bl	800483c <BSP_SX1272_Read>
 8004240:	0003      	movs	r3, r0
 8004242:	7023      	strb	r3, [r4, #0]

	if( currentstate._modem == LORA )
 8004244:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <BSP_SX1272_getTemp+0xa4>)
 8004246:	7f1b      	ldrb	r3, [r3, #28]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d103      	bne.n	8004254 <BSP_SX1272_getTemp+0x28>
	{ // Allowing access to FSK registers while in LoRa standby mode
		BSP_SX1272_Write(REG_OP_MODE, LORA_STANDBY_FSK_REGS_MODE);
 800424c:	21c1      	movs	r1, #193	; 0xc1
 800424e:	2001      	movs	r0, #1
 8004250:	f000 fb24 	bl	800489c <BSP_SX1272_Write>
	}

	state = 1;
 8004254:	1dfb      	adds	r3, r7, #7
 8004256:	2201      	movs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
	// Saving temperature value
	currentstate._temp = BSP_SX1272_Read(REG_TEMP);
 800425a:	203c      	movs	r0, #60	; 0x3c
 800425c:	f000 faee 	bl	800483c <BSP_SX1272_Read>
 8004260:	0003      	movs	r3, r0
 8004262:	0019      	movs	r1, r3
 8004264:	4a1a      	ldr	r2, [pc, #104]	; (80042d0 <BSP_SX1272_getTemp+0xa4>)
 8004266:	23c8      	movs	r3, #200	; 0xc8
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	50d1      	str	r1, [r2, r3]
	if( currentstate._temp & 0x80 ) // The SNR sign bit is 1
 800426c:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <BSP_SX1272_getTemp+0xa4>)
 800426e:	23c8      	movs	r3, #200	; 0xc8
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	58d3      	ldr	r3, [r2, r3]
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	4013      	ands	r3, r2
 8004278:	d00c      	beq.n	8004294 <BSP_SX1272_getTemp+0x68>
	{
		// Invert and divide by 4
		currentstate._temp = ( ( ~currentstate._temp + 1 ) & 0xFF );
 800427a:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <BSP_SX1272_getTemp+0xa4>)
 800427c:	23c8      	movs	r3, #200	; 0xc8
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	58d3      	ldr	r3, [r2, r3]
 8004282:	425b      	negs	r3, r3
 8004284:	22ff      	movs	r2, #255	; 0xff
 8004286:	4013      	ands	r3, r2
 8004288:	0019      	movs	r1, r3
 800428a:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <BSP_SX1272_getTemp+0xa4>)
 800428c:	23c8      	movs	r3, #200	; 0xc8
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	50d1      	str	r1, [r2, r3]
 8004292:	e00a      	b.n	80042aa <BSP_SX1272_getTemp+0x7e>
    }
    else
    {
		// Divide by 4
		currentstate._temp = ( currentstate._temp & 0xFF );
 8004294:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <BSP_SX1272_getTemp+0xa4>)
 8004296:	23c8      	movs	r3, #200	; 0xc8
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	58d3      	ldr	r3, [r2, r3]
 800429c:	22ff      	movs	r2, #255	; 0xff
 800429e:	4013      	ands	r3, r2
 80042a0:	0019      	movs	r1, r3
 80042a2:	4a0b      	ldr	r2, [pc, #44]	; (80042d0 <BSP_SX1272_getTemp+0xa4>)
 80042a4:	23c8      	movs	r3, #200	; 0xc8
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	50d1      	str	r1, [r2, r3]
		my_printf("%d",currentstate._temp);
		my_printf(" ##\r\n");
		my_printf("\r\n");
	#endif

	if( currentstate._modem == LORA )
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <BSP_SX1272_getTemp+0xa4>)
 80042ac:	7f1b      	ldrb	r3, [r3, #28]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <BSP_SX1272_getTemp+0x92>
	{
		BSP_SX1272_Write(REG_OP_MODE, st0);	// Getting back to previous status
 80042b2:	1dbb      	adds	r3, r7, #6
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	0019      	movs	r1, r3
 80042b8:	2001      	movs	r0, #1
 80042ba:	f000 faef 	bl	800489c <BSP_SX1272_Write>
	}

	state = 0;
 80042be:	1dfb      	adds	r3, r7, #7
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
	return state;
 80042c4:	1dfb      	adds	r3, r7, #7
 80042c6:	781b      	ldrb	r3, [r3, #0]
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b003      	add	sp, #12
 80042ce:	bd90      	pop	{r4, r7, pc}
 80042d0:	200000d4 	.word	0x200000d4

080042d4 <BSP_SX1272_cadDetected>:
 Returns: Integer that determines if there has been any error
   state = 1   --> Channel Activity Detected
   state = 0  --> Channel Activity NOT Detected
*/
uint8_t BSP_SX1272_cadDetected()
{
 80042d4:	b590      	push	{r4, r7, lr}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
	uint8_t val = 0;
 80042da:	1dfb      	adds	r3, r7, #7
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]

	// get actual time
	unsigned long time = millis();
 80042e0:	f7fc fca4 	bl	8000c2c <millis>
 80042e4:	0003      	movs	r3, r0
 80042e6:	603b      	str	r3, [r7, #0]

	// set LNA
	BSP_SX1272_Write(REG_LNA,0x23);
 80042e8:	2123      	movs	r1, #35	; 0x23
 80042ea:	200c      	movs	r0, #12
 80042ec:	f000 fad6 	bl	800489c <BSP_SX1272_Write>
	BSP_SX1272_clearFlags();
 80042f0:	f7fc fd34 	bl	8000d5c <BSP_SX1272_clearFlags>

	BSP_SX1272_getRSSI();
 80042f4:	f7fe fb14 	bl	8002920 <BSP_SX1272_getRSSI>
	#if (SX1272_debug_mode > 1)
		my_printf("Inside CAD DETECTION -> RSSI: ");
		my_printf("%d",currentstate._RSSI);
	#endif

	if( currentstate._modem == LORA )
 80042f8:	4b18      	ldr	r3, [pc, #96]	; (800435c <BSP_SX1272_cadDetected+0x88>)
 80042fa:	7f1b      	ldrb	r3, [r3, #28]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d103      	bne.n	8004308 <BSP_SX1272_cadDetected+0x34>
		#if (SX1272_debug_mode > 1)
			my_printf("Set CAD mode\r\n");
		#endif

		// Setting LoRa CAD mode
		BSP_SX1272_Write(REG_OP_MODE,0x87);
 8004300:	2187      	movs	r1, #135	; 0x87
 8004302:	2001      	movs	r0, #1
 8004304:	f000 faca 	bl	800489c <BSP_SX1272_Write>
	}

	// Wait for IRQ CadDone
    val = BSP_SX1272_Read(REG_IRQ_FLAGS);
 8004308:	1dfc      	adds	r4, r7, #7
 800430a:	2012      	movs	r0, #18
 800430c:	f000 fa96 	bl	800483c <BSP_SX1272_Read>
 8004310:	0003      	movs	r3, r0
 8004312:	7023      	strb	r3, [r4, #0]
    while((bitRead(val,2) == 0) && (millis()-time)<10000 )
 8004314:	e005      	b.n	8004322 <BSP_SX1272_cadDetected+0x4e>
    {
      val = BSP_SX1272_Read(REG_IRQ_FLAGS);
 8004316:	1dfc      	adds	r4, r7, #7
 8004318:	2012      	movs	r0, #18
 800431a:	f000 fa8f 	bl	800483c <BSP_SX1272_Read>
 800431e:	0003      	movs	r3, r0
 8004320:	7023      	strb	r3, [r4, #0]
    while((bitRead(val,2) == 0) && (millis()-time)<10000 )
 8004322:	1dfb      	adds	r3, r7, #7
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	b2db      	uxtb	r3, r3
 800432a:	001a      	movs	r2, r3
 800432c:	2301      	movs	r3, #1
 800432e:	4013      	ands	r3, r2
 8004330:	d108      	bne.n	8004344 <BSP_SX1272_cadDetected+0x70>
 8004332:	f7fc fc7b 	bl	8000c2c <millis>
 8004336:	0003      	movs	r3, r0
 8004338:	001a      	movs	r2, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <BSP_SX1272_cadDetected+0x8c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d9e8      	bls.n	8004316 <BSP_SX1272_cadDetected+0x42>
    }

	// After waiting or detecting CadDone
	// check 'CadDetected' bit in 'RegIrqFlags' register
    if(bitRead(val,0) == 1)
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2201      	movs	r2, #1
 800434a:	4013      	ands	r3, r2
 800434c:	d001      	beq.n	8004352 <BSP_SX1272_cadDetected+0x7e>
    {
		#if (SX1272_debug_mode > 1)
			my_printf("CAD 1\r\n");
		#endif
		return 1;
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <BSP_SX1272_cadDetected+0x80>
	}

	#if (SX1272_debug_mode > 1)
		my_printf("CAD 0\r\n");
	#endif
	return 0;
 8004352:	2300      	movs	r3, #0

}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b003      	add	sp, #12
 800435a:	bd90      	pop	{r4, r7, pc}
 800435c:	200000d4 	.word	0x200000d4
 8004360:	0000270f 	.word	0x0000270f

08004364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	0002      	movs	r2, r0
 800436c:	1dfb      	adds	r3, r7, #7
 800436e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004370:	1dfb      	adds	r3, r7, #7
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b7f      	cmp	r3, #127	; 0x7f
 8004376:	d809      	bhi.n	800438c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <__NVIC_EnableIRQ+0x30>)
 800437a:	1dfa      	adds	r2, r7, #7
 800437c:	7812      	ldrb	r2, [r2, #0]
 800437e:	0011      	movs	r1, r2
 8004380:	221f      	movs	r2, #31
 8004382:	400a      	ands	r2, r1
 8004384:	2101      	movs	r1, #1
 8004386:	4091      	lsls	r1, r2
 8004388:	000a      	movs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]
  }
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	46bd      	mov	sp, r7
 8004390:	b002      	add	sp, #8
 8004392:	bd80      	pop	{r7, pc}
 8004394:	e000e100 	.word	0xe000e100

08004398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	0002      	movs	r2, r0
 80043a0:	6039      	str	r1, [r7, #0]
 80043a2:	1dfb      	adds	r3, r7, #7
 80043a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043a6:	1dfb      	adds	r3, r7, #7
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b7f      	cmp	r3, #127	; 0x7f
 80043ac:	d828      	bhi.n	8004400 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043ae:	4c2f      	ldr	r4, [pc, #188]	; (800446c <__NVIC_SetPriority+0xd4>)
 80043b0:	1dfb      	adds	r3, r7, #7
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b25b      	sxtb	r3, r3
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	492c      	ldr	r1, [pc, #176]	; (800446c <__NVIC_SetPriority+0xd4>)
 80043ba:	1dfa      	adds	r2, r7, #7
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	b252      	sxtb	r2, r2
 80043c0:	0892      	lsrs	r2, r2, #2
 80043c2:	32c0      	adds	r2, #192	; 0xc0
 80043c4:	0092      	lsls	r2, r2, #2
 80043c6:	5852      	ldr	r2, [r2, r1]
 80043c8:	1df9      	adds	r1, r7, #7
 80043ca:	7809      	ldrb	r1, [r1, #0]
 80043cc:	0008      	movs	r0, r1
 80043ce:	2103      	movs	r1, #3
 80043d0:	4001      	ands	r1, r0
 80043d2:	00c9      	lsls	r1, r1, #3
 80043d4:	20ff      	movs	r0, #255	; 0xff
 80043d6:	4088      	lsls	r0, r1
 80043d8:	0001      	movs	r1, r0
 80043da:	43c9      	mvns	r1, r1
 80043dc:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	0192      	lsls	r2, r2, #6
 80043e2:	20ff      	movs	r0, #255	; 0xff
 80043e4:	4010      	ands	r0, r2
 80043e6:	1dfa      	adds	r2, r7, #7
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	0015      	movs	r5, r2
 80043ec:	2203      	movs	r2, #3
 80043ee:	402a      	ands	r2, r5
 80043f0:	00d2      	lsls	r2, r2, #3
 80043f2:	4090      	lsls	r0, r2
 80043f4:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043f6:	430a      	orrs	r2, r1
 80043f8:	33c0      	adds	r3, #192	; 0xc0
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80043fe:	e031      	b.n	8004464 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004400:	4c1b      	ldr	r4, [pc, #108]	; (8004470 <__NVIC_SetPriority+0xd8>)
 8004402:	1dfb      	adds	r3, r7, #7
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	001a      	movs	r2, r3
 8004408:	230f      	movs	r3, #15
 800440a:	4013      	ands	r3, r2
 800440c:	3b08      	subs	r3, #8
 800440e:	0899      	lsrs	r1, r3, #2
 8004410:	4a17      	ldr	r2, [pc, #92]	; (8004470 <__NVIC_SetPriority+0xd8>)
 8004412:	1dfb      	adds	r3, r7, #7
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	0018      	movs	r0, r3
 8004418:	230f      	movs	r3, #15
 800441a:	4003      	ands	r3, r0
 800441c:	3b08      	subs	r3, #8
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3306      	adds	r3, #6
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	3304      	adds	r3, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	1dfa      	adds	r2, r7, #7
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	0010      	movs	r0, r2
 8004430:	2203      	movs	r2, #3
 8004432:	4002      	ands	r2, r0
 8004434:	00d2      	lsls	r2, r2, #3
 8004436:	20ff      	movs	r0, #255	; 0xff
 8004438:	4090      	lsls	r0, r2
 800443a:	0002      	movs	r2, r0
 800443c:	43d2      	mvns	r2, r2
 800443e:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	019b      	lsls	r3, r3, #6
 8004444:	20ff      	movs	r0, #255	; 0xff
 8004446:	4018      	ands	r0, r3
 8004448:	1dfb      	adds	r3, r7, #7
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	001d      	movs	r5, r3
 800444e:	2303      	movs	r3, #3
 8004450:	402b      	ands	r3, r5
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4098      	lsls	r0, r3
 8004456:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004458:	431a      	orrs	r2, r3
 800445a:	1d8b      	adds	r3, r1, #6
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	18e3      	adds	r3, r4, r3
 8004460:	3304      	adds	r3, #4
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	b002      	add	sp, #8
 800446a:	bdb0      	pop	{r4, r5, r7, pc}
 800446c:	e000e100 	.word	0xe000e100
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <BSP_LED_Init>:
 * Initialize LED pin (PA5) as a High-Speed Push-Pull output
 * Set LED initial state to OFF
 */

void BSP_LED_Init()
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004478:	4b22      	ldr	r3, [pc, #136]	; (8004504 <BSP_LED_Init+0x90>)
 800447a:	4a22      	ldr	r2, [pc, #136]	; (8004504 <BSP_LED_Init+0x90>)
 800447c:	6952      	ldr	r2, [r2, #20]
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	0289      	lsls	r1, r1, #10
 8004482:	430a      	orrs	r2, r1
 8004484:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 8004486:	2390      	movs	r3, #144	; 0x90
 8004488:	05db      	lsls	r3, r3, #23
 800448a:	2290      	movs	r2, #144	; 0x90
 800448c:	05d2      	lsls	r2, r2, #23
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	491d      	ldr	r1, [pc, #116]	; (8004508 <BSP_LED_Init+0x94>)
 8004492:	400a      	ands	r2, r1
 8004494:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 8004496:	2390      	movs	r3, #144	; 0x90
 8004498:	05db      	lsls	r3, r3, #23
 800449a:	2290      	movs	r2, #144	; 0x90
 800449c:	05d2      	lsls	r2, r2, #23
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	2180      	movs	r1, #128	; 0x80
 80044a2:	00c9      	lsls	r1, r1, #3
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 80044a8:	2390      	movs	r3, #144	; 0x90
 80044aa:	05db      	lsls	r3, r3, #23
 80044ac:	2290      	movs	r2, #144	; 0x90
 80044ae:	05d2      	lsls	r2, r2, #23
 80044b0:	6852      	ldr	r2, [r2, #4]
 80044b2:	2120      	movs	r1, #32
 80044b4:	438a      	bics	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 80044b8:	2390      	movs	r3, #144	; 0x90
 80044ba:	05db      	lsls	r3, r3, #23
 80044bc:	2290      	movs	r2, #144	; 0x90
 80044be:	05d2      	lsls	r2, r2, #23
 80044c0:	6892      	ldr	r2, [r2, #8]
 80044c2:	4911      	ldr	r1, [pc, #68]	; (8004508 <BSP_LED_Init+0x94>)
 80044c4:	400a      	ands	r2, r1
 80044c6:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 80044c8:	2390      	movs	r3, #144	; 0x90
 80044ca:	05db      	lsls	r3, r3, #23
 80044cc:	2290      	movs	r2, #144	; 0x90
 80044ce:	05d2      	lsls	r2, r2, #23
 80044d0:	6892      	ldr	r2, [r2, #8]
 80044d2:	21c0      	movs	r1, #192	; 0xc0
 80044d4:	0109      	lsls	r1, r1, #4
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 80044da:	2390      	movs	r3, #144	; 0x90
 80044dc:	05db      	lsls	r3, r3, #23
 80044de:	2290      	movs	r2, #144	; 0x90
 80044e0:	05d2      	lsls	r2, r2, #23
 80044e2:	68d2      	ldr	r2, [r2, #12]
 80044e4:	4908      	ldr	r1, [pc, #32]	; (8004508 <BSP_LED_Init+0x94>)
 80044e6:	400a      	ands	r2, r1
 80044e8:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 80044ea:	2390      	movs	r3, #144	; 0x90
 80044ec:	05db      	lsls	r3, r3, #23
 80044ee:	2290      	movs	r2, #144	; 0x90
 80044f0:	05d2      	lsls	r2, r2, #23
 80044f2:	6992      	ldr	r2, [r2, #24]
 80044f4:	2180      	movs	r1, #128	; 0x80
 80044f6:	0389      	lsls	r1, r1, #14
 80044f8:	430a      	orrs	r2, r1
 80044fa:	619a      	str	r2, [r3, #24]
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	40021000 	.word	0x40021000
 8004508:	fffff3ff 	.word	0xfffff3ff

0800450c <BSP_LED_On>:
 * BSP_LED_On()
 * Turn ON LED on PA5
 */

void BSP_LED_On()
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BS_5;
 8004510:	2390      	movs	r3, #144	; 0x90
 8004512:	05db      	lsls	r3, r3, #23
 8004514:	2220      	movs	r2, #32
 8004516:	619a      	str	r2, [r3, #24]
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <BSP_LED_Off>:
 * BSP_LED_Off()
 * Turn OFF LED on PA5
 */

void BSP_LED_Off()
{
 800451e:	b580      	push	{r7, lr}
 8004520:	af00      	add	r7, sp, #0
	GPIOA->BSRR = GPIO_BSRR_BR_5;
 8004522:	2390      	movs	r3, #144	; 0x90
 8004524:	05db      	lsls	r3, r3, #23
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	0392      	lsls	r2, r2, #14
 800452a:	619a      	str	r2, [r3, #24]
}
 800452c:	46c0      	nop			; (mov r8, r8)
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <BSP_LED_Toggle>:
 * BSP_LED_Toggle()
 * Toggle LED on PA5
 */

void BSP_LED_Toggle()
{
 8004532:	b580      	push	{r7, lr}
 8004534:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_5;
 8004536:	2390      	movs	r3, #144	; 0x90
 8004538:	05db      	lsls	r3, r3, #23
 800453a:	2290      	movs	r2, #144	; 0x90
 800453c:	05d2      	lsls	r2, r2, #23
 800453e:	6952      	ldr	r2, [r2, #20]
 8004540:	2120      	movs	r1, #32
 8004542:	404a      	eors	r2, r1
 8004544:	615a      	str	r2, [r3, #20]
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <BSP_PB_Init>:
 * BSP_PB_Init()
 * Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 */

void BSP_PB_Init()
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <BSP_PB_Init+0x38>)
 8004552:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <BSP_PB_Init+0x38>)
 8004554:	6952      	ldr	r2, [r2, #20]
 8004556:	2180      	movs	r1, #128	; 0x80
 8004558:	0309      	lsls	r1, r1, #12
 800455a:	430a      	orrs	r2, r1
 800455c:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <BSP_PB_Init+0x3c>)
 8004560:	4a09      	ldr	r2, [pc, #36]	; (8004588 <BSP_PB_Init+0x3c>)
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	4909      	ldr	r1, [pc, #36]	; (800458c <BSP_PB_Init+0x40>)
 8004566:	400a      	ands	r2, r1
 8004568:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <BSP_PB_Init+0x3c>)
 800456c:	4a06      	ldr	r2, [pc, #24]	; (8004588 <BSP_PB_Init+0x3c>)
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <BSP_PB_Init+0x3c>)
 8004574:	4a04      	ldr	r2, [pc, #16]	; (8004588 <BSP_PB_Init+0x3c>)
 8004576:	68d2      	ldr	r2, [r2, #12]
 8004578:	4904      	ldr	r1, [pc, #16]	; (800458c <BSP_PB_Init+0x40>)
 800457a:	400a      	ands	r2, r1
 800457c:	60da      	str	r2, [r3, #12]
}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	48000800 	.word	0x48000800
 800458c:	f3ffffff 	.word	0xf3ffffff

08004590 <BSP_PB_GetState>:
 * BSP_PB_GetState()
 * Returns the state of the button (0=released, 1=pressed)
 */

uint8_t BSP_PB_GetState()
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
	uint8_t state;

	if ((GPIOC->IDR & GPIO_IDR_13) == GPIO_IDR_13)
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <BSP_PB_GetState+0x34>)
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	401a      	ands	r2, r3
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	019b      	lsls	r3, r3, #6
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d103      	bne.n	80045b0 <BSP_PB_GetState+0x20>
	{
		state = 0;
 80045a8:	1dfb      	adds	r3, r7, #7
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <BSP_PB_GetState+0x26>
	}
	else
	{
		state = 1;
 80045b0:	1dfb      	adds	r3, r7, #7
 80045b2:	2201      	movs	r2, #1
 80045b4:	701a      	strb	r2, [r3, #0]
	}

	return state;
 80045b6:	1dfb      	adds	r3, r7, #7
 80045b8:	781b      	ldrb	r3, [r3, #0]
}
 80045ba:	0018      	movs	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	b002      	add	sp, #8
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	48000800 	.word	0x48000800

080045c8 <BSP_Console_Init>:
 * TX -> PA2 (AF1)
 * RX -> PA3 (AF1)
 */

void BSP_Console_Init()
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80045cc:	4b2b      	ldr	r3, [pc, #172]	; (800467c <BSP_Console_Init+0xb4>)
 80045ce:	4a2b      	ldr	r2, [pc, #172]	; (800467c <BSP_Console_Init+0xb4>)
 80045d0:	6952      	ldr	r2, [r2, #20]
 80045d2:	2180      	movs	r1, #128	; 0x80
 80045d4:	0289      	lsls	r1, r1, #10
 80045d6:	430a      	orrs	r2, r1
 80045d8:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 80045da:	2390      	movs	r3, #144	; 0x90
 80045dc:	05db      	lsls	r3, r3, #23
 80045de:	2290      	movs	r2, #144	; 0x90
 80045e0:	05d2      	lsls	r2, r2, #23
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	21f0      	movs	r1, #240	; 0xf0
 80045e6:	438a      	bics	r2, r1
 80045e8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 80045ea:	2390      	movs	r3, #144	; 0x90
 80045ec:	05db      	lsls	r3, r3, #23
 80045ee:	2290      	movs	r2, #144	; 0x90
 80045f0:	05d2      	lsls	r2, r2, #23
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	21a0      	movs	r1, #160	; 0xa0
 80045f6:	430a      	orrs	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 80045fa:	2390      	movs	r3, #144	; 0x90
 80045fc:	05db      	lsls	r3, r3, #23
 80045fe:	2290      	movs	r2, #144	; 0x90
 8004600:	05d2      	lsls	r2, r2, #23
 8004602:	6a12      	ldr	r2, [r2, #32]
 8004604:	491e      	ldr	r1, [pc, #120]	; (8004680 <BSP_Console_Init+0xb8>)
 8004606:	400a      	ands	r2, r1
 8004608:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 800460a:	2390      	movs	r3, #144	; 0x90
 800460c:	05db      	lsls	r3, r3, #23
 800460e:	2290      	movs	r2, #144	; 0x90
 8004610:	05d2      	lsls	r2, r2, #23
 8004612:	6a12      	ldr	r2, [r2, #32]
 8004614:	2188      	movs	r1, #136	; 0x88
 8004616:	0149      	lsls	r1, r1, #5
 8004618:	430a      	orrs	r2, r1
 800461a:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 800461c:	4b17      	ldr	r3, [pc, #92]	; (800467c <BSP_Console_Init+0xb4>)
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <BSP_Console_Init+0xb4>)
 8004620:	69d2      	ldr	r2, [r2, #28]
 8004622:	2180      	movs	r1, #128	; 0x80
 8004624:	0289      	lsls	r1, r1, #10
 8004626:	430a      	orrs	r2, r1
 8004628:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <BSP_Console_Init+0xbc>)
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <BSP_Console_Init+0xbc>)
 8004632:	2200      	movs	r2, #0
 8004634:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 8004636:	4b13      	ldr	r3, [pc, #76]	; (8004684 <BSP_Console_Init+0xbc>)
 8004638:	2200      	movs	r2, #0
 800463a:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 800463c:	4b0f      	ldr	r3, [pc, #60]	; (800467c <BSP_Console_Init+0xb4>)
 800463e:	4a0f      	ldr	r2, [pc, #60]	; (800467c <BSP_Console_Init+0xb4>)
 8004640:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004642:	4911      	ldr	r1, [pc, #68]	; (8004688 <BSP_Console_Init+0xc0>)
 8004644:	400a      	ands	r2, r1
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
	// BRR = 417 -> Baud Rate = 115107.9137 -> 0.08% error
	//
	// With OVER8=1 and Fck=48MHz, USARTDIV = 2*48E6/115200 = 833.3333
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)

	USART2->CR1 |= USART_CR1_OVER8;
 8004648:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <BSP_Console_Init+0xbc>)
 800464a:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <BSP_Console_Init+0xbc>)
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	2180      	movs	r1, #128	; 0x80
 8004650:	0209      	lsls	r1, r1, #8
 8004652:	430a      	orrs	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
	USART2->BRR = 833;
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <BSP_Console_Init+0xbc>)
 8004658:	4a0c      	ldr	r2, [pc, #48]	; (800468c <BSP_Console_Init+0xc4>)
 800465a:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <BSP_Console_Init+0xbc>)
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <BSP_Console_Init+0xbc>)
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	210c      	movs	r1, #12
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <BSP_Console_Init+0xbc>)
 800466a:	4a06      	ldr	r2, [pc, #24]	; (8004684 <BSP_Console_Init+0xbc>)
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	2101      	movs	r1, #1
 8004670:	430a      	orrs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	40021000 	.word	0x40021000
 8004680:	ffff00ff 	.word	0xffff00ff
 8004684:	40004400 	.word	0x40004400
 8004688:	fffcffff 	.word	0xfffcffff
 800468c:	00000341 	.word	0x00000341

08004690 <BSP_TIMER_Timebase_Init>:
 * Prescaler   = 48000 -> Counting period = 1ms
 * Auto-reload = 200   -> Update period   = 200ms
 */

void BSP_TIMER_Timebase_Init()
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
	// Enable TIM6 clock
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <BSP_TIMER_Timebase_Init+0x54>)
 8004696:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <BSP_TIMER_Timebase_Init+0x54>)
 8004698:	69d2      	ldr	r2, [r2, #28]
 800469a:	2110      	movs	r1, #16
 800469c:	430a      	orrs	r2, r1
 800469e:	61da      	str	r2, [r3, #28]

	// Reset TIM6 configuration
	TIM6->CR1 = 0x0000;
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
	TIM6->CR2 = 0x0000;
 80046a6:	4b10      	ldr	r3, [pc, #64]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]

	// Set TIM6 prescaler
	// Fck = 48MHz -> /48 = 100kHz counting frequency
	TIM6->PSC = (uint16_t) 480 -1;
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046ae:	22e0      	movs	r2, #224	; 0xe0
 80046b0:	32ff      	adds	r2, #255	; 0xff
 80046b2:	629a      	str	r2, [r3, #40]	; 0x28

	// Set TIM6 auto-reload register for 1ms
	TIM6->ARR = (uint16_t) 100 -1;
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046b6:	2263      	movs	r2, #99	; 0x63
 80046b8:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable auto-reload preload
	TIM6->CR1 |= TIM_CR1_ARPE;
 80046ba:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046bc:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	430a      	orrs	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]

	// Enable Interrupt upon Update Event
	TIM6->DIER |= TIM_DIER_UIE;
 80046c6:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046c8:	4a07      	ldr	r2, [pc, #28]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046ca:	68d2      	ldr	r2, [r2, #12]
 80046cc:	2101      	movs	r1, #1
 80046ce:	430a      	orrs	r2, r1
 80046d0:	60da      	str	r2, [r3, #12]

	// Start TIM6 counter
	TIM6->CR1 |= TIM_CR1_CEN;
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046d4:	4a04      	ldr	r2, [pc, #16]	; (80046e8 <BSP_TIMER_Timebase_Init+0x58>)
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	2101      	movs	r1, #1
 80046da:	430a      	orrs	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	40001000 	.word	0x40001000

080046ec <BSP_NVIC_Init>:
 * BSP_NVIC_Init()
 * Setup NVIC controller for desired interrupts
 */

void BSP_NVIC_Init()
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
	// Set maximum priority for EXTI line 4 to 15 interrupts
	NVIC_SetPriority(EXTI4_15_IRQn, 0);
 80046f0:	2100      	movs	r1, #0
 80046f2:	2007      	movs	r0, #7
 80046f4:	f7ff fe50 	bl	8004398 <__NVIC_SetPriority>

	// Enable EXTI line 4 to 15 (user button on line 13) interrupts
	NVIC_EnableIRQ(EXTI4_15_IRQn);
 80046f8:	2007      	movs	r0, #7
 80046fa:	f7ff fe33 	bl	8004364 <__NVIC_EnableIRQ>

	// Set priority level 1 for TIM6 interrupt
	NVIC_SetPriority(TIM6_DAC_IRQn, 1);
 80046fe:	2101      	movs	r1, #1
 8004700:	2011      	movs	r0, #17
 8004702:	f7ff fe49 	bl	8004398 <__NVIC_SetPriority>

	// Enable TIM6 interrupts
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004706:	2011      	movs	r0, #17
 8004708:	f7ff fe2c 	bl	8004364 <__NVIC_EnableIRQ>
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <BSP_millis>:

int BSP_millis()
{
 8004712:	b580      	push	{r7, lr}
 8004714:	af00      	add	r7, sp, #0
	return timebase_tick_ms;
 8004716:	4b02      	ldr	r3, [pc, #8]	; (8004720 <BSP_millis+0xe>)
 8004718:	681b      	ldr	r3, [r3, #0]
}
 800471a:	0018      	movs	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200003fc 	.word	0x200003fc

08004724 <BSP_SPI1_Init>:
#include "comSX1272.h"

static uint8_t BSP_SPI_SendReceive(uint8_t tx_byte);

void BSP_SPI1_Init()
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0

	/////////////////////////////////////////////////
	// Configure PB6 as CS pin
	//
	// Enable GPIOB clock
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8004728:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <BSP_SPI1_Init+0x104>)
 800472a:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <BSP_SPI1_Init+0x104>)
 800472c:	6952      	ldr	r2, [r2, #20]
 800472e:	2180      	movs	r1, #128	; 0x80
 8004730:	02c9      	lsls	r1, r1, #11
 8004732:	430a      	orrs	r2, r1
 8004734:	615a      	str	r2, [r3, #20]

	// Configure PB6 as output
	GPIOB->MODER &= ~GPIO_MODER_MODER6_Msk;
 8004736:	4b3d      	ldr	r3, [pc, #244]	; (800482c <BSP_SPI1_Init+0x108>)
 8004738:	4a3c      	ldr	r2, [pc, #240]	; (800482c <BSP_SPI1_Init+0x108>)
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	493c      	ldr	r1, [pc, #240]	; (8004830 <BSP_SPI1_Init+0x10c>)
 800473e:	400a      	ands	r2, r1
 8004740:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= (0x01 <<GPIO_MODER_MODER6_Pos);
 8004742:	4b3a      	ldr	r3, [pc, #232]	; (800482c <BSP_SPI1_Init+0x108>)
 8004744:	4a39      	ldr	r2, [pc, #228]	; (800482c <BSP_SPI1_Init+0x108>)
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	0149      	lsls	r1, r1, #5
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]

	// Configure PB6 as Push-Pull output
	GPIOB->OTYPER &= ~GPIO_OTYPER_OT_6;
 8004750:	4b36      	ldr	r3, [pc, #216]	; (800482c <BSP_SPI1_Init+0x108>)
 8004752:	4a36      	ldr	r2, [pc, #216]	; (800482c <BSP_SPI1_Init+0x108>)
 8004754:	6852      	ldr	r2, [r2, #4]
 8004756:	2140      	movs	r1, #64	; 0x40
 8004758:	438a      	bics	r2, r1
 800475a:	605a      	str	r2, [r3, #4]

	// Configure PB6 as High-Speed Output
	GPIOB->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR6_Msk;
 800475c:	4b33      	ldr	r3, [pc, #204]	; (800482c <BSP_SPI1_Init+0x108>)
 800475e:	4a33      	ldr	r2, [pc, #204]	; (800482c <BSP_SPI1_Init+0x108>)
 8004760:	6892      	ldr	r2, [r2, #8]
 8004762:	4933      	ldr	r1, [pc, #204]	; (8004830 <BSP_SPI1_Init+0x10c>)
 8004764:	400a      	ands	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR6_Pos);
 8004768:	4b30      	ldr	r3, [pc, #192]	; (800482c <BSP_SPI1_Init+0x108>)
 800476a:	4a30      	ldr	r2, [pc, #192]	; (800482c <BSP_SPI1_Init+0x108>)
 800476c:	6892      	ldr	r2, [r2, #8]
 800476e:	21c0      	movs	r1, #192	; 0xc0
 8004770:	0189      	lsls	r1, r1, #6
 8004772:	430a      	orrs	r2, r1
 8004774:	609a      	str	r2, [r3, #8]

	// Disable PB6 Pull-up/Pull-down
	GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR6_Msk;
 8004776:	4b2d      	ldr	r3, [pc, #180]	; (800482c <BSP_SPI1_Init+0x108>)
 8004778:	4a2c      	ldr	r2, [pc, #176]	; (800482c <BSP_SPI1_Init+0x108>)
 800477a:	68d2      	ldr	r2, [r2, #12]
 800477c:	492c      	ldr	r1, [pc, #176]	; (8004830 <BSP_SPI1_Init+0x10c>)
 800477e:	400a      	ands	r2, r1
 8004780:	60da      	str	r2, [r3, #12]

	// Idle state is high
	GPIOB->BSRR = GPIO_BSRR_BS_6;
 8004782:	4b2a      	ldr	r3, [pc, #168]	; (800482c <BSP_SPI1_Init+0x108>)
 8004784:	2240      	movs	r2, #64	; 0x40
 8004786:	619a      	str	r2, [r3, #24]

	///////////////////////////////////////////////////
	// Configure PA5, PA6, PA7 as SPI1 pins (AF0)
	//
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8004788:	4b27      	ldr	r3, [pc, #156]	; (8004828 <BSP_SPI1_Init+0x104>)
 800478a:	4a27      	ldr	r2, [pc, #156]	; (8004828 <BSP_SPI1_Init+0x104>)
 800478c:	6952      	ldr	r2, [r2, #20]
 800478e:	2180      	movs	r1, #128	; 0x80
 8004790:	0289      	lsls	r1, r1, #10
 8004792:	430a      	orrs	r2, r1
 8004794:	615a      	str	r2, [r3, #20]

	// Configure PA5, PA6, PA7 as AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODER5 | GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
 8004796:	2390      	movs	r3, #144	; 0x90
 8004798:	05db      	lsls	r3, r3, #23
 800479a:	2290      	movs	r2, #144	; 0x90
 800479c:	05d2      	lsls	r2, r2, #23
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	4924      	ldr	r1, [pc, #144]	; (8004834 <BSP_SPI1_Init+0x110>)
 80047a2:	400a      	ands	r2, r1
 80047a4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<10U) |(0x02 <<12U) |(0x02 <<14U);
 80047a6:	2390      	movs	r3, #144	; 0x90
 80047a8:	05db      	lsls	r3, r3, #23
 80047aa:	2290      	movs	r2, #144	; 0x90
 80047ac:	05d2      	lsls	r2, r2, #23
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	21a8      	movs	r1, #168	; 0xa8
 80047b2:	0209      	lsls	r1, r1, #8
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]

	// Connect to SPI1 (AF0)
	GPIOA->AFR[0] &= ~(0xFFF00000);
 80047b8:	2390      	movs	r3, #144	; 0x90
 80047ba:	05db      	lsls	r3, r3, #23
 80047bc:	2290      	movs	r2, #144	; 0x90
 80047be:	05d2      	lsls	r2, r2, #23
 80047c0:	6a12      	ldr	r2, [r2, #32]
 80047c2:	0312      	lsls	r2, r2, #12
 80047c4:	0b12      	lsrs	r2, r2, #12
 80047c6:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00000000);
 80047c8:	2390      	movs	r3, #144	; 0x90
 80047ca:	05db      	lsls	r3, r3, #23
 80047cc:	2290      	movs	r2, #144	; 0x90
 80047ce:	05d2      	lsls	r2, r2, #23
 80047d0:	6a12      	ldr	r2, [r2, #32]
 80047d2:	621a      	str	r2, [r3, #32]

	// Enable SPI1 Clock
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <BSP_SPI1_Init+0x104>)
 80047d6:	4a14      	ldr	r2, [pc, #80]	; (8004828 <BSP_SPI1_Init+0x104>)
 80047d8:	6992      	ldr	r2, [r2, #24]
 80047da:	2180      	movs	r1, #128	; 0x80
 80047dc:	0149      	lsls	r1, r1, #5
 80047de:	430a      	orrs	r2, r1
 80047e0:	619a      	str	r2, [r3, #24]

	// Configure SPI with default config
	// 4-wire = full-duplex (MISO/MOSI on separated lines)
	// 8-bit, no CRC, MSB first
	// CPHA = 0, CPOL = 0 -> SPI mode 0 (first clock rising edge)
	SPI1->CR1 = 0x0000;
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <BSP_SPI1_Init+0x114>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
	SPI1->CR2 = 0x0000;
 80047e8:	4b13      	ldr	r3, [pc, #76]	; (8004838 <BSP_SPI1_Init+0x114>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	605a      	str	r2, [r3, #4]

	// Set the baudrate to 48MHz /128 = 375kHz (slow, but easy to debug)
	SPI1->CR1 |= 0x06 <<SPI_CR1_BR_Pos;
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <BSP_SPI1_Init+0x114>)
 80047f0:	4a11      	ldr	r2, [pc, #68]	; (8004838 <BSP_SPI1_Init+0x114>)
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	2130      	movs	r1, #48	; 0x30
 80047f6:	430a      	orrs	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]

	// Set data size to 8-bit
	SPI1->CR2 |= 0x07 <<SPI_CR2_DS_Pos;
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <BSP_SPI1_Init+0x114>)
 80047fc:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <BSP_SPI1_Init+0x114>)
 80047fe:	6852      	ldr	r2, [r2, #4]
 8004800:	21e0      	movs	r1, #224	; 0xe0
 8004802:	00c9      	lsls	r1, r1, #3
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]

	// Set as master (SSI must be high), with software managed NSS
	SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM;
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <BSP_SPI1_Init+0x114>)
 800480a:	4a0b      	ldr	r2, [pc, #44]	; (8004838 <BSP_SPI1_Init+0x114>)
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	21c1      	movs	r1, #193	; 0xc1
 8004810:	0089      	lsls	r1, r1, #2
 8004812:	430a      	orrs	r2, r1
 8004814:	601a      	str	r2, [r3, #0]

	// Enable SPI1
	SPI1->CR1 |= SPI_CR1_SPE;
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <BSP_SPI1_Init+0x114>)
 8004818:	4a07      	ldr	r2, [pc, #28]	; (8004838 <BSP_SPI1_Init+0x114>)
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	2140      	movs	r1, #64	; 0x40
 800481e:	430a      	orrs	r2, r1
 8004820:	601a      	str	r2, [r3, #0]
}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	48000400 	.word	0x48000400
 8004830:	ffffcfff 	.word	0xffffcfff
 8004834:	ffff03ff 	.word	0xffff03ff
 8004838:	40013000 	.word	0x40013000

0800483c <BSP_SX1272_Read>:

uint8_t BSP_SX1272_Read(uint8_t register_address)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	0002      	movs	r2, r0
 8004844:	1dfb      	adds	r3, r7, #7
 8004846:	701a      	strb	r2, [r3, #0]
	uint8_t data=0;
 8004848:	230f      	movs	r3, #15
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
	// Set FIFO threshold to 1-byte
	SPI1->CR2 |= SPI_CR2_FRXTH;
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <BSP_SX1272_Read+0x58>)
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <BSP_SX1272_Read+0x58>)
 8004854:	6852      	ldr	r2, [r2, #4]
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	0149      	lsls	r1, r1, #5
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]

	// Select slave (CS -> low)
	GPIOB->BSRR = GPIO_BSRR_BR_6;
 800485e:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <BSP_SX1272_Read+0x5c>)
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	03d2      	lsls	r2, r2, #15
 8004864:	619a      	str	r2, [r3, #24]

	// Send register address to read from
	BSP_SPI_SendReceive(register_address);
 8004866:	1dfb      	adds	r3, r7, #7
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	0018      	movs	r0, r3
 800486c:	f000 f844 	bl	80048f8 <BSP_SPI_SendReceive>

	data = BSP_SPI_SendReceive(0x00);
 8004870:	230f      	movs	r3, #15
 8004872:	18fc      	adds	r4, r7, r3
 8004874:	2000      	movs	r0, #0
 8004876:	f000 f83f 	bl	80048f8 <BSP_SPI_SendReceive>
 800487a:	0003      	movs	r3, r0
 800487c:	7023      	strb	r3, [r4, #0]

	// Release slave (CS -> High)
	GPIOB->BSRR = GPIO_BSRR_BS_6;
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <BSP_SX1272_Read+0x5c>)
 8004880:	2240      	movs	r2, #64	; 0x40
 8004882:	619a      	str	r2, [r3, #24]

	return data;
 8004884:	230f      	movs	r3, #15
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	781b      	ldrb	r3, [r3, #0]
}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	b005      	add	sp, #20
 8004890:	bd90      	pop	{r4, r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	40013000 	.word	0x40013000
 8004898:	48000400 	.word	0x48000400

0800489c <BSP_SX1272_Write>:

void BSP_SX1272_Write(uint8_t register_address, uint8_t data)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	0002      	movs	r2, r0
 80048a4:	1dfb      	adds	r3, r7, #7
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	1dbb      	adds	r3, r7, #6
 80048aa:	1c0a      	adds	r2, r1, #0
 80048ac:	701a      	strb	r2, [r3, #0]
	// Set FIFO threshold to 1-byte
	SPI1->CR2 |= SPI_CR2_FRXTH;
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <BSP_SX1272_Write+0x54>)
 80048b0:	4a0f      	ldr	r2, [pc, #60]	; (80048f0 <BSP_SX1272_Write+0x54>)
 80048b2:	6852      	ldr	r2, [r2, #4]
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	0149      	lsls	r1, r1, #5
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]

	// Select slave (CS -> low)
	GPIOB->BSRR = GPIO_BSRR_BR_6;
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <BSP_SX1272_Write+0x58>)
 80048be:	2280      	movs	r2, #128	; 0x80
 80048c0:	03d2      	lsls	r2, r2, #15
 80048c2:	619a      	str	r2, [r3, #24]

	// Send register address to write to
	BSP_SPI_SendReceive(register_address | 0x80);
 80048c4:	1dfb      	adds	r3, r7, #7
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2280      	movs	r2, #128	; 0x80
 80048ca:	4252      	negs	r2, r2
 80048cc:	4313      	orrs	r3, r2
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	0018      	movs	r0, r3
 80048d2:	f000 f811 	bl	80048f8 <BSP_SPI_SendReceive>

	// Send data to write
	BSP_SPI_SendReceive(data);
 80048d6:	1dbb      	adds	r3, r7, #6
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	0018      	movs	r0, r3
 80048dc:	f000 f80c 	bl	80048f8 <BSP_SPI_SendReceive>

	// Release slave (CS -> High)
	GPIOB->BSRR = GPIO_BSRR_BS_6;
 80048e0:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <BSP_SX1272_Write+0x58>)
 80048e2:	2240      	movs	r2, #64	; 0x40
 80048e4:	619a      	str	r2, [r3, #24]
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b002      	add	sp, #8
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	40013000 	.word	0x40013000
 80048f4:	48000400 	.word	0x48000400

080048f8 <BSP_SPI_SendReceive>:

static uint8_t BSP_SPI_SendReceive(uint8_t tx_byte)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	0002      	movs	r2, r0
 8004900:	1dfb      	adds	r3, r7, #7
 8004902:	701a      	strb	r2, [r3, #0]
	uint8_t	rx_byte;

	// Make sure TXE is set before sending data
	while((SPI1->SR & SPI_SR_TXE_Msk) == 0);
 8004904:	46c0      	nop			; (mov r8, r8)
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <BSP_SPI_SendReceive+0x44>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2202      	movs	r2, #2
 800490c:	4013      	ands	r3, r2
 800490e:	d0fa      	beq.n	8004906 <BSP_SPI_SendReceive+0xe>

	// Send tx_byte
	*(__IO uint8_t *)&SPI1->DR = tx_byte;
 8004910:	4a0b      	ldr	r2, [pc, #44]	; (8004940 <BSP_SPI_SendReceive+0x48>)
 8004912:	1dfb      	adds	r3, r7, #7
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	7013      	strb	r3, [r2, #0]

	// Wait until incoming data has arrived
	while((SPI1->SR & SPI_SR_RXNE_Msk) == 0);
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	4b08      	ldr	r3, [pc, #32]	; (800493c <BSP_SPI_SendReceive+0x44>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2201      	movs	r2, #1
 8004920:	4013      	ands	r3, r2
 8004922:	d0fa      	beq.n	800491a <BSP_SPI_SendReceive+0x22>

	// Read data
	rx_byte = *(__IO uint8_t *)&SPI1->DR;
 8004924:	4a06      	ldr	r2, [pc, #24]	; (8004940 <BSP_SPI_SendReceive+0x48>)
 8004926:	230f      	movs	r3, #15
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	701a      	strb	r2, [r3, #0]

	return rx_byte;
 800492e:	230f      	movs	r3, #15
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	781b      	ldrb	r3, [r3, #0]
}
 8004934:	0018      	movs	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	b004      	add	sp, #16
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40013000 	.word	0x40013000
 8004940:	4001300c 	.word	0x4001300c

08004944 <BSP_DELAY_ms>:
/*
 *  Basic delay functions
 */

void BSP_DELAY_ms(uint32_t delay)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	uint32_t	i;
	for(i=0; i<(delay*2500); i++);		// Tuned for ms at 48MHz
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	e002      	b.n	8004958 <BSP_DELAY_ms+0x14>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3301      	adds	r3, #1
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a04      	ldr	r2, [pc, #16]	; (800496c <BSP_DELAY_ms+0x28>)
 800495c:	435a      	muls	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d8f6      	bhi.n	8004952 <BSP_DELAY_ms+0xe>
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b004      	add	sp, #16
 800496a:	bd80      	pop	{r7, pc}
 800496c:	000009c4 	.word	0x000009c4

08004970 <BSP_DELAY_us>:

void BSP_DELAY_us(uint32_t delay)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
	uint32_t	i;
	for(i=0; i<(delay*3); i++);		// Tuned for µs at 48MHz
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e002      	b.n	8004984 <BSP_DELAY_us+0x14>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3301      	adds	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	0013      	movs	r3, r2
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	189a      	adds	r2, r3, r2
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	429a      	cmp	r2, r3
 8004990:	d8f5      	bhi.n	800497e <BSP_DELAY_us+0xe>
}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	46bd      	mov	sp, r7
 8004996:	b004      	add	sp, #16
 8004998:	bd80      	pop	{r7, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	08009178 	.word	0x08009178
 80049a0:	20000000 	.word	0x20000000
 80049a4:	2000009c 	.word	0x2000009c
 80049a8:	2000009c 	.word	0x2000009c
 80049ac:	20000404 	.word	0x20000404

080049b0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80049b4:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <SystemInit+0x70>)
 80049b6:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <SystemInit+0x70>)
 80049b8:	6812      	ldr	r2, [r2, #0]
 80049ba:	2101      	movs	r1, #1
 80049bc:	430a      	orrs	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <SystemInit+0x70>)
 80049c2:	4a17      	ldr	r2, [pc, #92]	; (8004a20 <SystemInit+0x70>)
 80049c4:	6852      	ldr	r2, [r2, #4]
 80049c6:	4917      	ldr	r1, [pc, #92]	; (8004a24 <SystemInit+0x74>)
 80049c8:	400a      	ands	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80049cc:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <SystemInit+0x70>)
 80049ce:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <SystemInit+0x70>)
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	4915      	ldr	r1, [pc, #84]	; (8004a28 <SystemInit+0x78>)
 80049d4:	400a      	ands	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <SystemInit+0x70>)
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <SystemInit+0x70>)
 80049dc:	6812      	ldr	r2, [r2, #0]
 80049de:	4913      	ldr	r1, [pc, #76]	; (8004a2c <SystemInit+0x7c>)
 80049e0:	400a      	ands	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <SystemInit+0x70>)
 80049e6:	4a0e      	ldr	r2, [pc, #56]	; (8004a20 <SystemInit+0x70>)
 80049e8:	6852      	ldr	r2, [r2, #4]
 80049ea:	4911      	ldr	r1, [pc, #68]	; (8004a30 <SystemInit+0x80>)
 80049ec:	400a      	ands	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <SystemInit+0x70>)
 80049f2:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <SystemInit+0x70>)
 80049f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049f6:	210f      	movs	r1, #15
 80049f8:	438a      	bics	r2, r1
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <SystemInit+0x70>)
 80049fe:	4a08      	ldr	r2, [pc, #32]	; (8004a20 <SystemInit+0x70>)
 8004a00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a02:	490c      	ldr	r1, [pc, #48]	; (8004a34 <SystemInit+0x84>)
 8004a04:	400a      	ands	r2, r1
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <SystemInit+0x70>)
 8004a0a:	4a05      	ldr	r2, [pc, #20]	; (8004a20 <SystemInit+0x70>)
 8004a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a0e:	2101      	movs	r1, #1
 8004a10:	438a      	bics	r2, r1
 8004a12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004a14:	4b02      	ldr	r3, [pc, #8]	; (8004a20 <SystemInit+0x70>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	609a      	str	r2, [r3, #8]

}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000
 8004a24:	08ffb80c 	.word	0x08ffb80c
 8004a28:	fef6ffff 	.word	0xfef6ffff
 8004a2c:	fffbffff 	.word	0xfffbffff
 8004a30:	ffc0ffff 	.word	0xffc0ffff
 8004a34:	fffcfe2c 	.word	0xfffcfe2c

08004a38 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	2300      	movs	r3, #0
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004a4e:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <SystemCoreClockUpdate+0xec>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	220c      	movs	r2, #12
 8004a54:	4013      	ands	r3, r2
 8004a56:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d007      	beq.n	8004a6e <SystemCoreClockUpdate+0x36>
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d009      	beq.n	8004a76 <SystemCoreClockUpdate+0x3e>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d148      	bne.n	8004af8 <SystemCoreClockUpdate+0xc0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8004a66:	4b30      	ldr	r3, [pc, #192]	; (8004b28 <SystemCoreClockUpdate+0xf0>)
 8004a68:	4a30      	ldr	r2, [pc, #192]	; (8004b2c <SystemCoreClockUpdate+0xf4>)
 8004a6a:	601a      	str	r2, [r3, #0]
      break;
 8004a6c:	e048      	b.n	8004b00 <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <SystemCoreClockUpdate+0xf0>)
 8004a70:	4a2e      	ldr	r2, [pc, #184]	; (8004b2c <SystemCoreClockUpdate+0xf4>)
 8004a72:	601a      	str	r2, [r3, #0]
      break;
 8004a74:	e044      	b.n	8004b00 <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8004a76:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <SystemCoreClockUpdate+0xec>)
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	23f0      	movs	r3, #240	; 0xf0
 8004a7c:	039b      	lsls	r3, r3, #14
 8004a7e:	4013      	ands	r3, r2
 8004a80:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8004a82:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <SystemCoreClockUpdate+0xec>)
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	23c0      	movs	r3, #192	; 0xc0
 8004a88:	025b      	lsls	r3, r3, #9
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	0c9b      	lsrs	r3, r3, #18
 8004a92:	3302      	adds	r3, #2
 8004a94:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8004a96:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <SystemCoreClockUpdate+0xec>)
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	220f      	movs	r2, #15
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	2380      	movs	r3, #128	; 0x80
 8004aa6:	025b      	lsls	r3, r3, #9
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d10a      	bne.n	8004ac2 <SystemCoreClockUpdate+0x8a>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	481f      	ldr	r0, [pc, #124]	; (8004b2c <SystemCoreClockUpdate+0xf4>)
 8004ab0:	f000 f84a 	bl	8004b48 <__udivsi3>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	001a      	movs	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	435a      	muls	r2, r3
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <SystemCoreClockUpdate+0xf0>)
 8004abe:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 8004ac0:	e01e      	b.n	8004b00 <SystemCoreClockUpdate+0xc8>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	23c0      	movs	r3, #192	; 0xc0
 8004ac6:	025b      	lsls	r3, r3, #9
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d10a      	bne.n	8004ae2 <SystemCoreClockUpdate+0xaa>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	4818      	ldr	r0, [pc, #96]	; (8004b30 <SystemCoreClockUpdate+0xf8>)
 8004ad0:	f000 f83a 	bl	8004b48 <__udivsi3>
 8004ad4:	0003      	movs	r3, r0
 8004ad6:	001a      	movs	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	435a      	muls	r2, r3
 8004adc:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <SystemCoreClockUpdate+0xf0>)
 8004ade:	601a      	str	r2, [r3, #0]
      break;
 8004ae0:	e00e      	b.n	8004b00 <SystemCoreClockUpdate+0xc8>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	4811      	ldr	r0, [pc, #68]	; (8004b2c <SystemCoreClockUpdate+0xf4>)
 8004ae6:	f000 f82f 	bl	8004b48 <__udivsi3>
 8004aea:	0003      	movs	r3, r0
 8004aec:	001a      	movs	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	435a      	muls	r2, r3
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <SystemCoreClockUpdate+0xf0>)
 8004af4:	601a      	str	r2, [r3, #0]
      break;
 8004af6:	e003      	b.n	8004b00 <SystemCoreClockUpdate+0xc8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <SystemCoreClockUpdate+0xf0>)
 8004afa:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <SystemCoreClockUpdate+0xf4>)
 8004afc:	601a      	str	r2, [r3, #0]
      break;
 8004afe:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <SystemCoreClockUpdate+0xec>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	220f      	movs	r2, #15
 8004b08:	4013      	ands	r3, r2
 8004b0a:	4a0a      	ldr	r2, [pc, #40]	; (8004b34 <SystemCoreClockUpdate+0xfc>)
 8004b0c:	5cd3      	ldrb	r3, [r2, r3]
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <SystemCoreClockUpdate+0xf0>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	40da      	lsrs	r2, r3
 8004b18:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <SystemCoreClockUpdate+0xf0>)
 8004b1a:	601a      	str	r2, [r3, #0]
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b004      	add	sp, #16
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40021000 	.word	0x40021000
 8004b28:	20000030 	.word	0x20000030
 8004b2c:	007a1200 	.word	0x007a1200
 8004b30:	02dc6c00 	.word	0x02dc6c00
 8004b34:	08009050 	.word	0x08009050

08004b38 <strlen>:
 8004b38:	2300      	movs	r3, #0
 8004b3a:	5cc2      	ldrb	r2, [r0, r3]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	d1fb      	bne.n	8004b3a <strlen+0x2>
 8004b42:	1e58      	subs	r0, r3, #1
 8004b44:	4770      	bx	lr
	...

08004b48 <__udivsi3>:
 8004b48:	2200      	movs	r2, #0
 8004b4a:	0843      	lsrs	r3, r0, #1
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	d374      	bcc.n	8004c3a <__udivsi3+0xf2>
 8004b50:	0903      	lsrs	r3, r0, #4
 8004b52:	428b      	cmp	r3, r1
 8004b54:	d35f      	bcc.n	8004c16 <__udivsi3+0xce>
 8004b56:	0a03      	lsrs	r3, r0, #8
 8004b58:	428b      	cmp	r3, r1
 8004b5a:	d344      	bcc.n	8004be6 <__udivsi3+0x9e>
 8004b5c:	0b03      	lsrs	r3, r0, #12
 8004b5e:	428b      	cmp	r3, r1
 8004b60:	d328      	bcc.n	8004bb4 <__udivsi3+0x6c>
 8004b62:	0c03      	lsrs	r3, r0, #16
 8004b64:	428b      	cmp	r3, r1
 8004b66:	d30d      	bcc.n	8004b84 <__udivsi3+0x3c>
 8004b68:	22ff      	movs	r2, #255	; 0xff
 8004b6a:	0209      	lsls	r1, r1, #8
 8004b6c:	ba12      	rev	r2, r2
 8004b6e:	0c03      	lsrs	r3, r0, #16
 8004b70:	428b      	cmp	r3, r1
 8004b72:	d302      	bcc.n	8004b7a <__udivsi3+0x32>
 8004b74:	1212      	asrs	r2, r2, #8
 8004b76:	0209      	lsls	r1, r1, #8
 8004b78:	d065      	beq.n	8004c46 <__udivsi3+0xfe>
 8004b7a:	0b03      	lsrs	r3, r0, #12
 8004b7c:	428b      	cmp	r3, r1
 8004b7e:	d319      	bcc.n	8004bb4 <__udivsi3+0x6c>
 8004b80:	e000      	b.n	8004b84 <__udivsi3+0x3c>
 8004b82:	0a09      	lsrs	r1, r1, #8
 8004b84:	0bc3      	lsrs	r3, r0, #15
 8004b86:	428b      	cmp	r3, r1
 8004b88:	d301      	bcc.n	8004b8e <__udivsi3+0x46>
 8004b8a:	03cb      	lsls	r3, r1, #15
 8004b8c:	1ac0      	subs	r0, r0, r3
 8004b8e:	4152      	adcs	r2, r2
 8004b90:	0b83      	lsrs	r3, r0, #14
 8004b92:	428b      	cmp	r3, r1
 8004b94:	d301      	bcc.n	8004b9a <__udivsi3+0x52>
 8004b96:	038b      	lsls	r3, r1, #14
 8004b98:	1ac0      	subs	r0, r0, r3
 8004b9a:	4152      	adcs	r2, r2
 8004b9c:	0b43      	lsrs	r3, r0, #13
 8004b9e:	428b      	cmp	r3, r1
 8004ba0:	d301      	bcc.n	8004ba6 <__udivsi3+0x5e>
 8004ba2:	034b      	lsls	r3, r1, #13
 8004ba4:	1ac0      	subs	r0, r0, r3
 8004ba6:	4152      	adcs	r2, r2
 8004ba8:	0b03      	lsrs	r3, r0, #12
 8004baa:	428b      	cmp	r3, r1
 8004bac:	d301      	bcc.n	8004bb2 <__udivsi3+0x6a>
 8004bae:	030b      	lsls	r3, r1, #12
 8004bb0:	1ac0      	subs	r0, r0, r3
 8004bb2:	4152      	adcs	r2, r2
 8004bb4:	0ac3      	lsrs	r3, r0, #11
 8004bb6:	428b      	cmp	r3, r1
 8004bb8:	d301      	bcc.n	8004bbe <__udivsi3+0x76>
 8004bba:	02cb      	lsls	r3, r1, #11
 8004bbc:	1ac0      	subs	r0, r0, r3
 8004bbe:	4152      	adcs	r2, r2
 8004bc0:	0a83      	lsrs	r3, r0, #10
 8004bc2:	428b      	cmp	r3, r1
 8004bc4:	d301      	bcc.n	8004bca <__udivsi3+0x82>
 8004bc6:	028b      	lsls	r3, r1, #10
 8004bc8:	1ac0      	subs	r0, r0, r3
 8004bca:	4152      	adcs	r2, r2
 8004bcc:	0a43      	lsrs	r3, r0, #9
 8004bce:	428b      	cmp	r3, r1
 8004bd0:	d301      	bcc.n	8004bd6 <__udivsi3+0x8e>
 8004bd2:	024b      	lsls	r3, r1, #9
 8004bd4:	1ac0      	subs	r0, r0, r3
 8004bd6:	4152      	adcs	r2, r2
 8004bd8:	0a03      	lsrs	r3, r0, #8
 8004bda:	428b      	cmp	r3, r1
 8004bdc:	d301      	bcc.n	8004be2 <__udivsi3+0x9a>
 8004bde:	020b      	lsls	r3, r1, #8
 8004be0:	1ac0      	subs	r0, r0, r3
 8004be2:	4152      	adcs	r2, r2
 8004be4:	d2cd      	bcs.n	8004b82 <__udivsi3+0x3a>
 8004be6:	09c3      	lsrs	r3, r0, #7
 8004be8:	428b      	cmp	r3, r1
 8004bea:	d301      	bcc.n	8004bf0 <__udivsi3+0xa8>
 8004bec:	01cb      	lsls	r3, r1, #7
 8004bee:	1ac0      	subs	r0, r0, r3
 8004bf0:	4152      	adcs	r2, r2
 8004bf2:	0983      	lsrs	r3, r0, #6
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	d301      	bcc.n	8004bfc <__udivsi3+0xb4>
 8004bf8:	018b      	lsls	r3, r1, #6
 8004bfa:	1ac0      	subs	r0, r0, r3
 8004bfc:	4152      	adcs	r2, r2
 8004bfe:	0943      	lsrs	r3, r0, #5
 8004c00:	428b      	cmp	r3, r1
 8004c02:	d301      	bcc.n	8004c08 <__udivsi3+0xc0>
 8004c04:	014b      	lsls	r3, r1, #5
 8004c06:	1ac0      	subs	r0, r0, r3
 8004c08:	4152      	adcs	r2, r2
 8004c0a:	0903      	lsrs	r3, r0, #4
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	d301      	bcc.n	8004c14 <__udivsi3+0xcc>
 8004c10:	010b      	lsls	r3, r1, #4
 8004c12:	1ac0      	subs	r0, r0, r3
 8004c14:	4152      	adcs	r2, r2
 8004c16:	08c3      	lsrs	r3, r0, #3
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	d301      	bcc.n	8004c20 <__udivsi3+0xd8>
 8004c1c:	00cb      	lsls	r3, r1, #3
 8004c1e:	1ac0      	subs	r0, r0, r3
 8004c20:	4152      	adcs	r2, r2
 8004c22:	0883      	lsrs	r3, r0, #2
 8004c24:	428b      	cmp	r3, r1
 8004c26:	d301      	bcc.n	8004c2c <__udivsi3+0xe4>
 8004c28:	008b      	lsls	r3, r1, #2
 8004c2a:	1ac0      	subs	r0, r0, r3
 8004c2c:	4152      	adcs	r2, r2
 8004c2e:	0843      	lsrs	r3, r0, #1
 8004c30:	428b      	cmp	r3, r1
 8004c32:	d301      	bcc.n	8004c38 <__udivsi3+0xf0>
 8004c34:	004b      	lsls	r3, r1, #1
 8004c36:	1ac0      	subs	r0, r0, r3
 8004c38:	4152      	adcs	r2, r2
 8004c3a:	1a41      	subs	r1, r0, r1
 8004c3c:	d200      	bcs.n	8004c40 <__udivsi3+0xf8>
 8004c3e:	4601      	mov	r1, r0
 8004c40:	4152      	adcs	r2, r2
 8004c42:	4610      	mov	r0, r2
 8004c44:	4770      	bx	lr
 8004c46:	e7ff      	b.n	8004c48 <__udivsi3+0x100>
 8004c48:	b501      	push	{r0, lr}
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	f000 f8f0 	bl	8004e30 <__aeabi_idiv0>
 8004c50:	bd02      	pop	{r1, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)

08004c54 <__aeabi_uidivmod>:
 8004c54:	2900      	cmp	r1, #0
 8004c56:	d0f7      	beq.n	8004c48 <__udivsi3+0x100>
 8004c58:	e776      	b.n	8004b48 <__udivsi3>
 8004c5a:	4770      	bx	lr

08004c5c <__divsi3>:
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	d47f      	bmi.n	8004d62 <__divsi3+0x106>
 8004c62:	2200      	movs	r2, #0
 8004c64:	0843      	lsrs	r3, r0, #1
 8004c66:	428b      	cmp	r3, r1
 8004c68:	d374      	bcc.n	8004d54 <__divsi3+0xf8>
 8004c6a:	0903      	lsrs	r3, r0, #4
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	d35f      	bcc.n	8004d30 <__divsi3+0xd4>
 8004c70:	0a03      	lsrs	r3, r0, #8
 8004c72:	428b      	cmp	r3, r1
 8004c74:	d344      	bcc.n	8004d00 <__divsi3+0xa4>
 8004c76:	0b03      	lsrs	r3, r0, #12
 8004c78:	428b      	cmp	r3, r1
 8004c7a:	d328      	bcc.n	8004cce <__divsi3+0x72>
 8004c7c:	0c03      	lsrs	r3, r0, #16
 8004c7e:	428b      	cmp	r3, r1
 8004c80:	d30d      	bcc.n	8004c9e <__divsi3+0x42>
 8004c82:	22ff      	movs	r2, #255	; 0xff
 8004c84:	0209      	lsls	r1, r1, #8
 8004c86:	ba12      	rev	r2, r2
 8004c88:	0c03      	lsrs	r3, r0, #16
 8004c8a:	428b      	cmp	r3, r1
 8004c8c:	d302      	bcc.n	8004c94 <__divsi3+0x38>
 8004c8e:	1212      	asrs	r2, r2, #8
 8004c90:	0209      	lsls	r1, r1, #8
 8004c92:	d065      	beq.n	8004d60 <__divsi3+0x104>
 8004c94:	0b03      	lsrs	r3, r0, #12
 8004c96:	428b      	cmp	r3, r1
 8004c98:	d319      	bcc.n	8004cce <__divsi3+0x72>
 8004c9a:	e000      	b.n	8004c9e <__divsi3+0x42>
 8004c9c:	0a09      	lsrs	r1, r1, #8
 8004c9e:	0bc3      	lsrs	r3, r0, #15
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	d301      	bcc.n	8004ca8 <__divsi3+0x4c>
 8004ca4:	03cb      	lsls	r3, r1, #15
 8004ca6:	1ac0      	subs	r0, r0, r3
 8004ca8:	4152      	adcs	r2, r2
 8004caa:	0b83      	lsrs	r3, r0, #14
 8004cac:	428b      	cmp	r3, r1
 8004cae:	d301      	bcc.n	8004cb4 <__divsi3+0x58>
 8004cb0:	038b      	lsls	r3, r1, #14
 8004cb2:	1ac0      	subs	r0, r0, r3
 8004cb4:	4152      	adcs	r2, r2
 8004cb6:	0b43      	lsrs	r3, r0, #13
 8004cb8:	428b      	cmp	r3, r1
 8004cba:	d301      	bcc.n	8004cc0 <__divsi3+0x64>
 8004cbc:	034b      	lsls	r3, r1, #13
 8004cbe:	1ac0      	subs	r0, r0, r3
 8004cc0:	4152      	adcs	r2, r2
 8004cc2:	0b03      	lsrs	r3, r0, #12
 8004cc4:	428b      	cmp	r3, r1
 8004cc6:	d301      	bcc.n	8004ccc <__divsi3+0x70>
 8004cc8:	030b      	lsls	r3, r1, #12
 8004cca:	1ac0      	subs	r0, r0, r3
 8004ccc:	4152      	adcs	r2, r2
 8004cce:	0ac3      	lsrs	r3, r0, #11
 8004cd0:	428b      	cmp	r3, r1
 8004cd2:	d301      	bcc.n	8004cd8 <__divsi3+0x7c>
 8004cd4:	02cb      	lsls	r3, r1, #11
 8004cd6:	1ac0      	subs	r0, r0, r3
 8004cd8:	4152      	adcs	r2, r2
 8004cda:	0a83      	lsrs	r3, r0, #10
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	d301      	bcc.n	8004ce4 <__divsi3+0x88>
 8004ce0:	028b      	lsls	r3, r1, #10
 8004ce2:	1ac0      	subs	r0, r0, r3
 8004ce4:	4152      	adcs	r2, r2
 8004ce6:	0a43      	lsrs	r3, r0, #9
 8004ce8:	428b      	cmp	r3, r1
 8004cea:	d301      	bcc.n	8004cf0 <__divsi3+0x94>
 8004cec:	024b      	lsls	r3, r1, #9
 8004cee:	1ac0      	subs	r0, r0, r3
 8004cf0:	4152      	adcs	r2, r2
 8004cf2:	0a03      	lsrs	r3, r0, #8
 8004cf4:	428b      	cmp	r3, r1
 8004cf6:	d301      	bcc.n	8004cfc <__divsi3+0xa0>
 8004cf8:	020b      	lsls	r3, r1, #8
 8004cfa:	1ac0      	subs	r0, r0, r3
 8004cfc:	4152      	adcs	r2, r2
 8004cfe:	d2cd      	bcs.n	8004c9c <__divsi3+0x40>
 8004d00:	09c3      	lsrs	r3, r0, #7
 8004d02:	428b      	cmp	r3, r1
 8004d04:	d301      	bcc.n	8004d0a <__divsi3+0xae>
 8004d06:	01cb      	lsls	r3, r1, #7
 8004d08:	1ac0      	subs	r0, r0, r3
 8004d0a:	4152      	adcs	r2, r2
 8004d0c:	0983      	lsrs	r3, r0, #6
 8004d0e:	428b      	cmp	r3, r1
 8004d10:	d301      	bcc.n	8004d16 <__divsi3+0xba>
 8004d12:	018b      	lsls	r3, r1, #6
 8004d14:	1ac0      	subs	r0, r0, r3
 8004d16:	4152      	adcs	r2, r2
 8004d18:	0943      	lsrs	r3, r0, #5
 8004d1a:	428b      	cmp	r3, r1
 8004d1c:	d301      	bcc.n	8004d22 <__divsi3+0xc6>
 8004d1e:	014b      	lsls	r3, r1, #5
 8004d20:	1ac0      	subs	r0, r0, r3
 8004d22:	4152      	adcs	r2, r2
 8004d24:	0903      	lsrs	r3, r0, #4
 8004d26:	428b      	cmp	r3, r1
 8004d28:	d301      	bcc.n	8004d2e <__divsi3+0xd2>
 8004d2a:	010b      	lsls	r3, r1, #4
 8004d2c:	1ac0      	subs	r0, r0, r3
 8004d2e:	4152      	adcs	r2, r2
 8004d30:	08c3      	lsrs	r3, r0, #3
 8004d32:	428b      	cmp	r3, r1
 8004d34:	d301      	bcc.n	8004d3a <__divsi3+0xde>
 8004d36:	00cb      	lsls	r3, r1, #3
 8004d38:	1ac0      	subs	r0, r0, r3
 8004d3a:	4152      	adcs	r2, r2
 8004d3c:	0883      	lsrs	r3, r0, #2
 8004d3e:	428b      	cmp	r3, r1
 8004d40:	d301      	bcc.n	8004d46 <__divsi3+0xea>
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	1ac0      	subs	r0, r0, r3
 8004d46:	4152      	adcs	r2, r2
 8004d48:	0843      	lsrs	r3, r0, #1
 8004d4a:	428b      	cmp	r3, r1
 8004d4c:	d301      	bcc.n	8004d52 <__divsi3+0xf6>
 8004d4e:	004b      	lsls	r3, r1, #1
 8004d50:	1ac0      	subs	r0, r0, r3
 8004d52:	4152      	adcs	r2, r2
 8004d54:	1a41      	subs	r1, r0, r1
 8004d56:	d200      	bcs.n	8004d5a <__divsi3+0xfe>
 8004d58:	4601      	mov	r1, r0
 8004d5a:	4152      	adcs	r2, r2
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4770      	bx	lr
 8004d60:	e05d      	b.n	8004e1e <__divsi3+0x1c2>
 8004d62:	0fca      	lsrs	r2, r1, #31
 8004d64:	d000      	beq.n	8004d68 <__divsi3+0x10c>
 8004d66:	4249      	negs	r1, r1
 8004d68:	1003      	asrs	r3, r0, #32
 8004d6a:	d300      	bcc.n	8004d6e <__divsi3+0x112>
 8004d6c:	4240      	negs	r0, r0
 8004d6e:	4053      	eors	r3, r2
 8004d70:	2200      	movs	r2, #0
 8004d72:	469c      	mov	ip, r3
 8004d74:	0903      	lsrs	r3, r0, #4
 8004d76:	428b      	cmp	r3, r1
 8004d78:	d32d      	bcc.n	8004dd6 <__divsi3+0x17a>
 8004d7a:	0a03      	lsrs	r3, r0, #8
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	d312      	bcc.n	8004da6 <__divsi3+0x14a>
 8004d80:	22fc      	movs	r2, #252	; 0xfc
 8004d82:	0189      	lsls	r1, r1, #6
 8004d84:	ba12      	rev	r2, r2
 8004d86:	0a03      	lsrs	r3, r0, #8
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	d30c      	bcc.n	8004da6 <__divsi3+0x14a>
 8004d8c:	0189      	lsls	r1, r1, #6
 8004d8e:	1192      	asrs	r2, r2, #6
 8004d90:	428b      	cmp	r3, r1
 8004d92:	d308      	bcc.n	8004da6 <__divsi3+0x14a>
 8004d94:	0189      	lsls	r1, r1, #6
 8004d96:	1192      	asrs	r2, r2, #6
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	d304      	bcc.n	8004da6 <__divsi3+0x14a>
 8004d9c:	0189      	lsls	r1, r1, #6
 8004d9e:	d03a      	beq.n	8004e16 <__divsi3+0x1ba>
 8004da0:	1192      	asrs	r2, r2, #6
 8004da2:	e000      	b.n	8004da6 <__divsi3+0x14a>
 8004da4:	0989      	lsrs	r1, r1, #6
 8004da6:	09c3      	lsrs	r3, r0, #7
 8004da8:	428b      	cmp	r3, r1
 8004daa:	d301      	bcc.n	8004db0 <__divsi3+0x154>
 8004dac:	01cb      	lsls	r3, r1, #7
 8004dae:	1ac0      	subs	r0, r0, r3
 8004db0:	4152      	adcs	r2, r2
 8004db2:	0983      	lsrs	r3, r0, #6
 8004db4:	428b      	cmp	r3, r1
 8004db6:	d301      	bcc.n	8004dbc <__divsi3+0x160>
 8004db8:	018b      	lsls	r3, r1, #6
 8004dba:	1ac0      	subs	r0, r0, r3
 8004dbc:	4152      	adcs	r2, r2
 8004dbe:	0943      	lsrs	r3, r0, #5
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	d301      	bcc.n	8004dc8 <__divsi3+0x16c>
 8004dc4:	014b      	lsls	r3, r1, #5
 8004dc6:	1ac0      	subs	r0, r0, r3
 8004dc8:	4152      	adcs	r2, r2
 8004dca:	0903      	lsrs	r3, r0, #4
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	d301      	bcc.n	8004dd4 <__divsi3+0x178>
 8004dd0:	010b      	lsls	r3, r1, #4
 8004dd2:	1ac0      	subs	r0, r0, r3
 8004dd4:	4152      	adcs	r2, r2
 8004dd6:	08c3      	lsrs	r3, r0, #3
 8004dd8:	428b      	cmp	r3, r1
 8004dda:	d301      	bcc.n	8004de0 <__divsi3+0x184>
 8004ddc:	00cb      	lsls	r3, r1, #3
 8004dde:	1ac0      	subs	r0, r0, r3
 8004de0:	4152      	adcs	r2, r2
 8004de2:	0883      	lsrs	r3, r0, #2
 8004de4:	428b      	cmp	r3, r1
 8004de6:	d301      	bcc.n	8004dec <__divsi3+0x190>
 8004de8:	008b      	lsls	r3, r1, #2
 8004dea:	1ac0      	subs	r0, r0, r3
 8004dec:	4152      	adcs	r2, r2
 8004dee:	d2d9      	bcs.n	8004da4 <__divsi3+0x148>
 8004df0:	0843      	lsrs	r3, r0, #1
 8004df2:	428b      	cmp	r3, r1
 8004df4:	d301      	bcc.n	8004dfa <__divsi3+0x19e>
 8004df6:	004b      	lsls	r3, r1, #1
 8004df8:	1ac0      	subs	r0, r0, r3
 8004dfa:	4152      	adcs	r2, r2
 8004dfc:	1a41      	subs	r1, r0, r1
 8004dfe:	d200      	bcs.n	8004e02 <__divsi3+0x1a6>
 8004e00:	4601      	mov	r1, r0
 8004e02:	4663      	mov	r3, ip
 8004e04:	4152      	adcs	r2, r2
 8004e06:	105b      	asrs	r3, r3, #1
 8004e08:	4610      	mov	r0, r2
 8004e0a:	d301      	bcc.n	8004e10 <__divsi3+0x1b4>
 8004e0c:	4240      	negs	r0, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d500      	bpl.n	8004e14 <__divsi3+0x1b8>
 8004e12:	4249      	negs	r1, r1
 8004e14:	4770      	bx	lr
 8004e16:	4663      	mov	r3, ip
 8004e18:	105b      	asrs	r3, r3, #1
 8004e1a:	d300      	bcc.n	8004e1e <__divsi3+0x1c2>
 8004e1c:	4240      	negs	r0, r0
 8004e1e:	b501      	push	{r0, lr}
 8004e20:	2000      	movs	r0, #0
 8004e22:	f000 f805 	bl	8004e30 <__aeabi_idiv0>
 8004e26:	bd02      	pop	{r1, pc}

08004e28 <__aeabi_idivmod>:
 8004e28:	2900      	cmp	r1, #0
 8004e2a:	d0f8      	beq.n	8004e1e <__divsi3+0x1c2>
 8004e2c:	e716      	b.n	8004c5c <__divsi3>
 8004e2e:	4770      	bx	lr

08004e30 <__aeabi_idiv0>:
 8004e30:	4770      	bx	lr
 8004e32:	46c0      	nop			; (mov r8, r8)

08004e34 <__aeabi_cdrcmple>:
 8004e34:	4684      	mov	ip, r0
 8004e36:	1c10      	adds	r0, r2, #0
 8004e38:	4662      	mov	r2, ip
 8004e3a:	468c      	mov	ip, r1
 8004e3c:	1c19      	adds	r1, r3, #0
 8004e3e:	4663      	mov	r3, ip
 8004e40:	e000      	b.n	8004e44 <__aeabi_cdcmpeq>
 8004e42:	46c0      	nop			; (mov r8, r8)

08004e44 <__aeabi_cdcmpeq>:
 8004e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e46:	f001 fd5b 	bl	8006900 <__ledf2>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d401      	bmi.n	8004e52 <__aeabi_cdcmpeq+0xe>
 8004e4e:	2100      	movs	r1, #0
 8004e50:	42c8      	cmn	r0, r1
 8004e52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08004e54 <__aeabi_dcmpeq>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	f001 fcb5 	bl	80067c4 <__eqdf2>
 8004e5a:	4240      	negs	r0, r0
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <__aeabi_dcmplt>:
 8004e60:	b510      	push	{r4, lr}
 8004e62:	f001 fd4d 	bl	8006900 <__ledf2>
 8004e66:	2800      	cmp	r0, #0
 8004e68:	db01      	blt.n	8004e6e <__aeabi_dcmplt+0xe>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	2001      	movs	r0, #1
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	46c0      	nop			; (mov r8, r8)

08004e74 <__aeabi_dcmple>:
 8004e74:	b510      	push	{r4, lr}
 8004e76:	f001 fd43 	bl	8006900 <__ledf2>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	dd01      	ble.n	8004e82 <__aeabi_dcmple+0xe>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	2001      	movs	r0, #1
 8004e84:	bd10      	pop	{r4, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)

08004e88 <__aeabi_dcmpgt>:
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	f001 fcd5 	bl	8006838 <__gedf2>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	dc01      	bgt.n	8004e96 <__aeabi_dcmpgt+0xe>
 8004e92:	2000      	movs	r0, #0
 8004e94:	bd10      	pop	{r4, pc}
 8004e96:	2001      	movs	r0, #1
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)

08004e9c <__aeabi_dcmpge>:
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	f001 fccb 	bl	8006838 <__gedf2>
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	da01      	bge.n	8004eaa <__aeabi_dcmpge+0xe>
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	2001      	movs	r0, #1
 8004eac:	bd10      	pop	{r4, pc}
 8004eae:	46c0      	nop			; (mov r8, r8)

08004eb0 <__aeabi_cfrcmple>:
 8004eb0:	4684      	mov	ip, r0
 8004eb2:	1c08      	adds	r0, r1, #0
 8004eb4:	4661      	mov	r1, ip
 8004eb6:	e7ff      	b.n	8004eb8 <__aeabi_cfcmpeq>

08004eb8 <__aeabi_cfcmpeq>:
 8004eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004eba:	f000 fa8b 	bl	80053d4 <__lesf2>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d401      	bmi.n	8004ec6 <__aeabi_cfcmpeq+0xe>
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	42c8      	cmn	r0, r1
 8004ec6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08004ec8 <__aeabi_fcmpeq>:
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	f000 fa1d 	bl	8005308 <__eqsf2>
 8004ece:	4240      	negs	r0, r0
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	bd10      	pop	{r4, pc}

08004ed4 <__aeabi_fcmplt>:
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	f000 fa7d 	bl	80053d4 <__lesf2>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	db01      	blt.n	8004ee2 <__aeabi_fcmplt+0xe>
 8004ede:	2000      	movs	r0, #0
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)

08004ee8 <__aeabi_fcmple>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	f000 fa73 	bl	80053d4 <__lesf2>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	dd01      	ble.n	8004ef6 <__aeabi_fcmple+0xe>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	bd10      	pop	{r4, pc}
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	bd10      	pop	{r4, pc}
 8004efa:	46c0      	nop			; (mov r8, r8)

08004efc <__aeabi_fcmpgt>:
 8004efc:	b510      	push	{r4, lr}
 8004efe:	f000 fa29 	bl	8005354 <__gesf2>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	dc01      	bgt.n	8004f0a <__aeabi_fcmpgt+0xe>
 8004f06:	2000      	movs	r0, #0
 8004f08:	bd10      	pop	{r4, pc}
 8004f0a:	2001      	movs	r0, #1
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)

08004f10 <__aeabi_fcmpge>:
 8004f10:	b510      	push	{r4, lr}
 8004f12:	f000 fa1f 	bl	8005354 <__gesf2>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	da01      	bge.n	8004f1e <__aeabi_fcmpge+0xe>
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	bd10      	pop	{r4, pc}
 8004f1e:	2001      	movs	r0, #1
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	46c0      	nop			; (mov r8, r8)

08004f24 <__aeabi_lmul>:
 8004f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f26:	46ce      	mov	lr, r9
 8004f28:	4647      	mov	r7, r8
 8004f2a:	0415      	lsls	r5, r2, #16
 8004f2c:	0c2d      	lsrs	r5, r5, #16
 8004f2e:	002e      	movs	r6, r5
 8004f30:	b580      	push	{r7, lr}
 8004f32:	0407      	lsls	r7, r0, #16
 8004f34:	0c14      	lsrs	r4, r2, #16
 8004f36:	0c3f      	lsrs	r7, r7, #16
 8004f38:	4699      	mov	r9, r3
 8004f3a:	0c03      	lsrs	r3, r0, #16
 8004f3c:	437e      	muls	r6, r7
 8004f3e:	435d      	muls	r5, r3
 8004f40:	4367      	muls	r7, r4
 8004f42:	4363      	muls	r3, r4
 8004f44:	197f      	adds	r7, r7, r5
 8004f46:	0c34      	lsrs	r4, r6, #16
 8004f48:	19e4      	adds	r4, r4, r7
 8004f4a:	469c      	mov	ip, r3
 8004f4c:	42a5      	cmp	r5, r4
 8004f4e:	d903      	bls.n	8004f58 <__aeabi_lmul+0x34>
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	025b      	lsls	r3, r3, #9
 8004f54:	4698      	mov	r8, r3
 8004f56:	44c4      	add	ip, r8
 8004f58:	464b      	mov	r3, r9
 8004f5a:	4351      	muls	r1, r2
 8004f5c:	4343      	muls	r3, r0
 8004f5e:	0436      	lsls	r6, r6, #16
 8004f60:	0c36      	lsrs	r6, r6, #16
 8004f62:	0c25      	lsrs	r5, r4, #16
 8004f64:	0424      	lsls	r4, r4, #16
 8004f66:	4465      	add	r5, ip
 8004f68:	19a4      	adds	r4, r4, r6
 8004f6a:	1859      	adds	r1, r3, r1
 8004f6c:	1949      	adds	r1, r1, r5
 8004f6e:	0020      	movs	r0, r4
 8004f70:	bc0c      	pop	{r2, r3}
 8004f72:	4690      	mov	r8, r2
 8004f74:	4699      	mov	r9, r3
 8004f76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f78 <__aeabi_f2uiz>:
 8004f78:	219e      	movs	r1, #158	; 0x9e
 8004f7a:	b510      	push	{r4, lr}
 8004f7c:	05c9      	lsls	r1, r1, #23
 8004f7e:	1c04      	adds	r4, r0, #0
 8004f80:	f7ff ffc6 	bl	8004f10 <__aeabi_fcmpge>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d103      	bne.n	8004f90 <__aeabi_f2uiz+0x18>
 8004f88:	1c20      	adds	r0, r4, #0
 8004f8a:	f000 fd21 	bl	80059d0 <__aeabi_f2iz>
 8004f8e:	bd10      	pop	{r4, pc}
 8004f90:	219e      	movs	r1, #158	; 0x9e
 8004f92:	1c20      	adds	r0, r4, #0
 8004f94:	05c9      	lsls	r1, r1, #23
 8004f96:	f000 fb7f 	bl	8005698 <__aeabi_fsub>
 8004f9a:	f000 fd19 	bl	80059d0 <__aeabi_f2iz>
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	061b      	lsls	r3, r3, #24
 8004fa2:	469c      	mov	ip, r3
 8004fa4:	4460      	add	r0, ip
 8004fa6:	e7f2      	b.n	8004f8e <__aeabi_f2uiz+0x16>

08004fa8 <__aeabi_d2uiz>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	2200      	movs	r2, #0
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <__aeabi_d2uiz+0x38>)
 8004fae:	0004      	movs	r4, r0
 8004fb0:	000d      	movs	r5, r1
 8004fb2:	f7ff ff73 	bl	8004e9c <__aeabi_dcmpge>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d104      	bne.n	8004fc4 <__aeabi_d2uiz+0x1c>
 8004fba:	0020      	movs	r0, r4
 8004fbc:	0029      	movs	r1, r5
 8004fbe:	f002 fab7 	bl	8007530 <__aeabi_d2iz>
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	4b06      	ldr	r3, [pc, #24]	; (8004fe0 <__aeabi_d2uiz+0x38>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	0020      	movs	r0, r4
 8004fca:	0029      	movs	r1, r5
 8004fcc:	f001 ff7a 	bl	8006ec4 <__aeabi_dsub>
 8004fd0:	f002 faae 	bl	8007530 <__aeabi_d2iz>
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	061b      	lsls	r3, r3, #24
 8004fd8:	469c      	mov	ip, r3
 8004fda:	4460      	add	r0, ip
 8004fdc:	e7f1      	b.n	8004fc2 <__aeabi_d2uiz+0x1a>
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	41e00000 	.word	0x41e00000

08004fe4 <__aeabi_fadd>:
 8004fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe6:	46c6      	mov	lr, r8
 8004fe8:	024e      	lsls	r6, r1, #9
 8004fea:	0247      	lsls	r7, r0, #9
 8004fec:	0a76      	lsrs	r6, r6, #9
 8004fee:	0a7b      	lsrs	r3, r7, #9
 8004ff0:	0044      	lsls	r4, r0, #1
 8004ff2:	0fc5      	lsrs	r5, r0, #31
 8004ff4:	00f7      	lsls	r7, r6, #3
 8004ff6:	0048      	lsls	r0, r1, #1
 8004ff8:	4698      	mov	r8, r3
 8004ffa:	b500      	push	{lr}
 8004ffc:	0e24      	lsrs	r4, r4, #24
 8004ffe:	002a      	movs	r2, r5
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	0e00      	lsrs	r0, r0, #24
 8005004:	0fc9      	lsrs	r1, r1, #31
 8005006:	46bc      	mov	ip, r7
 8005008:	428d      	cmp	r5, r1
 800500a:	d067      	beq.n	80050dc <__aeabi_fadd+0xf8>
 800500c:	1a22      	subs	r2, r4, r0
 800500e:	2a00      	cmp	r2, #0
 8005010:	dc00      	bgt.n	8005014 <__aeabi_fadd+0x30>
 8005012:	e0a5      	b.n	8005160 <__aeabi_fadd+0x17c>
 8005014:	2800      	cmp	r0, #0
 8005016:	d13a      	bne.n	800508e <__aeabi_fadd+0xaa>
 8005018:	2f00      	cmp	r7, #0
 800501a:	d100      	bne.n	800501e <__aeabi_fadd+0x3a>
 800501c:	e093      	b.n	8005146 <__aeabi_fadd+0x162>
 800501e:	1e51      	subs	r1, r2, #1
 8005020:	2900      	cmp	r1, #0
 8005022:	d000      	beq.n	8005026 <__aeabi_fadd+0x42>
 8005024:	e0bc      	b.n	80051a0 <__aeabi_fadd+0x1bc>
 8005026:	2401      	movs	r4, #1
 8005028:	1bdb      	subs	r3, r3, r7
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	d546      	bpl.n	80050bc <__aeabi_fadd+0xd8>
 800502e:	019b      	lsls	r3, r3, #6
 8005030:	099e      	lsrs	r6, r3, #6
 8005032:	0030      	movs	r0, r6
 8005034:	f002 fbce 	bl	80077d4 <__clzsi2>
 8005038:	3805      	subs	r0, #5
 800503a:	4086      	lsls	r6, r0
 800503c:	4284      	cmp	r4, r0
 800503e:	dd00      	ble.n	8005042 <__aeabi_fadd+0x5e>
 8005040:	e09d      	b.n	800517e <__aeabi_fadd+0x19a>
 8005042:	1b04      	subs	r4, r0, r4
 8005044:	0032      	movs	r2, r6
 8005046:	2020      	movs	r0, #32
 8005048:	3401      	adds	r4, #1
 800504a:	40e2      	lsrs	r2, r4
 800504c:	1b04      	subs	r4, r0, r4
 800504e:	40a6      	lsls	r6, r4
 8005050:	0033      	movs	r3, r6
 8005052:	1e5e      	subs	r6, r3, #1
 8005054:	41b3      	sbcs	r3, r6
 8005056:	2400      	movs	r4, #0
 8005058:	4313      	orrs	r3, r2
 800505a:	075a      	lsls	r2, r3, #29
 800505c:	d004      	beq.n	8005068 <__aeabi_fadd+0x84>
 800505e:	220f      	movs	r2, #15
 8005060:	401a      	ands	r2, r3
 8005062:	2a04      	cmp	r2, #4
 8005064:	d000      	beq.n	8005068 <__aeabi_fadd+0x84>
 8005066:	3304      	adds	r3, #4
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	d529      	bpl.n	80050c0 <__aeabi_fadd+0xdc>
 800506c:	3401      	adds	r4, #1
 800506e:	2cff      	cmp	r4, #255	; 0xff
 8005070:	d100      	bne.n	8005074 <__aeabi_fadd+0x90>
 8005072:	e081      	b.n	8005178 <__aeabi_fadd+0x194>
 8005074:	002a      	movs	r2, r5
 8005076:	019b      	lsls	r3, r3, #6
 8005078:	0a5b      	lsrs	r3, r3, #9
 800507a:	b2e4      	uxtb	r4, r4
 800507c:	025b      	lsls	r3, r3, #9
 800507e:	05e4      	lsls	r4, r4, #23
 8005080:	0a58      	lsrs	r0, r3, #9
 8005082:	07d2      	lsls	r2, r2, #31
 8005084:	4320      	orrs	r0, r4
 8005086:	4310      	orrs	r0, r2
 8005088:	bc04      	pop	{r2}
 800508a:	4690      	mov	r8, r2
 800508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800508e:	2cff      	cmp	r4, #255	; 0xff
 8005090:	d0e3      	beq.n	800505a <__aeabi_fadd+0x76>
 8005092:	2180      	movs	r1, #128	; 0x80
 8005094:	0038      	movs	r0, r7
 8005096:	04c9      	lsls	r1, r1, #19
 8005098:	4308      	orrs	r0, r1
 800509a:	4684      	mov	ip, r0
 800509c:	2a1b      	cmp	r2, #27
 800509e:	dd00      	ble.n	80050a2 <__aeabi_fadd+0xbe>
 80050a0:	e082      	b.n	80051a8 <__aeabi_fadd+0x1c4>
 80050a2:	2020      	movs	r0, #32
 80050a4:	4661      	mov	r1, ip
 80050a6:	40d1      	lsrs	r1, r2
 80050a8:	1a82      	subs	r2, r0, r2
 80050aa:	4660      	mov	r0, ip
 80050ac:	4090      	lsls	r0, r2
 80050ae:	0002      	movs	r2, r0
 80050b0:	1e50      	subs	r0, r2, #1
 80050b2:	4182      	sbcs	r2, r0
 80050b4:	430a      	orrs	r2, r1
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	d4b8      	bmi.n	800502e <__aeabi_fadd+0x4a>
 80050bc:	075a      	lsls	r2, r3, #29
 80050be:	d1ce      	bne.n	800505e <__aeabi_fadd+0x7a>
 80050c0:	08de      	lsrs	r6, r3, #3
 80050c2:	002a      	movs	r2, r5
 80050c4:	2cff      	cmp	r4, #255	; 0xff
 80050c6:	d13a      	bne.n	800513e <__aeabi_fadd+0x15a>
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	d100      	bne.n	80050ce <__aeabi_fadd+0xea>
 80050cc:	e0ae      	b.n	800522c <__aeabi_fadd+0x248>
 80050ce:	2380      	movs	r3, #128	; 0x80
 80050d0:	03db      	lsls	r3, r3, #15
 80050d2:	4333      	orrs	r3, r6
 80050d4:	025b      	lsls	r3, r3, #9
 80050d6:	0a5b      	lsrs	r3, r3, #9
 80050d8:	24ff      	movs	r4, #255	; 0xff
 80050da:	e7cf      	b.n	800507c <__aeabi_fadd+0x98>
 80050dc:	1a21      	subs	r1, r4, r0
 80050de:	2900      	cmp	r1, #0
 80050e0:	dd52      	ble.n	8005188 <__aeabi_fadd+0x1a4>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d031      	beq.n	800514a <__aeabi_fadd+0x166>
 80050e6:	2cff      	cmp	r4, #255	; 0xff
 80050e8:	d0b7      	beq.n	800505a <__aeabi_fadd+0x76>
 80050ea:	2080      	movs	r0, #128	; 0x80
 80050ec:	003e      	movs	r6, r7
 80050ee:	04c0      	lsls	r0, r0, #19
 80050f0:	4306      	orrs	r6, r0
 80050f2:	46b4      	mov	ip, r6
 80050f4:	291b      	cmp	r1, #27
 80050f6:	dd00      	ble.n	80050fa <__aeabi_fadd+0x116>
 80050f8:	e0aa      	b.n	8005250 <__aeabi_fadd+0x26c>
 80050fa:	2620      	movs	r6, #32
 80050fc:	4660      	mov	r0, ip
 80050fe:	40c8      	lsrs	r0, r1
 8005100:	1a71      	subs	r1, r6, r1
 8005102:	4666      	mov	r6, ip
 8005104:	408e      	lsls	r6, r1
 8005106:	0031      	movs	r1, r6
 8005108:	1e4e      	subs	r6, r1, #1
 800510a:	41b1      	sbcs	r1, r6
 800510c:	4301      	orrs	r1, r0
 800510e:	185b      	adds	r3, r3, r1
 8005110:	0159      	lsls	r1, r3, #5
 8005112:	d5d3      	bpl.n	80050bc <__aeabi_fadd+0xd8>
 8005114:	3401      	adds	r4, #1
 8005116:	2cff      	cmp	r4, #255	; 0xff
 8005118:	d100      	bne.n	800511c <__aeabi_fadd+0x138>
 800511a:	e087      	b.n	800522c <__aeabi_fadd+0x248>
 800511c:	2201      	movs	r2, #1
 800511e:	4978      	ldr	r1, [pc, #480]	; (8005300 <__aeabi_fadd+0x31c>)
 8005120:	401a      	ands	r2, r3
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	400b      	ands	r3, r1
 8005126:	4313      	orrs	r3, r2
 8005128:	e797      	b.n	800505a <__aeabi_fadd+0x76>
 800512a:	2c00      	cmp	r4, #0
 800512c:	d000      	beq.n	8005130 <__aeabi_fadd+0x14c>
 800512e:	e0a7      	b.n	8005280 <__aeabi_fadd+0x29c>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d000      	beq.n	8005136 <__aeabi_fadd+0x152>
 8005134:	e0b6      	b.n	80052a4 <__aeabi_fadd+0x2c0>
 8005136:	1e3b      	subs	r3, r7, #0
 8005138:	d162      	bne.n	8005200 <__aeabi_fadd+0x21c>
 800513a:	2600      	movs	r6, #0
 800513c:	2200      	movs	r2, #0
 800513e:	0273      	lsls	r3, r6, #9
 8005140:	0a5b      	lsrs	r3, r3, #9
 8005142:	b2e4      	uxtb	r4, r4
 8005144:	e79a      	b.n	800507c <__aeabi_fadd+0x98>
 8005146:	0014      	movs	r4, r2
 8005148:	e787      	b.n	800505a <__aeabi_fadd+0x76>
 800514a:	2f00      	cmp	r7, #0
 800514c:	d04d      	beq.n	80051ea <__aeabi_fadd+0x206>
 800514e:	1e48      	subs	r0, r1, #1
 8005150:	2800      	cmp	r0, #0
 8005152:	d157      	bne.n	8005204 <__aeabi_fadd+0x220>
 8005154:	4463      	add	r3, ip
 8005156:	2401      	movs	r4, #1
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	d5af      	bpl.n	80050bc <__aeabi_fadd+0xd8>
 800515c:	2402      	movs	r4, #2
 800515e:	e7dd      	b.n	800511c <__aeabi_fadd+0x138>
 8005160:	2a00      	cmp	r2, #0
 8005162:	d124      	bne.n	80051ae <__aeabi_fadd+0x1ca>
 8005164:	1c62      	adds	r2, r4, #1
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	2a01      	cmp	r2, #1
 800516a:	ddde      	ble.n	800512a <__aeabi_fadd+0x146>
 800516c:	1bde      	subs	r6, r3, r7
 800516e:	0172      	lsls	r2, r6, #5
 8005170:	d535      	bpl.n	80051de <__aeabi_fadd+0x1fa>
 8005172:	1afe      	subs	r6, r7, r3
 8005174:	000d      	movs	r5, r1
 8005176:	e75c      	b.n	8005032 <__aeabi_fadd+0x4e>
 8005178:	002a      	movs	r2, r5
 800517a:	2300      	movs	r3, #0
 800517c:	e77e      	b.n	800507c <__aeabi_fadd+0x98>
 800517e:	0033      	movs	r3, r6
 8005180:	4a60      	ldr	r2, [pc, #384]	; (8005304 <__aeabi_fadd+0x320>)
 8005182:	1a24      	subs	r4, r4, r0
 8005184:	4013      	ands	r3, r2
 8005186:	e768      	b.n	800505a <__aeabi_fadd+0x76>
 8005188:	2900      	cmp	r1, #0
 800518a:	d163      	bne.n	8005254 <__aeabi_fadd+0x270>
 800518c:	1c61      	adds	r1, r4, #1
 800518e:	b2c8      	uxtb	r0, r1
 8005190:	2801      	cmp	r0, #1
 8005192:	dd4e      	ble.n	8005232 <__aeabi_fadd+0x24e>
 8005194:	29ff      	cmp	r1, #255	; 0xff
 8005196:	d049      	beq.n	800522c <__aeabi_fadd+0x248>
 8005198:	4463      	add	r3, ip
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	000c      	movs	r4, r1
 800519e:	e75c      	b.n	800505a <__aeabi_fadd+0x76>
 80051a0:	2aff      	cmp	r2, #255	; 0xff
 80051a2:	d041      	beq.n	8005228 <__aeabi_fadd+0x244>
 80051a4:	000a      	movs	r2, r1
 80051a6:	e779      	b.n	800509c <__aeabi_fadd+0xb8>
 80051a8:	2201      	movs	r2, #1
 80051aa:	1a9b      	subs	r3, r3, r2
 80051ac:	e784      	b.n	80050b8 <__aeabi_fadd+0xd4>
 80051ae:	2c00      	cmp	r4, #0
 80051b0:	d01d      	beq.n	80051ee <__aeabi_fadd+0x20a>
 80051b2:	28ff      	cmp	r0, #255	; 0xff
 80051b4:	d022      	beq.n	80051fc <__aeabi_fadd+0x218>
 80051b6:	2480      	movs	r4, #128	; 0x80
 80051b8:	04e4      	lsls	r4, r4, #19
 80051ba:	4252      	negs	r2, r2
 80051bc:	4323      	orrs	r3, r4
 80051be:	2a1b      	cmp	r2, #27
 80051c0:	dd00      	ble.n	80051c4 <__aeabi_fadd+0x1e0>
 80051c2:	e08a      	b.n	80052da <__aeabi_fadd+0x2f6>
 80051c4:	001c      	movs	r4, r3
 80051c6:	2520      	movs	r5, #32
 80051c8:	40d4      	lsrs	r4, r2
 80051ca:	1aaa      	subs	r2, r5, r2
 80051cc:	4093      	lsls	r3, r2
 80051ce:	1e5a      	subs	r2, r3, #1
 80051d0:	4193      	sbcs	r3, r2
 80051d2:	4323      	orrs	r3, r4
 80051d4:	4662      	mov	r2, ip
 80051d6:	0004      	movs	r4, r0
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	000d      	movs	r5, r1
 80051dc:	e725      	b.n	800502a <__aeabi_fadd+0x46>
 80051de:	2e00      	cmp	r6, #0
 80051e0:	d000      	beq.n	80051e4 <__aeabi_fadd+0x200>
 80051e2:	e726      	b.n	8005032 <__aeabi_fadd+0x4e>
 80051e4:	2200      	movs	r2, #0
 80051e6:	2400      	movs	r4, #0
 80051e8:	e7a9      	b.n	800513e <__aeabi_fadd+0x15a>
 80051ea:	000c      	movs	r4, r1
 80051ec:	e735      	b.n	800505a <__aeabi_fadd+0x76>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d04d      	beq.n	800528e <__aeabi_fadd+0x2aa>
 80051f2:	43d2      	mvns	r2, r2
 80051f4:	2a00      	cmp	r2, #0
 80051f6:	d0ed      	beq.n	80051d4 <__aeabi_fadd+0x1f0>
 80051f8:	28ff      	cmp	r0, #255	; 0xff
 80051fa:	d1e0      	bne.n	80051be <__aeabi_fadd+0x1da>
 80051fc:	4663      	mov	r3, ip
 80051fe:	24ff      	movs	r4, #255	; 0xff
 8005200:	000d      	movs	r5, r1
 8005202:	e72a      	b.n	800505a <__aeabi_fadd+0x76>
 8005204:	29ff      	cmp	r1, #255	; 0xff
 8005206:	d00f      	beq.n	8005228 <__aeabi_fadd+0x244>
 8005208:	0001      	movs	r1, r0
 800520a:	e773      	b.n	80050f4 <__aeabi_fadd+0x110>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d061      	beq.n	80052d4 <__aeabi_fadd+0x2f0>
 8005210:	24ff      	movs	r4, #255	; 0xff
 8005212:	2f00      	cmp	r7, #0
 8005214:	d100      	bne.n	8005218 <__aeabi_fadd+0x234>
 8005216:	e720      	b.n	800505a <__aeabi_fadd+0x76>
 8005218:	2280      	movs	r2, #128	; 0x80
 800521a:	4641      	mov	r1, r8
 800521c:	03d2      	lsls	r2, r2, #15
 800521e:	4211      	tst	r1, r2
 8005220:	d002      	beq.n	8005228 <__aeabi_fadd+0x244>
 8005222:	4216      	tst	r6, r2
 8005224:	d100      	bne.n	8005228 <__aeabi_fadd+0x244>
 8005226:	003b      	movs	r3, r7
 8005228:	24ff      	movs	r4, #255	; 0xff
 800522a:	e716      	b.n	800505a <__aeabi_fadd+0x76>
 800522c:	24ff      	movs	r4, #255	; 0xff
 800522e:	2300      	movs	r3, #0
 8005230:	e724      	b.n	800507c <__aeabi_fadd+0x98>
 8005232:	2c00      	cmp	r4, #0
 8005234:	d1ea      	bne.n	800520c <__aeabi_fadd+0x228>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d058      	beq.n	80052ec <__aeabi_fadd+0x308>
 800523a:	2f00      	cmp	r7, #0
 800523c:	d100      	bne.n	8005240 <__aeabi_fadd+0x25c>
 800523e:	e70c      	b.n	800505a <__aeabi_fadd+0x76>
 8005240:	4463      	add	r3, ip
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	d400      	bmi.n	8005248 <__aeabi_fadd+0x264>
 8005246:	e739      	b.n	80050bc <__aeabi_fadd+0xd8>
 8005248:	4a2e      	ldr	r2, [pc, #184]	; (8005304 <__aeabi_fadd+0x320>)
 800524a:	000c      	movs	r4, r1
 800524c:	4013      	ands	r3, r2
 800524e:	e704      	b.n	800505a <__aeabi_fadd+0x76>
 8005250:	2101      	movs	r1, #1
 8005252:	e75c      	b.n	800510e <__aeabi_fadd+0x12a>
 8005254:	2c00      	cmp	r4, #0
 8005256:	d11e      	bne.n	8005296 <__aeabi_fadd+0x2b2>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d040      	beq.n	80052de <__aeabi_fadd+0x2fa>
 800525c:	43c9      	mvns	r1, r1
 800525e:	2900      	cmp	r1, #0
 8005260:	d00b      	beq.n	800527a <__aeabi_fadd+0x296>
 8005262:	28ff      	cmp	r0, #255	; 0xff
 8005264:	d036      	beq.n	80052d4 <__aeabi_fadd+0x2f0>
 8005266:	291b      	cmp	r1, #27
 8005268:	dc47      	bgt.n	80052fa <__aeabi_fadd+0x316>
 800526a:	001c      	movs	r4, r3
 800526c:	2620      	movs	r6, #32
 800526e:	40cc      	lsrs	r4, r1
 8005270:	1a71      	subs	r1, r6, r1
 8005272:	408b      	lsls	r3, r1
 8005274:	1e59      	subs	r1, r3, #1
 8005276:	418b      	sbcs	r3, r1
 8005278:	4323      	orrs	r3, r4
 800527a:	4463      	add	r3, ip
 800527c:	0004      	movs	r4, r0
 800527e:	e747      	b.n	8005110 <__aeabi_fadd+0x12c>
 8005280:	2b00      	cmp	r3, #0
 8005282:	d118      	bne.n	80052b6 <__aeabi_fadd+0x2d2>
 8005284:	1e3b      	subs	r3, r7, #0
 8005286:	d02d      	beq.n	80052e4 <__aeabi_fadd+0x300>
 8005288:	000d      	movs	r5, r1
 800528a:	24ff      	movs	r4, #255	; 0xff
 800528c:	e6e5      	b.n	800505a <__aeabi_fadd+0x76>
 800528e:	003b      	movs	r3, r7
 8005290:	0004      	movs	r4, r0
 8005292:	000d      	movs	r5, r1
 8005294:	e6e1      	b.n	800505a <__aeabi_fadd+0x76>
 8005296:	28ff      	cmp	r0, #255	; 0xff
 8005298:	d01c      	beq.n	80052d4 <__aeabi_fadd+0x2f0>
 800529a:	2480      	movs	r4, #128	; 0x80
 800529c:	04e4      	lsls	r4, r4, #19
 800529e:	4249      	negs	r1, r1
 80052a0:	4323      	orrs	r3, r4
 80052a2:	e7e0      	b.n	8005266 <__aeabi_fadd+0x282>
 80052a4:	2f00      	cmp	r7, #0
 80052a6:	d100      	bne.n	80052aa <__aeabi_fadd+0x2c6>
 80052a8:	e6d7      	b.n	800505a <__aeabi_fadd+0x76>
 80052aa:	1bde      	subs	r6, r3, r7
 80052ac:	0172      	lsls	r2, r6, #5
 80052ae:	d51f      	bpl.n	80052f0 <__aeabi_fadd+0x30c>
 80052b0:	1afb      	subs	r3, r7, r3
 80052b2:	000d      	movs	r5, r1
 80052b4:	e6d1      	b.n	800505a <__aeabi_fadd+0x76>
 80052b6:	24ff      	movs	r4, #255	; 0xff
 80052b8:	2f00      	cmp	r7, #0
 80052ba:	d100      	bne.n	80052be <__aeabi_fadd+0x2da>
 80052bc:	e6cd      	b.n	800505a <__aeabi_fadd+0x76>
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	4640      	mov	r0, r8
 80052c2:	03d2      	lsls	r2, r2, #15
 80052c4:	4210      	tst	r0, r2
 80052c6:	d0af      	beq.n	8005228 <__aeabi_fadd+0x244>
 80052c8:	4216      	tst	r6, r2
 80052ca:	d1ad      	bne.n	8005228 <__aeabi_fadd+0x244>
 80052cc:	003b      	movs	r3, r7
 80052ce:	000d      	movs	r5, r1
 80052d0:	24ff      	movs	r4, #255	; 0xff
 80052d2:	e6c2      	b.n	800505a <__aeabi_fadd+0x76>
 80052d4:	4663      	mov	r3, ip
 80052d6:	24ff      	movs	r4, #255	; 0xff
 80052d8:	e6bf      	b.n	800505a <__aeabi_fadd+0x76>
 80052da:	2301      	movs	r3, #1
 80052dc:	e77a      	b.n	80051d4 <__aeabi_fadd+0x1f0>
 80052de:	003b      	movs	r3, r7
 80052e0:	0004      	movs	r4, r0
 80052e2:	e6ba      	b.n	800505a <__aeabi_fadd+0x76>
 80052e4:	2680      	movs	r6, #128	; 0x80
 80052e6:	2200      	movs	r2, #0
 80052e8:	03f6      	lsls	r6, r6, #15
 80052ea:	e6f0      	b.n	80050ce <__aeabi_fadd+0xea>
 80052ec:	003b      	movs	r3, r7
 80052ee:	e6b4      	b.n	800505a <__aeabi_fadd+0x76>
 80052f0:	1e33      	subs	r3, r6, #0
 80052f2:	d000      	beq.n	80052f6 <__aeabi_fadd+0x312>
 80052f4:	e6e2      	b.n	80050bc <__aeabi_fadd+0xd8>
 80052f6:	2200      	movs	r2, #0
 80052f8:	e721      	b.n	800513e <__aeabi_fadd+0x15a>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e7bd      	b.n	800527a <__aeabi_fadd+0x296>
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	7dffffff 	.word	0x7dffffff
 8005304:	fbffffff 	.word	0xfbffffff

08005308 <__eqsf2>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	0042      	lsls	r2, r0, #1
 800530c:	0245      	lsls	r5, r0, #9
 800530e:	024e      	lsls	r6, r1, #9
 8005310:	004c      	lsls	r4, r1, #1
 8005312:	0fc3      	lsrs	r3, r0, #31
 8005314:	0a6d      	lsrs	r5, r5, #9
 8005316:	0e12      	lsrs	r2, r2, #24
 8005318:	0a76      	lsrs	r6, r6, #9
 800531a:	0e24      	lsrs	r4, r4, #24
 800531c:	0fc9      	lsrs	r1, r1, #31
 800531e:	2001      	movs	r0, #1
 8005320:	2aff      	cmp	r2, #255	; 0xff
 8005322:	d006      	beq.n	8005332 <__eqsf2+0x2a>
 8005324:	2cff      	cmp	r4, #255	; 0xff
 8005326:	d003      	beq.n	8005330 <__eqsf2+0x28>
 8005328:	42a2      	cmp	r2, r4
 800532a:	d101      	bne.n	8005330 <__eqsf2+0x28>
 800532c:	42b5      	cmp	r5, r6
 800532e:	d006      	beq.n	800533e <__eqsf2+0x36>
 8005330:	bd70      	pop	{r4, r5, r6, pc}
 8005332:	2d00      	cmp	r5, #0
 8005334:	d1fc      	bne.n	8005330 <__eqsf2+0x28>
 8005336:	2cff      	cmp	r4, #255	; 0xff
 8005338:	d1fa      	bne.n	8005330 <__eqsf2+0x28>
 800533a:	2e00      	cmp	r6, #0
 800533c:	d1f8      	bne.n	8005330 <__eqsf2+0x28>
 800533e:	428b      	cmp	r3, r1
 8005340:	d006      	beq.n	8005350 <__eqsf2+0x48>
 8005342:	2001      	movs	r0, #1
 8005344:	2a00      	cmp	r2, #0
 8005346:	d1f3      	bne.n	8005330 <__eqsf2+0x28>
 8005348:	0028      	movs	r0, r5
 800534a:	1e45      	subs	r5, r0, #1
 800534c:	41a8      	sbcs	r0, r5
 800534e:	e7ef      	b.n	8005330 <__eqsf2+0x28>
 8005350:	2000      	movs	r0, #0
 8005352:	e7ed      	b.n	8005330 <__eqsf2+0x28>

08005354 <__gesf2>:
 8005354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005356:	0042      	lsls	r2, r0, #1
 8005358:	0245      	lsls	r5, r0, #9
 800535a:	024c      	lsls	r4, r1, #9
 800535c:	0fc3      	lsrs	r3, r0, #31
 800535e:	0048      	lsls	r0, r1, #1
 8005360:	0a6d      	lsrs	r5, r5, #9
 8005362:	0e12      	lsrs	r2, r2, #24
 8005364:	0a64      	lsrs	r4, r4, #9
 8005366:	0e00      	lsrs	r0, r0, #24
 8005368:	0fc9      	lsrs	r1, r1, #31
 800536a:	2aff      	cmp	r2, #255	; 0xff
 800536c:	d01e      	beq.n	80053ac <__gesf2+0x58>
 800536e:	28ff      	cmp	r0, #255	; 0xff
 8005370:	d021      	beq.n	80053b6 <__gesf2+0x62>
 8005372:	2a00      	cmp	r2, #0
 8005374:	d10a      	bne.n	800538c <__gesf2+0x38>
 8005376:	426e      	negs	r6, r5
 8005378:	416e      	adcs	r6, r5
 800537a:	b2f6      	uxtb	r6, r6
 800537c:	2800      	cmp	r0, #0
 800537e:	d10f      	bne.n	80053a0 <__gesf2+0x4c>
 8005380:	2c00      	cmp	r4, #0
 8005382:	d10d      	bne.n	80053a0 <__gesf2+0x4c>
 8005384:	2000      	movs	r0, #0
 8005386:	2d00      	cmp	r5, #0
 8005388:	d009      	beq.n	800539e <__gesf2+0x4a>
 800538a:	e005      	b.n	8005398 <__gesf2+0x44>
 800538c:	2800      	cmp	r0, #0
 800538e:	d101      	bne.n	8005394 <__gesf2+0x40>
 8005390:	2c00      	cmp	r4, #0
 8005392:	d001      	beq.n	8005398 <__gesf2+0x44>
 8005394:	428b      	cmp	r3, r1
 8005396:	d011      	beq.n	80053bc <__gesf2+0x68>
 8005398:	2101      	movs	r1, #1
 800539a:	4258      	negs	r0, r3
 800539c:	4308      	orrs	r0, r1
 800539e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a0:	2e00      	cmp	r6, #0
 80053a2:	d0f7      	beq.n	8005394 <__gesf2+0x40>
 80053a4:	2001      	movs	r0, #1
 80053a6:	3901      	subs	r1, #1
 80053a8:	4308      	orrs	r0, r1
 80053aa:	e7f8      	b.n	800539e <__gesf2+0x4a>
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	d0de      	beq.n	800536e <__gesf2+0x1a>
 80053b0:	2002      	movs	r0, #2
 80053b2:	4240      	negs	r0, r0
 80053b4:	e7f3      	b.n	800539e <__gesf2+0x4a>
 80053b6:	2c00      	cmp	r4, #0
 80053b8:	d0db      	beq.n	8005372 <__gesf2+0x1e>
 80053ba:	e7f9      	b.n	80053b0 <__gesf2+0x5c>
 80053bc:	4282      	cmp	r2, r0
 80053be:	dceb      	bgt.n	8005398 <__gesf2+0x44>
 80053c0:	db04      	blt.n	80053cc <__gesf2+0x78>
 80053c2:	42a5      	cmp	r5, r4
 80053c4:	d8e8      	bhi.n	8005398 <__gesf2+0x44>
 80053c6:	2000      	movs	r0, #0
 80053c8:	42a5      	cmp	r5, r4
 80053ca:	d2e8      	bcs.n	800539e <__gesf2+0x4a>
 80053cc:	2101      	movs	r1, #1
 80053ce:	1e58      	subs	r0, r3, #1
 80053d0:	4308      	orrs	r0, r1
 80053d2:	e7e4      	b.n	800539e <__gesf2+0x4a>

080053d4 <__lesf2>:
 80053d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d6:	0042      	lsls	r2, r0, #1
 80053d8:	024d      	lsls	r5, r1, #9
 80053da:	004c      	lsls	r4, r1, #1
 80053dc:	0246      	lsls	r6, r0, #9
 80053de:	0a76      	lsrs	r6, r6, #9
 80053e0:	0e12      	lsrs	r2, r2, #24
 80053e2:	0fc3      	lsrs	r3, r0, #31
 80053e4:	0a6d      	lsrs	r5, r5, #9
 80053e6:	0e24      	lsrs	r4, r4, #24
 80053e8:	0fc9      	lsrs	r1, r1, #31
 80053ea:	2aff      	cmp	r2, #255	; 0xff
 80053ec:	d016      	beq.n	800541c <__lesf2+0x48>
 80053ee:	2cff      	cmp	r4, #255	; 0xff
 80053f0:	d018      	beq.n	8005424 <__lesf2+0x50>
 80053f2:	2a00      	cmp	r2, #0
 80053f4:	d10a      	bne.n	800540c <__lesf2+0x38>
 80053f6:	4270      	negs	r0, r6
 80053f8:	4170      	adcs	r0, r6
 80053fa:	b2c0      	uxtb	r0, r0
 80053fc:	2c00      	cmp	r4, #0
 80053fe:	d015      	beq.n	800542c <__lesf2+0x58>
 8005400:	2800      	cmp	r0, #0
 8005402:	d005      	beq.n	8005410 <__lesf2+0x3c>
 8005404:	2001      	movs	r0, #1
 8005406:	3901      	subs	r1, #1
 8005408:	4308      	orrs	r0, r1
 800540a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800540c:	2c00      	cmp	r4, #0
 800540e:	d013      	beq.n	8005438 <__lesf2+0x64>
 8005410:	4299      	cmp	r1, r3
 8005412:	d014      	beq.n	800543e <__lesf2+0x6a>
 8005414:	2001      	movs	r0, #1
 8005416:	425b      	negs	r3, r3
 8005418:	4318      	orrs	r0, r3
 800541a:	e7f6      	b.n	800540a <__lesf2+0x36>
 800541c:	2002      	movs	r0, #2
 800541e:	2e00      	cmp	r6, #0
 8005420:	d1f3      	bne.n	800540a <__lesf2+0x36>
 8005422:	e7e4      	b.n	80053ee <__lesf2+0x1a>
 8005424:	2002      	movs	r0, #2
 8005426:	2d00      	cmp	r5, #0
 8005428:	d1ef      	bne.n	800540a <__lesf2+0x36>
 800542a:	e7e2      	b.n	80053f2 <__lesf2+0x1e>
 800542c:	2d00      	cmp	r5, #0
 800542e:	d1e7      	bne.n	8005400 <__lesf2+0x2c>
 8005430:	2000      	movs	r0, #0
 8005432:	2e00      	cmp	r6, #0
 8005434:	d0e9      	beq.n	800540a <__lesf2+0x36>
 8005436:	e7ed      	b.n	8005414 <__lesf2+0x40>
 8005438:	2d00      	cmp	r5, #0
 800543a:	d1e9      	bne.n	8005410 <__lesf2+0x3c>
 800543c:	e7ea      	b.n	8005414 <__lesf2+0x40>
 800543e:	42a2      	cmp	r2, r4
 8005440:	dc06      	bgt.n	8005450 <__lesf2+0x7c>
 8005442:	dbdf      	blt.n	8005404 <__lesf2+0x30>
 8005444:	42ae      	cmp	r6, r5
 8005446:	d803      	bhi.n	8005450 <__lesf2+0x7c>
 8005448:	2000      	movs	r0, #0
 800544a:	42ae      	cmp	r6, r5
 800544c:	d3da      	bcc.n	8005404 <__lesf2+0x30>
 800544e:	e7dc      	b.n	800540a <__lesf2+0x36>
 8005450:	2001      	movs	r0, #1
 8005452:	4249      	negs	r1, r1
 8005454:	4308      	orrs	r0, r1
 8005456:	e7d8      	b.n	800540a <__lesf2+0x36>

08005458 <__aeabi_fmul>:
 8005458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545a:	4657      	mov	r7, sl
 800545c:	464e      	mov	r6, r9
 800545e:	4645      	mov	r5, r8
 8005460:	46de      	mov	lr, fp
 8005462:	b5e0      	push	{r5, r6, r7, lr}
 8005464:	0247      	lsls	r7, r0, #9
 8005466:	0046      	lsls	r6, r0, #1
 8005468:	4688      	mov	r8, r1
 800546a:	0a7f      	lsrs	r7, r7, #9
 800546c:	0e36      	lsrs	r6, r6, #24
 800546e:	0fc4      	lsrs	r4, r0, #31
 8005470:	2e00      	cmp	r6, #0
 8005472:	d047      	beq.n	8005504 <__aeabi_fmul+0xac>
 8005474:	2eff      	cmp	r6, #255	; 0xff
 8005476:	d024      	beq.n	80054c2 <__aeabi_fmul+0x6a>
 8005478:	00fb      	lsls	r3, r7, #3
 800547a:	2780      	movs	r7, #128	; 0x80
 800547c:	04ff      	lsls	r7, r7, #19
 800547e:	431f      	orrs	r7, r3
 8005480:	2300      	movs	r3, #0
 8005482:	4699      	mov	r9, r3
 8005484:	469a      	mov	sl, r3
 8005486:	3e7f      	subs	r6, #127	; 0x7f
 8005488:	4643      	mov	r3, r8
 800548a:	025d      	lsls	r5, r3, #9
 800548c:	0058      	lsls	r0, r3, #1
 800548e:	0fdb      	lsrs	r3, r3, #31
 8005490:	0a6d      	lsrs	r5, r5, #9
 8005492:	0e00      	lsrs	r0, r0, #24
 8005494:	4698      	mov	r8, r3
 8005496:	d043      	beq.n	8005520 <__aeabi_fmul+0xc8>
 8005498:	28ff      	cmp	r0, #255	; 0xff
 800549a:	d03b      	beq.n	8005514 <__aeabi_fmul+0xbc>
 800549c:	00eb      	lsls	r3, r5, #3
 800549e:	2580      	movs	r5, #128	; 0x80
 80054a0:	2200      	movs	r2, #0
 80054a2:	04ed      	lsls	r5, r5, #19
 80054a4:	431d      	orrs	r5, r3
 80054a6:	387f      	subs	r0, #127	; 0x7f
 80054a8:	1836      	adds	r6, r6, r0
 80054aa:	1c73      	adds	r3, r6, #1
 80054ac:	4641      	mov	r1, r8
 80054ae:	469b      	mov	fp, r3
 80054b0:	464b      	mov	r3, r9
 80054b2:	4061      	eors	r1, r4
 80054b4:	4313      	orrs	r3, r2
 80054b6:	2b0f      	cmp	r3, #15
 80054b8:	d864      	bhi.n	8005584 <__aeabi_fmul+0x12c>
 80054ba:	4875      	ldr	r0, [pc, #468]	; (8005690 <__aeabi_fmul+0x238>)
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	58c3      	ldr	r3, [r0, r3]
 80054c0:	469f      	mov	pc, r3
 80054c2:	2f00      	cmp	r7, #0
 80054c4:	d142      	bne.n	800554c <__aeabi_fmul+0xf4>
 80054c6:	2308      	movs	r3, #8
 80054c8:	4699      	mov	r9, r3
 80054ca:	3b06      	subs	r3, #6
 80054cc:	26ff      	movs	r6, #255	; 0xff
 80054ce:	469a      	mov	sl, r3
 80054d0:	e7da      	b.n	8005488 <__aeabi_fmul+0x30>
 80054d2:	4641      	mov	r1, r8
 80054d4:	2a02      	cmp	r2, #2
 80054d6:	d028      	beq.n	800552a <__aeabi_fmul+0xd2>
 80054d8:	2a03      	cmp	r2, #3
 80054da:	d100      	bne.n	80054de <__aeabi_fmul+0x86>
 80054dc:	e0ce      	b.n	800567c <__aeabi_fmul+0x224>
 80054de:	2a01      	cmp	r2, #1
 80054e0:	d000      	beq.n	80054e4 <__aeabi_fmul+0x8c>
 80054e2:	e0ac      	b.n	800563e <__aeabi_fmul+0x1e6>
 80054e4:	4011      	ands	r1, r2
 80054e6:	2000      	movs	r0, #0
 80054e8:	2200      	movs	r2, #0
 80054ea:	b2cc      	uxtb	r4, r1
 80054ec:	0240      	lsls	r0, r0, #9
 80054ee:	05d2      	lsls	r2, r2, #23
 80054f0:	0a40      	lsrs	r0, r0, #9
 80054f2:	07e4      	lsls	r4, r4, #31
 80054f4:	4310      	orrs	r0, r2
 80054f6:	4320      	orrs	r0, r4
 80054f8:	bc3c      	pop	{r2, r3, r4, r5}
 80054fa:	4690      	mov	r8, r2
 80054fc:	4699      	mov	r9, r3
 80054fe:	46a2      	mov	sl, r4
 8005500:	46ab      	mov	fp, r5
 8005502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005504:	2f00      	cmp	r7, #0
 8005506:	d115      	bne.n	8005534 <__aeabi_fmul+0xdc>
 8005508:	2304      	movs	r3, #4
 800550a:	4699      	mov	r9, r3
 800550c:	3b03      	subs	r3, #3
 800550e:	2600      	movs	r6, #0
 8005510:	469a      	mov	sl, r3
 8005512:	e7b9      	b.n	8005488 <__aeabi_fmul+0x30>
 8005514:	20ff      	movs	r0, #255	; 0xff
 8005516:	2202      	movs	r2, #2
 8005518:	2d00      	cmp	r5, #0
 800551a:	d0c5      	beq.n	80054a8 <__aeabi_fmul+0x50>
 800551c:	2203      	movs	r2, #3
 800551e:	e7c3      	b.n	80054a8 <__aeabi_fmul+0x50>
 8005520:	2d00      	cmp	r5, #0
 8005522:	d119      	bne.n	8005558 <__aeabi_fmul+0x100>
 8005524:	2000      	movs	r0, #0
 8005526:	2201      	movs	r2, #1
 8005528:	e7be      	b.n	80054a8 <__aeabi_fmul+0x50>
 800552a:	2401      	movs	r4, #1
 800552c:	22ff      	movs	r2, #255	; 0xff
 800552e:	400c      	ands	r4, r1
 8005530:	2000      	movs	r0, #0
 8005532:	e7db      	b.n	80054ec <__aeabi_fmul+0x94>
 8005534:	0038      	movs	r0, r7
 8005536:	f002 f94d 	bl	80077d4 <__clzsi2>
 800553a:	2676      	movs	r6, #118	; 0x76
 800553c:	1f43      	subs	r3, r0, #5
 800553e:	409f      	lsls	r7, r3
 8005540:	2300      	movs	r3, #0
 8005542:	4276      	negs	r6, r6
 8005544:	1a36      	subs	r6, r6, r0
 8005546:	4699      	mov	r9, r3
 8005548:	469a      	mov	sl, r3
 800554a:	e79d      	b.n	8005488 <__aeabi_fmul+0x30>
 800554c:	230c      	movs	r3, #12
 800554e:	4699      	mov	r9, r3
 8005550:	3b09      	subs	r3, #9
 8005552:	26ff      	movs	r6, #255	; 0xff
 8005554:	469a      	mov	sl, r3
 8005556:	e797      	b.n	8005488 <__aeabi_fmul+0x30>
 8005558:	0028      	movs	r0, r5
 800555a:	f002 f93b 	bl	80077d4 <__clzsi2>
 800555e:	1f43      	subs	r3, r0, #5
 8005560:	409d      	lsls	r5, r3
 8005562:	2376      	movs	r3, #118	; 0x76
 8005564:	425b      	negs	r3, r3
 8005566:	1a18      	subs	r0, r3, r0
 8005568:	2200      	movs	r2, #0
 800556a:	e79d      	b.n	80054a8 <__aeabi_fmul+0x50>
 800556c:	2080      	movs	r0, #128	; 0x80
 800556e:	2400      	movs	r4, #0
 8005570:	03c0      	lsls	r0, r0, #15
 8005572:	22ff      	movs	r2, #255	; 0xff
 8005574:	e7ba      	b.n	80054ec <__aeabi_fmul+0x94>
 8005576:	003d      	movs	r5, r7
 8005578:	4652      	mov	r2, sl
 800557a:	e7ab      	b.n	80054d4 <__aeabi_fmul+0x7c>
 800557c:	003d      	movs	r5, r7
 800557e:	0021      	movs	r1, r4
 8005580:	4652      	mov	r2, sl
 8005582:	e7a7      	b.n	80054d4 <__aeabi_fmul+0x7c>
 8005584:	0c3b      	lsrs	r3, r7, #16
 8005586:	469c      	mov	ip, r3
 8005588:	042a      	lsls	r2, r5, #16
 800558a:	0c12      	lsrs	r2, r2, #16
 800558c:	0c2b      	lsrs	r3, r5, #16
 800558e:	0014      	movs	r4, r2
 8005590:	4660      	mov	r0, ip
 8005592:	4665      	mov	r5, ip
 8005594:	043f      	lsls	r7, r7, #16
 8005596:	0c3f      	lsrs	r7, r7, #16
 8005598:	437c      	muls	r4, r7
 800559a:	4342      	muls	r2, r0
 800559c:	435d      	muls	r5, r3
 800559e:	437b      	muls	r3, r7
 80055a0:	0c27      	lsrs	r7, r4, #16
 80055a2:	189b      	adds	r3, r3, r2
 80055a4:	18ff      	adds	r7, r7, r3
 80055a6:	42ba      	cmp	r2, r7
 80055a8:	d903      	bls.n	80055b2 <__aeabi_fmul+0x15a>
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	025b      	lsls	r3, r3, #9
 80055ae:	469c      	mov	ip, r3
 80055b0:	4465      	add	r5, ip
 80055b2:	0424      	lsls	r4, r4, #16
 80055b4:	043a      	lsls	r2, r7, #16
 80055b6:	0c24      	lsrs	r4, r4, #16
 80055b8:	1912      	adds	r2, r2, r4
 80055ba:	0193      	lsls	r3, r2, #6
 80055bc:	1e5c      	subs	r4, r3, #1
 80055be:	41a3      	sbcs	r3, r4
 80055c0:	0c3f      	lsrs	r7, r7, #16
 80055c2:	0e92      	lsrs	r2, r2, #26
 80055c4:	197d      	adds	r5, r7, r5
 80055c6:	431a      	orrs	r2, r3
 80055c8:	01ad      	lsls	r5, r5, #6
 80055ca:	4315      	orrs	r5, r2
 80055cc:	012b      	lsls	r3, r5, #4
 80055ce:	d504      	bpl.n	80055da <__aeabi_fmul+0x182>
 80055d0:	2301      	movs	r3, #1
 80055d2:	465e      	mov	r6, fp
 80055d4:	086a      	lsrs	r2, r5, #1
 80055d6:	401d      	ands	r5, r3
 80055d8:	4315      	orrs	r5, r2
 80055da:	0032      	movs	r2, r6
 80055dc:	327f      	adds	r2, #127	; 0x7f
 80055de:	2a00      	cmp	r2, #0
 80055e0:	dd25      	ble.n	800562e <__aeabi_fmul+0x1d6>
 80055e2:	076b      	lsls	r3, r5, #29
 80055e4:	d004      	beq.n	80055f0 <__aeabi_fmul+0x198>
 80055e6:	230f      	movs	r3, #15
 80055e8:	402b      	ands	r3, r5
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d000      	beq.n	80055f0 <__aeabi_fmul+0x198>
 80055ee:	3504      	adds	r5, #4
 80055f0:	012b      	lsls	r3, r5, #4
 80055f2:	d503      	bpl.n	80055fc <__aeabi_fmul+0x1a4>
 80055f4:	0032      	movs	r2, r6
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <__aeabi_fmul+0x23c>)
 80055f8:	3280      	adds	r2, #128	; 0x80
 80055fa:	401d      	ands	r5, r3
 80055fc:	2afe      	cmp	r2, #254	; 0xfe
 80055fe:	dc94      	bgt.n	800552a <__aeabi_fmul+0xd2>
 8005600:	2401      	movs	r4, #1
 8005602:	01a8      	lsls	r0, r5, #6
 8005604:	0a40      	lsrs	r0, r0, #9
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	400c      	ands	r4, r1
 800560a:	e76f      	b.n	80054ec <__aeabi_fmul+0x94>
 800560c:	2080      	movs	r0, #128	; 0x80
 800560e:	03c0      	lsls	r0, r0, #15
 8005610:	4207      	tst	r7, r0
 8005612:	d007      	beq.n	8005624 <__aeabi_fmul+0x1cc>
 8005614:	4205      	tst	r5, r0
 8005616:	d105      	bne.n	8005624 <__aeabi_fmul+0x1cc>
 8005618:	4328      	orrs	r0, r5
 800561a:	0240      	lsls	r0, r0, #9
 800561c:	0a40      	lsrs	r0, r0, #9
 800561e:	4644      	mov	r4, r8
 8005620:	22ff      	movs	r2, #255	; 0xff
 8005622:	e763      	b.n	80054ec <__aeabi_fmul+0x94>
 8005624:	4338      	orrs	r0, r7
 8005626:	0240      	lsls	r0, r0, #9
 8005628:	0a40      	lsrs	r0, r0, #9
 800562a:	22ff      	movs	r2, #255	; 0xff
 800562c:	e75e      	b.n	80054ec <__aeabi_fmul+0x94>
 800562e:	2401      	movs	r4, #1
 8005630:	1aa3      	subs	r3, r4, r2
 8005632:	2b1b      	cmp	r3, #27
 8005634:	dd05      	ble.n	8005642 <__aeabi_fmul+0x1ea>
 8005636:	400c      	ands	r4, r1
 8005638:	2200      	movs	r2, #0
 800563a:	2000      	movs	r0, #0
 800563c:	e756      	b.n	80054ec <__aeabi_fmul+0x94>
 800563e:	465e      	mov	r6, fp
 8005640:	e7cb      	b.n	80055da <__aeabi_fmul+0x182>
 8005642:	002a      	movs	r2, r5
 8005644:	2020      	movs	r0, #32
 8005646:	40da      	lsrs	r2, r3
 8005648:	1ac3      	subs	r3, r0, r3
 800564a:	409d      	lsls	r5, r3
 800564c:	002b      	movs	r3, r5
 800564e:	1e5d      	subs	r5, r3, #1
 8005650:	41ab      	sbcs	r3, r5
 8005652:	4313      	orrs	r3, r2
 8005654:	075a      	lsls	r2, r3, #29
 8005656:	d004      	beq.n	8005662 <__aeabi_fmul+0x20a>
 8005658:	220f      	movs	r2, #15
 800565a:	401a      	ands	r2, r3
 800565c:	2a04      	cmp	r2, #4
 800565e:	d000      	beq.n	8005662 <__aeabi_fmul+0x20a>
 8005660:	3304      	adds	r3, #4
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	d504      	bpl.n	8005670 <__aeabi_fmul+0x218>
 8005666:	2401      	movs	r4, #1
 8005668:	2201      	movs	r2, #1
 800566a:	400c      	ands	r4, r1
 800566c:	2000      	movs	r0, #0
 800566e:	e73d      	b.n	80054ec <__aeabi_fmul+0x94>
 8005670:	2401      	movs	r4, #1
 8005672:	019b      	lsls	r3, r3, #6
 8005674:	0a58      	lsrs	r0, r3, #9
 8005676:	400c      	ands	r4, r1
 8005678:	2200      	movs	r2, #0
 800567a:	e737      	b.n	80054ec <__aeabi_fmul+0x94>
 800567c:	2080      	movs	r0, #128	; 0x80
 800567e:	2401      	movs	r4, #1
 8005680:	03c0      	lsls	r0, r0, #15
 8005682:	4328      	orrs	r0, r5
 8005684:	0240      	lsls	r0, r0, #9
 8005686:	0a40      	lsrs	r0, r0, #9
 8005688:	400c      	ands	r4, r1
 800568a:	22ff      	movs	r2, #255	; 0xff
 800568c:	e72e      	b.n	80054ec <__aeabi_fmul+0x94>
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	08009068 	.word	0x08009068
 8005694:	f7ffffff 	.word	0xf7ffffff

08005698 <__aeabi_fsub>:
 8005698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569a:	464f      	mov	r7, r9
 800569c:	46d6      	mov	lr, sl
 800569e:	4646      	mov	r6, r8
 80056a0:	0044      	lsls	r4, r0, #1
 80056a2:	b5c0      	push	{r6, r7, lr}
 80056a4:	0fc2      	lsrs	r2, r0, #31
 80056a6:	0247      	lsls	r7, r0, #9
 80056a8:	0248      	lsls	r0, r1, #9
 80056aa:	0a40      	lsrs	r0, r0, #9
 80056ac:	4684      	mov	ip, r0
 80056ae:	4666      	mov	r6, ip
 80056b0:	0a7b      	lsrs	r3, r7, #9
 80056b2:	0048      	lsls	r0, r1, #1
 80056b4:	0fc9      	lsrs	r1, r1, #31
 80056b6:	469a      	mov	sl, r3
 80056b8:	0e24      	lsrs	r4, r4, #24
 80056ba:	0015      	movs	r5, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	0e00      	lsrs	r0, r0, #24
 80056c0:	4689      	mov	r9, r1
 80056c2:	00f6      	lsls	r6, r6, #3
 80056c4:	28ff      	cmp	r0, #255	; 0xff
 80056c6:	d100      	bne.n	80056ca <__aeabi_fsub+0x32>
 80056c8:	e08f      	b.n	80057ea <__aeabi_fsub+0x152>
 80056ca:	2101      	movs	r1, #1
 80056cc:	464f      	mov	r7, r9
 80056ce:	404f      	eors	r7, r1
 80056d0:	0039      	movs	r1, r7
 80056d2:	4291      	cmp	r1, r2
 80056d4:	d066      	beq.n	80057a4 <__aeabi_fsub+0x10c>
 80056d6:	1a22      	subs	r2, r4, r0
 80056d8:	2a00      	cmp	r2, #0
 80056da:	dc00      	bgt.n	80056de <__aeabi_fsub+0x46>
 80056dc:	e09d      	b.n	800581a <__aeabi_fsub+0x182>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d13d      	bne.n	800575e <__aeabi_fsub+0xc6>
 80056e2:	2e00      	cmp	r6, #0
 80056e4:	d100      	bne.n	80056e8 <__aeabi_fsub+0x50>
 80056e6:	e08b      	b.n	8005800 <__aeabi_fsub+0x168>
 80056e8:	1e51      	subs	r1, r2, #1
 80056ea:	2900      	cmp	r1, #0
 80056ec:	d000      	beq.n	80056f0 <__aeabi_fsub+0x58>
 80056ee:	e0b5      	b.n	800585c <__aeabi_fsub+0x1c4>
 80056f0:	2401      	movs	r4, #1
 80056f2:	1b9b      	subs	r3, r3, r6
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	d544      	bpl.n	8005782 <__aeabi_fsub+0xea>
 80056f8:	019b      	lsls	r3, r3, #6
 80056fa:	099f      	lsrs	r7, r3, #6
 80056fc:	0038      	movs	r0, r7
 80056fe:	f002 f869 	bl	80077d4 <__clzsi2>
 8005702:	3805      	subs	r0, #5
 8005704:	4087      	lsls	r7, r0
 8005706:	4284      	cmp	r4, r0
 8005708:	dd00      	ble.n	800570c <__aeabi_fsub+0x74>
 800570a:	e096      	b.n	800583a <__aeabi_fsub+0x1a2>
 800570c:	1b04      	subs	r4, r0, r4
 800570e:	003a      	movs	r2, r7
 8005710:	2020      	movs	r0, #32
 8005712:	3401      	adds	r4, #1
 8005714:	40e2      	lsrs	r2, r4
 8005716:	1b04      	subs	r4, r0, r4
 8005718:	40a7      	lsls	r7, r4
 800571a:	003b      	movs	r3, r7
 800571c:	1e5f      	subs	r7, r3, #1
 800571e:	41bb      	sbcs	r3, r7
 8005720:	2400      	movs	r4, #0
 8005722:	4313      	orrs	r3, r2
 8005724:	075a      	lsls	r2, r3, #29
 8005726:	d004      	beq.n	8005732 <__aeabi_fsub+0x9a>
 8005728:	220f      	movs	r2, #15
 800572a:	401a      	ands	r2, r3
 800572c:	2a04      	cmp	r2, #4
 800572e:	d000      	beq.n	8005732 <__aeabi_fsub+0x9a>
 8005730:	3304      	adds	r3, #4
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	d527      	bpl.n	8005786 <__aeabi_fsub+0xee>
 8005736:	3401      	adds	r4, #1
 8005738:	2cff      	cmp	r4, #255	; 0xff
 800573a:	d100      	bne.n	800573e <__aeabi_fsub+0xa6>
 800573c:	e079      	b.n	8005832 <__aeabi_fsub+0x19a>
 800573e:	2201      	movs	r2, #1
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	0a5b      	lsrs	r3, r3, #9
 8005744:	b2e4      	uxtb	r4, r4
 8005746:	402a      	ands	r2, r5
 8005748:	025b      	lsls	r3, r3, #9
 800574a:	05e4      	lsls	r4, r4, #23
 800574c:	0a58      	lsrs	r0, r3, #9
 800574e:	07d2      	lsls	r2, r2, #31
 8005750:	4320      	orrs	r0, r4
 8005752:	4310      	orrs	r0, r2
 8005754:	bc1c      	pop	{r2, r3, r4}
 8005756:	4690      	mov	r8, r2
 8005758:	4699      	mov	r9, r3
 800575a:	46a2      	mov	sl, r4
 800575c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800575e:	2cff      	cmp	r4, #255	; 0xff
 8005760:	d0e0      	beq.n	8005724 <__aeabi_fsub+0x8c>
 8005762:	2180      	movs	r1, #128	; 0x80
 8005764:	04c9      	lsls	r1, r1, #19
 8005766:	430e      	orrs	r6, r1
 8005768:	2a1b      	cmp	r2, #27
 800576a:	dc7b      	bgt.n	8005864 <__aeabi_fsub+0x1cc>
 800576c:	0031      	movs	r1, r6
 800576e:	2020      	movs	r0, #32
 8005770:	40d1      	lsrs	r1, r2
 8005772:	1a82      	subs	r2, r0, r2
 8005774:	4096      	lsls	r6, r2
 8005776:	1e72      	subs	r2, r6, #1
 8005778:	4196      	sbcs	r6, r2
 800577a:	430e      	orrs	r6, r1
 800577c:	1b9b      	subs	r3, r3, r6
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	d4ba      	bmi.n	80056f8 <__aeabi_fsub+0x60>
 8005782:	075a      	lsls	r2, r3, #29
 8005784:	d1d0      	bne.n	8005728 <__aeabi_fsub+0x90>
 8005786:	2201      	movs	r2, #1
 8005788:	08df      	lsrs	r7, r3, #3
 800578a:	402a      	ands	r2, r5
 800578c:	2cff      	cmp	r4, #255	; 0xff
 800578e:	d133      	bne.n	80057f8 <__aeabi_fsub+0x160>
 8005790:	2f00      	cmp	r7, #0
 8005792:	d100      	bne.n	8005796 <__aeabi_fsub+0xfe>
 8005794:	e0a8      	b.n	80058e8 <__aeabi_fsub+0x250>
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	03db      	lsls	r3, r3, #15
 800579a:	433b      	orrs	r3, r7
 800579c:	025b      	lsls	r3, r3, #9
 800579e:	0a5b      	lsrs	r3, r3, #9
 80057a0:	24ff      	movs	r4, #255	; 0xff
 80057a2:	e7d1      	b.n	8005748 <__aeabi_fsub+0xb0>
 80057a4:	1a21      	subs	r1, r4, r0
 80057a6:	2900      	cmp	r1, #0
 80057a8:	dd4c      	ble.n	8005844 <__aeabi_fsub+0x1ac>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d02a      	beq.n	8005804 <__aeabi_fsub+0x16c>
 80057ae:	2cff      	cmp	r4, #255	; 0xff
 80057b0:	d0b8      	beq.n	8005724 <__aeabi_fsub+0x8c>
 80057b2:	2080      	movs	r0, #128	; 0x80
 80057b4:	04c0      	lsls	r0, r0, #19
 80057b6:	4306      	orrs	r6, r0
 80057b8:	291b      	cmp	r1, #27
 80057ba:	dd00      	ble.n	80057be <__aeabi_fsub+0x126>
 80057bc:	e0af      	b.n	800591e <__aeabi_fsub+0x286>
 80057be:	0030      	movs	r0, r6
 80057c0:	2720      	movs	r7, #32
 80057c2:	40c8      	lsrs	r0, r1
 80057c4:	1a79      	subs	r1, r7, r1
 80057c6:	408e      	lsls	r6, r1
 80057c8:	1e71      	subs	r1, r6, #1
 80057ca:	418e      	sbcs	r6, r1
 80057cc:	4306      	orrs	r6, r0
 80057ce:	199b      	adds	r3, r3, r6
 80057d0:	0159      	lsls	r1, r3, #5
 80057d2:	d5d6      	bpl.n	8005782 <__aeabi_fsub+0xea>
 80057d4:	3401      	adds	r4, #1
 80057d6:	2cff      	cmp	r4, #255	; 0xff
 80057d8:	d100      	bne.n	80057dc <__aeabi_fsub+0x144>
 80057da:	e085      	b.n	80058e8 <__aeabi_fsub+0x250>
 80057dc:	2201      	movs	r2, #1
 80057de:	497a      	ldr	r1, [pc, #488]	; (80059c8 <__aeabi_fsub+0x330>)
 80057e0:	401a      	ands	r2, r3
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	400b      	ands	r3, r1
 80057e6:	4313      	orrs	r3, r2
 80057e8:	e79c      	b.n	8005724 <__aeabi_fsub+0x8c>
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	d000      	beq.n	80057f0 <__aeabi_fsub+0x158>
 80057ee:	e770      	b.n	80056d2 <__aeabi_fsub+0x3a>
 80057f0:	e76b      	b.n	80056ca <__aeabi_fsub+0x32>
 80057f2:	1e3b      	subs	r3, r7, #0
 80057f4:	d1c5      	bne.n	8005782 <__aeabi_fsub+0xea>
 80057f6:	2200      	movs	r2, #0
 80057f8:	027b      	lsls	r3, r7, #9
 80057fa:	0a5b      	lsrs	r3, r3, #9
 80057fc:	b2e4      	uxtb	r4, r4
 80057fe:	e7a3      	b.n	8005748 <__aeabi_fsub+0xb0>
 8005800:	0014      	movs	r4, r2
 8005802:	e78f      	b.n	8005724 <__aeabi_fsub+0x8c>
 8005804:	2e00      	cmp	r6, #0
 8005806:	d04d      	beq.n	80058a4 <__aeabi_fsub+0x20c>
 8005808:	1e48      	subs	r0, r1, #1
 800580a:	2800      	cmp	r0, #0
 800580c:	d157      	bne.n	80058be <__aeabi_fsub+0x226>
 800580e:	199b      	adds	r3, r3, r6
 8005810:	2401      	movs	r4, #1
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	d5b5      	bpl.n	8005782 <__aeabi_fsub+0xea>
 8005816:	2402      	movs	r4, #2
 8005818:	e7e0      	b.n	80057dc <__aeabi_fsub+0x144>
 800581a:	2a00      	cmp	r2, #0
 800581c:	d125      	bne.n	800586a <__aeabi_fsub+0x1d2>
 800581e:	1c62      	adds	r2, r4, #1
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	2a01      	cmp	r2, #1
 8005824:	dd72      	ble.n	800590c <__aeabi_fsub+0x274>
 8005826:	1b9f      	subs	r7, r3, r6
 8005828:	017a      	lsls	r2, r7, #5
 800582a:	d535      	bpl.n	8005898 <__aeabi_fsub+0x200>
 800582c:	1af7      	subs	r7, r6, r3
 800582e:	000d      	movs	r5, r1
 8005830:	e764      	b.n	80056fc <__aeabi_fsub+0x64>
 8005832:	2201      	movs	r2, #1
 8005834:	2300      	movs	r3, #0
 8005836:	402a      	ands	r2, r5
 8005838:	e786      	b.n	8005748 <__aeabi_fsub+0xb0>
 800583a:	003b      	movs	r3, r7
 800583c:	4a63      	ldr	r2, [pc, #396]	; (80059cc <__aeabi_fsub+0x334>)
 800583e:	1a24      	subs	r4, r4, r0
 8005840:	4013      	ands	r3, r2
 8005842:	e76f      	b.n	8005724 <__aeabi_fsub+0x8c>
 8005844:	2900      	cmp	r1, #0
 8005846:	d16c      	bne.n	8005922 <__aeabi_fsub+0x28a>
 8005848:	1c61      	adds	r1, r4, #1
 800584a:	b2c8      	uxtb	r0, r1
 800584c:	2801      	cmp	r0, #1
 800584e:	dd4e      	ble.n	80058ee <__aeabi_fsub+0x256>
 8005850:	29ff      	cmp	r1, #255	; 0xff
 8005852:	d049      	beq.n	80058e8 <__aeabi_fsub+0x250>
 8005854:	199b      	adds	r3, r3, r6
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	000c      	movs	r4, r1
 800585a:	e763      	b.n	8005724 <__aeabi_fsub+0x8c>
 800585c:	2aff      	cmp	r2, #255	; 0xff
 800585e:	d041      	beq.n	80058e4 <__aeabi_fsub+0x24c>
 8005860:	000a      	movs	r2, r1
 8005862:	e781      	b.n	8005768 <__aeabi_fsub+0xd0>
 8005864:	2601      	movs	r6, #1
 8005866:	1b9b      	subs	r3, r3, r6
 8005868:	e789      	b.n	800577e <__aeabi_fsub+0xe6>
 800586a:	2c00      	cmp	r4, #0
 800586c:	d01c      	beq.n	80058a8 <__aeabi_fsub+0x210>
 800586e:	28ff      	cmp	r0, #255	; 0xff
 8005870:	d021      	beq.n	80058b6 <__aeabi_fsub+0x21e>
 8005872:	2480      	movs	r4, #128	; 0x80
 8005874:	04e4      	lsls	r4, r4, #19
 8005876:	4252      	negs	r2, r2
 8005878:	4323      	orrs	r3, r4
 800587a:	2a1b      	cmp	r2, #27
 800587c:	dd00      	ble.n	8005880 <__aeabi_fsub+0x1e8>
 800587e:	e096      	b.n	80059ae <__aeabi_fsub+0x316>
 8005880:	001c      	movs	r4, r3
 8005882:	2520      	movs	r5, #32
 8005884:	40d4      	lsrs	r4, r2
 8005886:	1aaa      	subs	r2, r5, r2
 8005888:	4093      	lsls	r3, r2
 800588a:	1e5a      	subs	r2, r3, #1
 800588c:	4193      	sbcs	r3, r2
 800588e:	4323      	orrs	r3, r4
 8005890:	1af3      	subs	r3, r6, r3
 8005892:	0004      	movs	r4, r0
 8005894:	000d      	movs	r5, r1
 8005896:	e72d      	b.n	80056f4 <__aeabi_fsub+0x5c>
 8005898:	2f00      	cmp	r7, #0
 800589a:	d000      	beq.n	800589e <__aeabi_fsub+0x206>
 800589c:	e72e      	b.n	80056fc <__aeabi_fsub+0x64>
 800589e:	2200      	movs	r2, #0
 80058a0:	2400      	movs	r4, #0
 80058a2:	e7a9      	b.n	80057f8 <__aeabi_fsub+0x160>
 80058a4:	000c      	movs	r4, r1
 80058a6:	e73d      	b.n	8005724 <__aeabi_fsub+0x8c>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d058      	beq.n	800595e <__aeabi_fsub+0x2c6>
 80058ac:	43d2      	mvns	r2, r2
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	d0ee      	beq.n	8005890 <__aeabi_fsub+0x1f8>
 80058b2:	28ff      	cmp	r0, #255	; 0xff
 80058b4:	d1e1      	bne.n	800587a <__aeabi_fsub+0x1e2>
 80058b6:	0033      	movs	r3, r6
 80058b8:	24ff      	movs	r4, #255	; 0xff
 80058ba:	000d      	movs	r5, r1
 80058bc:	e732      	b.n	8005724 <__aeabi_fsub+0x8c>
 80058be:	29ff      	cmp	r1, #255	; 0xff
 80058c0:	d010      	beq.n	80058e4 <__aeabi_fsub+0x24c>
 80058c2:	0001      	movs	r1, r0
 80058c4:	e778      	b.n	80057b8 <__aeabi_fsub+0x120>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d06e      	beq.n	80059a8 <__aeabi_fsub+0x310>
 80058ca:	24ff      	movs	r4, #255	; 0xff
 80058cc:	2e00      	cmp	r6, #0
 80058ce:	d100      	bne.n	80058d2 <__aeabi_fsub+0x23a>
 80058d0:	e728      	b.n	8005724 <__aeabi_fsub+0x8c>
 80058d2:	2280      	movs	r2, #128	; 0x80
 80058d4:	4651      	mov	r1, sl
 80058d6:	03d2      	lsls	r2, r2, #15
 80058d8:	4211      	tst	r1, r2
 80058da:	d003      	beq.n	80058e4 <__aeabi_fsub+0x24c>
 80058dc:	4661      	mov	r1, ip
 80058de:	4211      	tst	r1, r2
 80058e0:	d100      	bne.n	80058e4 <__aeabi_fsub+0x24c>
 80058e2:	0033      	movs	r3, r6
 80058e4:	24ff      	movs	r4, #255	; 0xff
 80058e6:	e71d      	b.n	8005724 <__aeabi_fsub+0x8c>
 80058e8:	24ff      	movs	r4, #255	; 0xff
 80058ea:	2300      	movs	r3, #0
 80058ec:	e72c      	b.n	8005748 <__aeabi_fsub+0xb0>
 80058ee:	2c00      	cmp	r4, #0
 80058f0:	d1e9      	bne.n	80058c6 <__aeabi_fsub+0x22e>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d063      	beq.n	80059be <__aeabi_fsub+0x326>
 80058f6:	2e00      	cmp	r6, #0
 80058f8:	d100      	bne.n	80058fc <__aeabi_fsub+0x264>
 80058fa:	e713      	b.n	8005724 <__aeabi_fsub+0x8c>
 80058fc:	199b      	adds	r3, r3, r6
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	d400      	bmi.n	8005904 <__aeabi_fsub+0x26c>
 8005902:	e73e      	b.n	8005782 <__aeabi_fsub+0xea>
 8005904:	4a31      	ldr	r2, [pc, #196]	; (80059cc <__aeabi_fsub+0x334>)
 8005906:	000c      	movs	r4, r1
 8005908:	4013      	ands	r3, r2
 800590a:	e70b      	b.n	8005724 <__aeabi_fsub+0x8c>
 800590c:	2c00      	cmp	r4, #0
 800590e:	d11e      	bne.n	800594e <__aeabi_fsub+0x2b6>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d12f      	bne.n	8005974 <__aeabi_fsub+0x2dc>
 8005914:	2e00      	cmp	r6, #0
 8005916:	d04f      	beq.n	80059b8 <__aeabi_fsub+0x320>
 8005918:	0033      	movs	r3, r6
 800591a:	000d      	movs	r5, r1
 800591c:	e702      	b.n	8005724 <__aeabi_fsub+0x8c>
 800591e:	2601      	movs	r6, #1
 8005920:	e755      	b.n	80057ce <__aeabi_fsub+0x136>
 8005922:	2c00      	cmp	r4, #0
 8005924:	d11f      	bne.n	8005966 <__aeabi_fsub+0x2ce>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d043      	beq.n	80059b2 <__aeabi_fsub+0x31a>
 800592a:	43c9      	mvns	r1, r1
 800592c:	2900      	cmp	r1, #0
 800592e:	d00b      	beq.n	8005948 <__aeabi_fsub+0x2b0>
 8005930:	28ff      	cmp	r0, #255	; 0xff
 8005932:	d039      	beq.n	80059a8 <__aeabi_fsub+0x310>
 8005934:	291b      	cmp	r1, #27
 8005936:	dc44      	bgt.n	80059c2 <__aeabi_fsub+0x32a>
 8005938:	001c      	movs	r4, r3
 800593a:	2720      	movs	r7, #32
 800593c:	40cc      	lsrs	r4, r1
 800593e:	1a79      	subs	r1, r7, r1
 8005940:	408b      	lsls	r3, r1
 8005942:	1e59      	subs	r1, r3, #1
 8005944:	418b      	sbcs	r3, r1
 8005946:	4323      	orrs	r3, r4
 8005948:	199b      	adds	r3, r3, r6
 800594a:	0004      	movs	r4, r0
 800594c:	e740      	b.n	80057d0 <__aeabi_fsub+0x138>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11a      	bne.n	8005988 <__aeabi_fsub+0x2f0>
 8005952:	2e00      	cmp	r6, #0
 8005954:	d124      	bne.n	80059a0 <__aeabi_fsub+0x308>
 8005956:	2780      	movs	r7, #128	; 0x80
 8005958:	2200      	movs	r2, #0
 800595a:	03ff      	lsls	r7, r7, #15
 800595c:	e71b      	b.n	8005796 <__aeabi_fsub+0xfe>
 800595e:	0033      	movs	r3, r6
 8005960:	0004      	movs	r4, r0
 8005962:	000d      	movs	r5, r1
 8005964:	e6de      	b.n	8005724 <__aeabi_fsub+0x8c>
 8005966:	28ff      	cmp	r0, #255	; 0xff
 8005968:	d01e      	beq.n	80059a8 <__aeabi_fsub+0x310>
 800596a:	2480      	movs	r4, #128	; 0x80
 800596c:	04e4      	lsls	r4, r4, #19
 800596e:	4249      	negs	r1, r1
 8005970:	4323      	orrs	r3, r4
 8005972:	e7df      	b.n	8005934 <__aeabi_fsub+0x29c>
 8005974:	2e00      	cmp	r6, #0
 8005976:	d100      	bne.n	800597a <__aeabi_fsub+0x2e2>
 8005978:	e6d4      	b.n	8005724 <__aeabi_fsub+0x8c>
 800597a:	1b9f      	subs	r7, r3, r6
 800597c:	017a      	lsls	r2, r7, #5
 800597e:	d400      	bmi.n	8005982 <__aeabi_fsub+0x2ea>
 8005980:	e737      	b.n	80057f2 <__aeabi_fsub+0x15a>
 8005982:	1af3      	subs	r3, r6, r3
 8005984:	000d      	movs	r5, r1
 8005986:	e6cd      	b.n	8005724 <__aeabi_fsub+0x8c>
 8005988:	24ff      	movs	r4, #255	; 0xff
 800598a:	2e00      	cmp	r6, #0
 800598c:	d100      	bne.n	8005990 <__aeabi_fsub+0x2f8>
 800598e:	e6c9      	b.n	8005724 <__aeabi_fsub+0x8c>
 8005990:	2280      	movs	r2, #128	; 0x80
 8005992:	4650      	mov	r0, sl
 8005994:	03d2      	lsls	r2, r2, #15
 8005996:	4210      	tst	r0, r2
 8005998:	d0a4      	beq.n	80058e4 <__aeabi_fsub+0x24c>
 800599a:	4660      	mov	r0, ip
 800599c:	4210      	tst	r0, r2
 800599e:	d1a1      	bne.n	80058e4 <__aeabi_fsub+0x24c>
 80059a0:	0033      	movs	r3, r6
 80059a2:	000d      	movs	r5, r1
 80059a4:	24ff      	movs	r4, #255	; 0xff
 80059a6:	e6bd      	b.n	8005724 <__aeabi_fsub+0x8c>
 80059a8:	0033      	movs	r3, r6
 80059aa:	24ff      	movs	r4, #255	; 0xff
 80059ac:	e6ba      	b.n	8005724 <__aeabi_fsub+0x8c>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e76e      	b.n	8005890 <__aeabi_fsub+0x1f8>
 80059b2:	0033      	movs	r3, r6
 80059b4:	0004      	movs	r4, r0
 80059b6:	e6b5      	b.n	8005724 <__aeabi_fsub+0x8c>
 80059b8:	2700      	movs	r7, #0
 80059ba:	2200      	movs	r2, #0
 80059bc:	e71c      	b.n	80057f8 <__aeabi_fsub+0x160>
 80059be:	0033      	movs	r3, r6
 80059c0:	e6b0      	b.n	8005724 <__aeabi_fsub+0x8c>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e7c0      	b.n	8005948 <__aeabi_fsub+0x2b0>
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	7dffffff 	.word	0x7dffffff
 80059cc:	fbffffff 	.word	0xfbffffff

080059d0 <__aeabi_f2iz>:
 80059d0:	0241      	lsls	r1, r0, #9
 80059d2:	0043      	lsls	r3, r0, #1
 80059d4:	0fc2      	lsrs	r2, r0, #31
 80059d6:	0a49      	lsrs	r1, r1, #9
 80059d8:	0e1b      	lsrs	r3, r3, #24
 80059da:	2000      	movs	r0, #0
 80059dc:	2b7e      	cmp	r3, #126	; 0x7e
 80059de:	dd0d      	ble.n	80059fc <__aeabi_f2iz+0x2c>
 80059e0:	2b9d      	cmp	r3, #157	; 0x9d
 80059e2:	dc0c      	bgt.n	80059fe <__aeabi_f2iz+0x2e>
 80059e4:	2080      	movs	r0, #128	; 0x80
 80059e6:	0400      	lsls	r0, r0, #16
 80059e8:	4301      	orrs	r1, r0
 80059ea:	2b95      	cmp	r3, #149	; 0x95
 80059ec:	dc0a      	bgt.n	8005a04 <__aeabi_f2iz+0x34>
 80059ee:	2096      	movs	r0, #150	; 0x96
 80059f0:	1ac3      	subs	r3, r0, r3
 80059f2:	40d9      	lsrs	r1, r3
 80059f4:	4248      	negs	r0, r1
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	d100      	bne.n	80059fc <__aeabi_f2iz+0x2c>
 80059fa:	0008      	movs	r0, r1
 80059fc:	4770      	bx	lr
 80059fe:	4b03      	ldr	r3, [pc, #12]	; (8005a0c <__aeabi_f2iz+0x3c>)
 8005a00:	18d0      	adds	r0, r2, r3
 8005a02:	e7fb      	b.n	80059fc <__aeabi_f2iz+0x2c>
 8005a04:	3b96      	subs	r3, #150	; 0x96
 8005a06:	4099      	lsls	r1, r3
 8005a08:	e7f4      	b.n	80059f4 <__aeabi_f2iz+0x24>
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	7fffffff 	.word	0x7fffffff

08005a10 <__aeabi_i2f>:
 8005a10:	b570      	push	{r4, r5, r6, lr}
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d030      	beq.n	8005a78 <__aeabi_i2f+0x68>
 8005a16:	17c3      	asrs	r3, r0, #31
 8005a18:	18c4      	adds	r4, r0, r3
 8005a1a:	405c      	eors	r4, r3
 8005a1c:	0fc5      	lsrs	r5, r0, #31
 8005a1e:	0020      	movs	r0, r4
 8005a20:	f001 fed8 	bl	80077d4 <__clzsi2>
 8005a24:	239e      	movs	r3, #158	; 0x9e
 8005a26:	1a1b      	subs	r3, r3, r0
 8005a28:	2b96      	cmp	r3, #150	; 0x96
 8005a2a:	dc0d      	bgt.n	8005a48 <__aeabi_i2f+0x38>
 8005a2c:	2296      	movs	r2, #150	; 0x96
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	4094      	lsls	r4, r2
 8005a32:	002a      	movs	r2, r5
 8005a34:	0264      	lsls	r4, r4, #9
 8005a36:	0a64      	lsrs	r4, r4, #9
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	0264      	lsls	r4, r4, #9
 8005a3c:	05db      	lsls	r3, r3, #23
 8005a3e:	0a60      	lsrs	r0, r4, #9
 8005a40:	07d2      	lsls	r2, r2, #31
 8005a42:	4318      	orrs	r0, r3
 8005a44:	4310      	orrs	r0, r2
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
 8005a48:	2b99      	cmp	r3, #153	; 0x99
 8005a4a:	dc19      	bgt.n	8005a80 <__aeabi_i2f+0x70>
 8005a4c:	2299      	movs	r2, #153	; 0x99
 8005a4e:	1ad2      	subs	r2, r2, r3
 8005a50:	2a00      	cmp	r2, #0
 8005a52:	dd29      	ble.n	8005aa8 <__aeabi_i2f+0x98>
 8005a54:	4094      	lsls	r4, r2
 8005a56:	0022      	movs	r2, r4
 8005a58:	4c14      	ldr	r4, [pc, #80]	; (8005aac <__aeabi_i2f+0x9c>)
 8005a5a:	4014      	ands	r4, r2
 8005a5c:	0751      	lsls	r1, r2, #29
 8005a5e:	d004      	beq.n	8005a6a <__aeabi_i2f+0x5a>
 8005a60:	210f      	movs	r1, #15
 8005a62:	400a      	ands	r2, r1
 8005a64:	2a04      	cmp	r2, #4
 8005a66:	d000      	beq.n	8005a6a <__aeabi_i2f+0x5a>
 8005a68:	3404      	adds	r4, #4
 8005a6a:	0162      	lsls	r2, r4, #5
 8005a6c:	d413      	bmi.n	8005a96 <__aeabi_i2f+0x86>
 8005a6e:	01a4      	lsls	r4, r4, #6
 8005a70:	0a64      	lsrs	r4, r4, #9
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	002a      	movs	r2, r5
 8005a76:	e7e0      	b.n	8005a3a <__aeabi_i2f+0x2a>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2400      	movs	r4, #0
 8005a7e:	e7dc      	b.n	8005a3a <__aeabi_i2f+0x2a>
 8005a80:	2205      	movs	r2, #5
 8005a82:	0021      	movs	r1, r4
 8005a84:	1a12      	subs	r2, r2, r0
 8005a86:	40d1      	lsrs	r1, r2
 8005a88:	22b9      	movs	r2, #185	; 0xb9
 8005a8a:	1ad2      	subs	r2, r2, r3
 8005a8c:	4094      	lsls	r4, r2
 8005a8e:	1e62      	subs	r2, r4, #1
 8005a90:	4194      	sbcs	r4, r2
 8005a92:	430c      	orrs	r4, r1
 8005a94:	e7da      	b.n	8005a4c <__aeabi_i2f+0x3c>
 8005a96:	4b05      	ldr	r3, [pc, #20]	; (8005aac <__aeabi_i2f+0x9c>)
 8005a98:	002a      	movs	r2, r5
 8005a9a:	401c      	ands	r4, r3
 8005a9c:	239f      	movs	r3, #159	; 0x9f
 8005a9e:	01a4      	lsls	r4, r4, #6
 8005aa0:	1a1b      	subs	r3, r3, r0
 8005aa2:	0a64      	lsrs	r4, r4, #9
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e7c8      	b.n	8005a3a <__aeabi_i2f+0x2a>
 8005aa8:	0022      	movs	r2, r4
 8005aaa:	e7d5      	b.n	8005a58 <__aeabi_i2f+0x48>
 8005aac:	fbffffff 	.word	0xfbffffff

08005ab0 <__aeabi_ui2f>:
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	1e04      	subs	r4, r0, #0
 8005ab4:	d027      	beq.n	8005b06 <__aeabi_ui2f+0x56>
 8005ab6:	f001 fe8d 	bl	80077d4 <__clzsi2>
 8005aba:	239e      	movs	r3, #158	; 0x9e
 8005abc:	1a1b      	subs	r3, r3, r0
 8005abe:	2b96      	cmp	r3, #150	; 0x96
 8005ac0:	dc0a      	bgt.n	8005ad8 <__aeabi_ui2f+0x28>
 8005ac2:	2296      	movs	r2, #150	; 0x96
 8005ac4:	1ad2      	subs	r2, r2, r3
 8005ac6:	4094      	lsls	r4, r2
 8005ac8:	0264      	lsls	r4, r4, #9
 8005aca:	0a64      	lsrs	r4, r4, #9
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	0264      	lsls	r4, r4, #9
 8005ad0:	05db      	lsls	r3, r3, #23
 8005ad2:	0a60      	lsrs	r0, r4, #9
 8005ad4:	4318      	orrs	r0, r3
 8005ad6:	bd10      	pop	{r4, pc}
 8005ad8:	2b99      	cmp	r3, #153	; 0x99
 8005ada:	dc17      	bgt.n	8005b0c <__aeabi_ui2f+0x5c>
 8005adc:	2299      	movs	r2, #153	; 0x99
 8005ade:	1ad2      	subs	r2, r2, r3
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	dd27      	ble.n	8005b34 <__aeabi_ui2f+0x84>
 8005ae4:	4094      	lsls	r4, r2
 8005ae6:	0022      	movs	r2, r4
 8005ae8:	4c13      	ldr	r4, [pc, #76]	; (8005b38 <__aeabi_ui2f+0x88>)
 8005aea:	4014      	ands	r4, r2
 8005aec:	0751      	lsls	r1, r2, #29
 8005aee:	d004      	beq.n	8005afa <__aeabi_ui2f+0x4a>
 8005af0:	210f      	movs	r1, #15
 8005af2:	400a      	ands	r2, r1
 8005af4:	2a04      	cmp	r2, #4
 8005af6:	d000      	beq.n	8005afa <__aeabi_ui2f+0x4a>
 8005af8:	3404      	adds	r4, #4
 8005afa:	0162      	lsls	r2, r4, #5
 8005afc:	d412      	bmi.n	8005b24 <__aeabi_ui2f+0x74>
 8005afe:	01a4      	lsls	r4, r4, #6
 8005b00:	0a64      	lsrs	r4, r4, #9
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	e7e3      	b.n	8005ace <__aeabi_ui2f+0x1e>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2400      	movs	r4, #0
 8005b0a:	e7e0      	b.n	8005ace <__aeabi_ui2f+0x1e>
 8005b0c:	22b9      	movs	r2, #185	; 0xb9
 8005b0e:	0021      	movs	r1, r4
 8005b10:	1ad2      	subs	r2, r2, r3
 8005b12:	4091      	lsls	r1, r2
 8005b14:	000a      	movs	r2, r1
 8005b16:	1e51      	subs	r1, r2, #1
 8005b18:	418a      	sbcs	r2, r1
 8005b1a:	2105      	movs	r1, #5
 8005b1c:	1a09      	subs	r1, r1, r0
 8005b1e:	40cc      	lsrs	r4, r1
 8005b20:	4314      	orrs	r4, r2
 8005b22:	e7db      	b.n	8005adc <__aeabi_ui2f+0x2c>
 8005b24:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <__aeabi_ui2f+0x88>)
 8005b26:	401c      	ands	r4, r3
 8005b28:	239f      	movs	r3, #159	; 0x9f
 8005b2a:	01a4      	lsls	r4, r4, #6
 8005b2c:	1a1b      	subs	r3, r3, r0
 8005b2e:	0a64      	lsrs	r4, r4, #9
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	e7cc      	b.n	8005ace <__aeabi_ui2f+0x1e>
 8005b34:	0022      	movs	r2, r4
 8005b36:	e7d7      	b.n	8005ae8 <__aeabi_ui2f+0x38>
 8005b38:	fbffffff 	.word	0xfbffffff

08005b3c <__aeabi_dadd>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	4645      	mov	r5, r8
 8005b40:	46de      	mov	lr, fp
 8005b42:	4657      	mov	r7, sl
 8005b44:	464e      	mov	r6, r9
 8005b46:	030c      	lsls	r4, r1, #12
 8005b48:	b5e0      	push	{r5, r6, r7, lr}
 8005b4a:	004e      	lsls	r6, r1, #1
 8005b4c:	0fc9      	lsrs	r1, r1, #31
 8005b4e:	4688      	mov	r8, r1
 8005b50:	000d      	movs	r5, r1
 8005b52:	0a61      	lsrs	r1, r4, #9
 8005b54:	0f44      	lsrs	r4, r0, #29
 8005b56:	430c      	orrs	r4, r1
 8005b58:	00c7      	lsls	r7, r0, #3
 8005b5a:	0319      	lsls	r1, r3, #12
 8005b5c:	0058      	lsls	r0, r3, #1
 8005b5e:	0fdb      	lsrs	r3, r3, #31
 8005b60:	469b      	mov	fp, r3
 8005b62:	0a4b      	lsrs	r3, r1, #9
 8005b64:	0f51      	lsrs	r1, r2, #29
 8005b66:	430b      	orrs	r3, r1
 8005b68:	0d76      	lsrs	r6, r6, #21
 8005b6a:	0d40      	lsrs	r0, r0, #21
 8005b6c:	0019      	movs	r1, r3
 8005b6e:	00d2      	lsls	r2, r2, #3
 8005b70:	45d8      	cmp	r8, fp
 8005b72:	d100      	bne.n	8005b76 <__aeabi_dadd+0x3a>
 8005b74:	e0ae      	b.n	8005cd4 <__aeabi_dadd+0x198>
 8005b76:	1a35      	subs	r5, r6, r0
 8005b78:	2d00      	cmp	r5, #0
 8005b7a:	dc00      	bgt.n	8005b7e <__aeabi_dadd+0x42>
 8005b7c:	e0f6      	b.n	8005d6c <__aeabi_dadd+0x230>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d10f      	bne.n	8005ba2 <__aeabi_dadd+0x66>
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d100      	bne.n	8005b88 <__aeabi_dadd+0x4c>
 8005b86:	e0db      	b.n	8005d40 <__aeabi_dadd+0x204>
 8005b88:	1e6b      	subs	r3, r5, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d000      	beq.n	8005b90 <__aeabi_dadd+0x54>
 8005b8e:	e137      	b.n	8005e00 <__aeabi_dadd+0x2c4>
 8005b90:	1aba      	subs	r2, r7, r2
 8005b92:	4297      	cmp	r7, r2
 8005b94:	41bf      	sbcs	r7, r7
 8005b96:	1a64      	subs	r4, r4, r1
 8005b98:	427f      	negs	r7, r7
 8005b9a:	1be4      	subs	r4, r4, r7
 8005b9c:	2601      	movs	r6, #1
 8005b9e:	0017      	movs	r7, r2
 8005ba0:	e024      	b.n	8005bec <__aeabi_dadd+0xb0>
 8005ba2:	4bc6      	ldr	r3, [pc, #792]	; (8005ebc <__aeabi_dadd+0x380>)
 8005ba4:	429e      	cmp	r6, r3
 8005ba6:	d04d      	beq.n	8005c44 <__aeabi_dadd+0x108>
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	4319      	orrs	r1, r3
 8005bae:	2d38      	cmp	r5, #56	; 0x38
 8005bb0:	dd00      	ble.n	8005bb4 <__aeabi_dadd+0x78>
 8005bb2:	e107      	b.n	8005dc4 <__aeabi_dadd+0x288>
 8005bb4:	2d1f      	cmp	r5, #31
 8005bb6:	dd00      	ble.n	8005bba <__aeabi_dadd+0x7e>
 8005bb8:	e138      	b.n	8005e2c <__aeabi_dadd+0x2f0>
 8005bba:	2020      	movs	r0, #32
 8005bbc:	1b43      	subs	r3, r0, r5
 8005bbe:	469a      	mov	sl, r3
 8005bc0:	000b      	movs	r3, r1
 8005bc2:	4650      	mov	r0, sl
 8005bc4:	4083      	lsls	r3, r0
 8005bc6:	4699      	mov	r9, r3
 8005bc8:	0013      	movs	r3, r2
 8005bca:	4648      	mov	r0, r9
 8005bcc:	40eb      	lsrs	r3, r5
 8005bce:	4318      	orrs	r0, r3
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	4082      	lsls	r2, r0
 8005bd6:	1e50      	subs	r0, r2, #1
 8005bd8:	4182      	sbcs	r2, r0
 8005bda:	40e9      	lsrs	r1, r5
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	1aba      	subs	r2, r7, r2
 8005be0:	1a61      	subs	r1, r4, r1
 8005be2:	4297      	cmp	r7, r2
 8005be4:	41a4      	sbcs	r4, r4
 8005be6:	0017      	movs	r7, r2
 8005be8:	4264      	negs	r4, r4
 8005bea:	1b0c      	subs	r4, r1, r4
 8005bec:	0223      	lsls	r3, r4, #8
 8005bee:	d562      	bpl.n	8005cb6 <__aeabi_dadd+0x17a>
 8005bf0:	0264      	lsls	r4, r4, #9
 8005bf2:	0a65      	lsrs	r5, r4, #9
 8005bf4:	2d00      	cmp	r5, #0
 8005bf6:	d100      	bne.n	8005bfa <__aeabi_dadd+0xbe>
 8005bf8:	e0df      	b.n	8005dba <__aeabi_dadd+0x27e>
 8005bfa:	0028      	movs	r0, r5
 8005bfc:	f001 fdea 	bl	80077d4 <__clzsi2>
 8005c00:	0003      	movs	r3, r0
 8005c02:	3b08      	subs	r3, #8
 8005c04:	2b1f      	cmp	r3, #31
 8005c06:	dd00      	ble.n	8005c0a <__aeabi_dadd+0xce>
 8005c08:	e0d2      	b.n	8005db0 <__aeabi_dadd+0x274>
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	003c      	movs	r4, r7
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	409d      	lsls	r5, r3
 8005c12:	40d4      	lsrs	r4, r2
 8005c14:	409f      	lsls	r7, r3
 8005c16:	4325      	orrs	r5, r4
 8005c18:	429e      	cmp	r6, r3
 8005c1a:	dd00      	ble.n	8005c1e <__aeabi_dadd+0xe2>
 8005c1c:	e0c4      	b.n	8005da8 <__aeabi_dadd+0x26c>
 8005c1e:	1b9e      	subs	r6, r3, r6
 8005c20:	1c73      	adds	r3, r6, #1
 8005c22:	2b1f      	cmp	r3, #31
 8005c24:	dd00      	ble.n	8005c28 <__aeabi_dadd+0xec>
 8005c26:	e0f1      	b.n	8005e0c <__aeabi_dadd+0x2d0>
 8005c28:	2220      	movs	r2, #32
 8005c2a:	0038      	movs	r0, r7
 8005c2c:	0029      	movs	r1, r5
 8005c2e:	1ad2      	subs	r2, r2, r3
 8005c30:	40d8      	lsrs	r0, r3
 8005c32:	4091      	lsls	r1, r2
 8005c34:	4097      	lsls	r7, r2
 8005c36:	002c      	movs	r4, r5
 8005c38:	4301      	orrs	r1, r0
 8005c3a:	1e78      	subs	r0, r7, #1
 8005c3c:	4187      	sbcs	r7, r0
 8005c3e:	40dc      	lsrs	r4, r3
 8005c40:	2600      	movs	r6, #0
 8005c42:	430f      	orrs	r7, r1
 8005c44:	077b      	lsls	r3, r7, #29
 8005c46:	d009      	beq.n	8005c5c <__aeabi_dadd+0x120>
 8005c48:	230f      	movs	r3, #15
 8005c4a:	403b      	ands	r3, r7
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d005      	beq.n	8005c5c <__aeabi_dadd+0x120>
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	42bb      	cmp	r3, r7
 8005c54:	41bf      	sbcs	r7, r7
 8005c56:	427f      	negs	r7, r7
 8005c58:	19e4      	adds	r4, r4, r7
 8005c5a:	001f      	movs	r7, r3
 8005c5c:	0223      	lsls	r3, r4, #8
 8005c5e:	d52c      	bpl.n	8005cba <__aeabi_dadd+0x17e>
 8005c60:	4b96      	ldr	r3, [pc, #600]	; (8005ebc <__aeabi_dadd+0x380>)
 8005c62:	3601      	adds	r6, #1
 8005c64:	429e      	cmp	r6, r3
 8005c66:	d100      	bne.n	8005c6a <__aeabi_dadd+0x12e>
 8005c68:	e09a      	b.n	8005da0 <__aeabi_dadd+0x264>
 8005c6a:	4645      	mov	r5, r8
 8005c6c:	4b94      	ldr	r3, [pc, #592]	; (8005ec0 <__aeabi_dadd+0x384>)
 8005c6e:	08ff      	lsrs	r7, r7, #3
 8005c70:	401c      	ands	r4, r3
 8005c72:	0760      	lsls	r0, r4, #29
 8005c74:	0576      	lsls	r6, r6, #21
 8005c76:	0264      	lsls	r4, r4, #9
 8005c78:	4307      	orrs	r7, r0
 8005c7a:	0b24      	lsrs	r4, r4, #12
 8005c7c:	0d76      	lsrs	r6, r6, #21
 8005c7e:	2100      	movs	r1, #0
 8005c80:	0324      	lsls	r4, r4, #12
 8005c82:	0b23      	lsrs	r3, r4, #12
 8005c84:	0d0c      	lsrs	r4, r1, #20
 8005c86:	4a8f      	ldr	r2, [pc, #572]	; (8005ec4 <__aeabi_dadd+0x388>)
 8005c88:	0524      	lsls	r4, r4, #20
 8005c8a:	431c      	orrs	r4, r3
 8005c8c:	4014      	ands	r4, r2
 8005c8e:	0533      	lsls	r3, r6, #20
 8005c90:	4323      	orrs	r3, r4
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	07ed      	lsls	r5, r5, #31
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	432b      	orrs	r3, r5
 8005c9a:	0038      	movs	r0, r7
 8005c9c:	0019      	movs	r1, r3
 8005c9e:	bc3c      	pop	{r2, r3, r4, r5}
 8005ca0:	4690      	mov	r8, r2
 8005ca2:	4699      	mov	r9, r3
 8005ca4:	46a2      	mov	sl, r4
 8005ca6:	46ab      	mov	fp, r5
 8005ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005caa:	4664      	mov	r4, ip
 8005cac:	4304      	orrs	r4, r0
 8005cae:	d100      	bne.n	8005cb2 <__aeabi_dadd+0x176>
 8005cb0:	e211      	b.n	80060d6 <__aeabi_dadd+0x59a>
 8005cb2:	0004      	movs	r4, r0
 8005cb4:	4667      	mov	r7, ip
 8005cb6:	077b      	lsls	r3, r7, #29
 8005cb8:	d1c6      	bne.n	8005c48 <__aeabi_dadd+0x10c>
 8005cba:	4645      	mov	r5, r8
 8005cbc:	0760      	lsls	r0, r4, #29
 8005cbe:	08ff      	lsrs	r7, r7, #3
 8005cc0:	4307      	orrs	r7, r0
 8005cc2:	08e4      	lsrs	r4, r4, #3
 8005cc4:	4b7d      	ldr	r3, [pc, #500]	; (8005ebc <__aeabi_dadd+0x380>)
 8005cc6:	429e      	cmp	r6, r3
 8005cc8:	d030      	beq.n	8005d2c <__aeabi_dadd+0x1f0>
 8005cca:	0324      	lsls	r4, r4, #12
 8005ccc:	0576      	lsls	r6, r6, #21
 8005cce:	0b24      	lsrs	r4, r4, #12
 8005cd0:	0d76      	lsrs	r6, r6, #21
 8005cd2:	e7d4      	b.n	8005c7e <__aeabi_dadd+0x142>
 8005cd4:	1a33      	subs	r3, r6, r0
 8005cd6:	469a      	mov	sl, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	dd78      	ble.n	8005dce <__aeabi_dadd+0x292>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d031      	beq.n	8005d44 <__aeabi_dadd+0x208>
 8005ce0:	4876      	ldr	r0, [pc, #472]	; (8005ebc <__aeabi_dadd+0x380>)
 8005ce2:	4286      	cmp	r6, r0
 8005ce4:	d0ae      	beq.n	8005c44 <__aeabi_dadd+0x108>
 8005ce6:	2080      	movs	r0, #128	; 0x80
 8005ce8:	0400      	lsls	r0, r0, #16
 8005cea:	4301      	orrs	r1, r0
 8005cec:	4653      	mov	r3, sl
 8005cee:	2b38      	cmp	r3, #56	; 0x38
 8005cf0:	dc00      	bgt.n	8005cf4 <__aeabi_dadd+0x1b8>
 8005cf2:	e0e9      	b.n	8005ec8 <__aeabi_dadd+0x38c>
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	1e51      	subs	r1, r2, #1
 8005cf8:	418a      	sbcs	r2, r1
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	19d2      	adds	r2, r2, r7
 8005cfe:	42ba      	cmp	r2, r7
 8005d00:	41bf      	sbcs	r7, r7
 8005d02:	1909      	adds	r1, r1, r4
 8005d04:	427c      	negs	r4, r7
 8005d06:	0017      	movs	r7, r2
 8005d08:	190c      	adds	r4, r1, r4
 8005d0a:	0223      	lsls	r3, r4, #8
 8005d0c:	d5d3      	bpl.n	8005cb6 <__aeabi_dadd+0x17a>
 8005d0e:	4b6b      	ldr	r3, [pc, #428]	; (8005ebc <__aeabi_dadd+0x380>)
 8005d10:	3601      	adds	r6, #1
 8005d12:	429e      	cmp	r6, r3
 8005d14:	d100      	bne.n	8005d18 <__aeabi_dadd+0x1dc>
 8005d16:	e13a      	b.n	8005f8e <__aeabi_dadd+0x452>
 8005d18:	2001      	movs	r0, #1
 8005d1a:	4b69      	ldr	r3, [pc, #420]	; (8005ec0 <__aeabi_dadd+0x384>)
 8005d1c:	401c      	ands	r4, r3
 8005d1e:	087b      	lsrs	r3, r7, #1
 8005d20:	4007      	ands	r7, r0
 8005d22:	431f      	orrs	r7, r3
 8005d24:	07e0      	lsls	r0, r4, #31
 8005d26:	4307      	orrs	r7, r0
 8005d28:	0864      	lsrs	r4, r4, #1
 8005d2a:	e78b      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005d2c:	0023      	movs	r3, r4
 8005d2e:	433b      	orrs	r3, r7
 8005d30:	d100      	bne.n	8005d34 <__aeabi_dadd+0x1f8>
 8005d32:	e1cb      	b.n	80060cc <__aeabi_dadd+0x590>
 8005d34:	2280      	movs	r2, #128	; 0x80
 8005d36:	0312      	lsls	r2, r2, #12
 8005d38:	4314      	orrs	r4, r2
 8005d3a:	0324      	lsls	r4, r4, #12
 8005d3c:	0b24      	lsrs	r4, r4, #12
 8005d3e:	e79e      	b.n	8005c7e <__aeabi_dadd+0x142>
 8005d40:	002e      	movs	r6, r5
 8005d42:	e77f      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005d44:	0008      	movs	r0, r1
 8005d46:	4310      	orrs	r0, r2
 8005d48:	d100      	bne.n	8005d4c <__aeabi_dadd+0x210>
 8005d4a:	e0b4      	b.n	8005eb6 <__aeabi_dadd+0x37a>
 8005d4c:	1e58      	subs	r0, r3, #1
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	d000      	beq.n	8005d54 <__aeabi_dadd+0x218>
 8005d52:	e0de      	b.n	8005f12 <__aeabi_dadd+0x3d6>
 8005d54:	18ba      	adds	r2, r7, r2
 8005d56:	42ba      	cmp	r2, r7
 8005d58:	419b      	sbcs	r3, r3
 8005d5a:	1864      	adds	r4, r4, r1
 8005d5c:	425b      	negs	r3, r3
 8005d5e:	18e4      	adds	r4, r4, r3
 8005d60:	0017      	movs	r7, r2
 8005d62:	2601      	movs	r6, #1
 8005d64:	0223      	lsls	r3, r4, #8
 8005d66:	d5a6      	bpl.n	8005cb6 <__aeabi_dadd+0x17a>
 8005d68:	2602      	movs	r6, #2
 8005d6a:	e7d5      	b.n	8005d18 <__aeabi_dadd+0x1dc>
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	d16e      	bne.n	8005e4e <__aeabi_dadd+0x312>
 8005d70:	1c70      	adds	r0, r6, #1
 8005d72:	0540      	lsls	r0, r0, #21
 8005d74:	0d40      	lsrs	r0, r0, #21
 8005d76:	2801      	cmp	r0, #1
 8005d78:	dc00      	bgt.n	8005d7c <__aeabi_dadd+0x240>
 8005d7a:	e0f9      	b.n	8005f70 <__aeabi_dadd+0x434>
 8005d7c:	1ab8      	subs	r0, r7, r2
 8005d7e:	4684      	mov	ip, r0
 8005d80:	4287      	cmp	r7, r0
 8005d82:	4180      	sbcs	r0, r0
 8005d84:	1ae5      	subs	r5, r4, r3
 8005d86:	4240      	negs	r0, r0
 8005d88:	1a2d      	subs	r5, r5, r0
 8005d8a:	0228      	lsls	r0, r5, #8
 8005d8c:	d400      	bmi.n	8005d90 <__aeabi_dadd+0x254>
 8005d8e:	e089      	b.n	8005ea4 <__aeabi_dadd+0x368>
 8005d90:	1bd7      	subs	r7, r2, r7
 8005d92:	42ba      	cmp	r2, r7
 8005d94:	4192      	sbcs	r2, r2
 8005d96:	1b1c      	subs	r4, r3, r4
 8005d98:	4252      	negs	r2, r2
 8005d9a:	1aa5      	subs	r5, r4, r2
 8005d9c:	46d8      	mov	r8, fp
 8005d9e:	e729      	b.n	8005bf4 <__aeabi_dadd+0xb8>
 8005da0:	4645      	mov	r5, r8
 8005da2:	2400      	movs	r4, #0
 8005da4:	2700      	movs	r7, #0
 8005da6:	e76a      	b.n	8005c7e <__aeabi_dadd+0x142>
 8005da8:	4c45      	ldr	r4, [pc, #276]	; (8005ec0 <__aeabi_dadd+0x384>)
 8005daa:	1af6      	subs	r6, r6, r3
 8005dac:	402c      	ands	r4, r5
 8005dae:	e749      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005db0:	003d      	movs	r5, r7
 8005db2:	3828      	subs	r0, #40	; 0x28
 8005db4:	4085      	lsls	r5, r0
 8005db6:	2700      	movs	r7, #0
 8005db8:	e72e      	b.n	8005c18 <__aeabi_dadd+0xdc>
 8005dba:	0038      	movs	r0, r7
 8005dbc:	f001 fd0a 	bl	80077d4 <__clzsi2>
 8005dc0:	3020      	adds	r0, #32
 8005dc2:	e71d      	b.n	8005c00 <__aeabi_dadd+0xc4>
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	1e51      	subs	r1, r2, #1
 8005dc8:	418a      	sbcs	r2, r1
 8005dca:	2100      	movs	r1, #0
 8005dcc:	e707      	b.n	8005bde <__aeabi_dadd+0xa2>
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d000      	beq.n	8005dd4 <__aeabi_dadd+0x298>
 8005dd2:	e0f3      	b.n	8005fbc <__aeabi_dadd+0x480>
 8005dd4:	1c70      	adds	r0, r6, #1
 8005dd6:	0543      	lsls	r3, r0, #21
 8005dd8:	0d5b      	lsrs	r3, r3, #21
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	dc00      	bgt.n	8005de0 <__aeabi_dadd+0x2a4>
 8005dde:	e0ad      	b.n	8005f3c <__aeabi_dadd+0x400>
 8005de0:	4b36      	ldr	r3, [pc, #216]	; (8005ebc <__aeabi_dadd+0x380>)
 8005de2:	4298      	cmp	r0, r3
 8005de4:	d100      	bne.n	8005de8 <__aeabi_dadd+0x2ac>
 8005de6:	e0d1      	b.n	8005f8c <__aeabi_dadd+0x450>
 8005de8:	18ba      	adds	r2, r7, r2
 8005dea:	42ba      	cmp	r2, r7
 8005dec:	41bf      	sbcs	r7, r7
 8005dee:	1864      	adds	r4, r4, r1
 8005df0:	427f      	negs	r7, r7
 8005df2:	19e4      	adds	r4, r4, r7
 8005df4:	07e7      	lsls	r7, r4, #31
 8005df6:	0852      	lsrs	r2, r2, #1
 8005df8:	4317      	orrs	r7, r2
 8005dfa:	0864      	lsrs	r4, r4, #1
 8005dfc:	0006      	movs	r6, r0
 8005dfe:	e721      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005e00:	482e      	ldr	r0, [pc, #184]	; (8005ebc <__aeabi_dadd+0x380>)
 8005e02:	4285      	cmp	r5, r0
 8005e04:	d100      	bne.n	8005e08 <__aeabi_dadd+0x2cc>
 8005e06:	e093      	b.n	8005f30 <__aeabi_dadd+0x3f4>
 8005e08:	001d      	movs	r5, r3
 8005e0a:	e6d0      	b.n	8005bae <__aeabi_dadd+0x72>
 8005e0c:	0029      	movs	r1, r5
 8005e0e:	3e1f      	subs	r6, #31
 8005e10:	40f1      	lsrs	r1, r6
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d100      	bne.n	8005e18 <__aeabi_dadd+0x2dc>
 8005e16:	e08d      	b.n	8005f34 <__aeabi_dadd+0x3f8>
 8005e18:	2240      	movs	r2, #64	; 0x40
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	409d      	lsls	r5, r3
 8005e1e:	432f      	orrs	r7, r5
 8005e20:	1e7d      	subs	r5, r7, #1
 8005e22:	41af      	sbcs	r7, r5
 8005e24:	2400      	movs	r4, #0
 8005e26:	430f      	orrs	r7, r1
 8005e28:	2600      	movs	r6, #0
 8005e2a:	e744      	b.n	8005cb6 <__aeabi_dadd+0x17a>
 8005e2c:	002b      	movs	r3, r5
 8005e2e:	0008      	movs	r0, r1
 8005e30:	3b20      	subs	r3, #32
 8005e32:	40d8      	lsrs	r0, r3
 8005e34:	0003      	movs	r3, r0
 8005e36:	2d20      	cmp	r5, #32
 8005e38:	d100      	bne.n	8005e3c <__aeabi_dadd+0x300>
 8005e3a:	e07d      	b.n	8005f38 <__aeabi_dadd+0x3fc>
 8005e3c:	2040      	movs	r0, #64	; 0x40
 8005e3e:	1b45      	subs	r5, r0, r5
 8005e40:	40a9      	lsls	r1, r5
 8005e42:	430a      	orrs	r2, r1
 8005e44:	1e51      	subs	r1, r2, #1
 8005e46:	418a      	sbcs	r2, r1
 8005e48:	2100      	movs	r1, #0
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	e6c7      	b.n	8005bde <__aeabi_dadd+0xa2>
 8005e4e:	2e00      	cmp	r6, #0
 8005e50:	d050      	beq.n	8005ef4 <__aeabi_dadd+0x3b8>
 8005e52:	4e1a      	ldr	r6, [pc, #104]	; (8005ebc <__aeabi_dadd+0x380>)
 8005e54:	42b0      	cmp	r0, r6
 8005e56:	d057      	beq.n	8005f08 <__aeabi_dadd+0x3cc>
 8005e58:	2680      	movs	r6, #128	; 0x80
 8005e5a:	426b      	negs	r3, r5
 8005e5c:	4699      	mov	r9, r3
 8005e5e:	0436      	lsls	r6, r6, #16
 8005e60:	4334      	orrs	r4, r6
 8005e62:	464b      	mov	r3, r9
 8005e64:	2b38      	cmp	r3, #56	; 0x38
 8005e66:	dd00      	ble.n	8005e6a <__aeabi_dadd+0x32e>
 8005e68:	e0d6      	b.n	8006018 <__aeabi_dadd+0x4dc>
 8005e6a:	2b1f      	cmp	r3, #31
 8005e6c:	dd00      	ble.n	8005e70 <__aeabi_dadd+0x334>
 8005e6e:	e135      	b.n	80060dc <__aeabi_dadd+0x5a0>
 8005e70:	2620      	movs	r6, #32
 8005e72:	1af5      	subs	r5, r6, r3
 8005e74:	0026      	movs	r6, r4
 8005e76:	40ae      	lsls	r6, r5
 8005e78:	46b2      	mov	sl, r6
 8005e7a:	003e      	movs	r6, r7
 8005e7c:	40de      	lsrs	r6, r3
 8005e7e:	46ac      	mov	ip, r5
 8005e80:	0035      	movs	r5, r6
 8005e82:	4656      	mov	r6, sl
 8005e84:	432e      	orrs	r6, r5
 8005e86:	4665      	mov	r5, ip
 8005e88:	40af      	lsls	r7, r5
 8005e8a:	1e7d      	subs	r5, r7, #1
 8005e8c:	41af      	sbcs	r7, r5
 8005e8e:	40dc      	lsrs	r4, r3
 8005e90:	4337      	orrs	r7, r6
 8005e92:	1bd7      	subs	r7, r2, r7
 8005e94:	42ba      	cmp	r2, r7
 8005e96:	4192      	sbcs	r2, r2
 8005e98:	1b0c      	subs	r4, r1, r4
 8005e9a:	4252      	negs	r2, r2
 8005e9c:	1aa4      	subs	r4, r4, r2
 8005e9e:	0006      	movs	r6, r0
 8005ea0:	46d8      	mov	r8, fp
 8005ea2:	e6a3      	b.n	8005bec <__aeabi_dadd+0xb0>
 8005ea4:	4664      	mov	r4, ip
 8005ea6:	4667      	mov	r7, ip
 8005ea8:	432c      	orrs	r4, r5
 8005eaa:	d000      	beq.n	8005eae <__aeabi_dadd+0x372>
 8005eac:	e6a2      	b.n	8005bf4 <__aeabi_dadd+0xb8>
 8005eae:	2500      	movs	r5, #0
 8005eb0:	2600      	movs	r6, #0
 8005eb2:	2700      	movs	r7, #0
 8005eb4:	e706      	b.n	8005cc4 <__aeabi_dadd+0x188>
 8005eb6:	001e      	movs	r6, r3
 8005eb8:	e6c4      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	000007ff 	.word	0x000007ff
 8005ec0:	ff7fffff 	.word	0xff7fffff
 8005ec4:	800fffff 	.word	0x800fffff
 8005ec8:	2b1f      	cmp	r3, #31
 8005eca:	dc63      	bgt.n	8005f94 <__aeabi_dadd+0x458>
 8005ecc:	2020      	movs	r0, #32
 8005ece:	1ac3      	subs	r3, r0, r3
 8005ed0:	0008      	movs	r0, r1
 8005ed2:	4098      	lsls	r0, r3
 8005ed4:	469c      	mov	ip, r3
 8005ed6:	4683      	mov	fp, r0
 8005ed8:	4653      	mov	r3, sl
 8005eda:	0010      	movs	r0, r2
 8005edc:	40d8      	lsrs	r0, r3
 8005ede:	0003      	movs	r3, r0
 8005ee0:	4658      	mov	r0, fp
 8005ee2:	4318      	orrs	r0, r3
 8005ee4:	4663      	mov	r3, ip
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	1e53      	subs	r3, r2, #1
 8005eea:	419a      	sbcs	r2, r3
 8005eec:	4653      	mov	r3, sl
 8005eee:	4302      	orrs	r2, r0
 8005ef0:	40d9      	lsrs	r1, r3
 8005ef2:	e703      	b.n	8005cfc <__aeabi_dadd+0x1c0>
 8005ef4:	0026      	movs	r6, r4
 8005ef6:	433e      	orrs	r6, r7
 8005ef8:	d006      	beq.n	8005f08 <__aeabi_dadd+0x3cc>
 8005efa:	43eb      	mvns	r3, r5
 8005efc:	4699      	mov	r9, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0c7      	beq.n	8005e92 <__aeabi_dadd+0x356>
 8005f02:	4e94      	ldr	r6, [pc, #592]	; (8006154 <__aeabi_dadd+0x618>)
 8005f04:	42b0      	cmp	r0, r6
 8005f06:	d1ac      	bne.n	8005e62 <__aeabi_dadd+0x326>
 8005f08:	000c      	movs	r4, r1
 8005f0a:	0017      	movs	r7, r2
 8005f0c:	0006      	movs	r6, r0
 8005f0e:	46d8      	mov	r8, fp
 8005f10:	e698      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005f12:	4b90      	ldr	r3, [pc, #576]	; (8006154 <__aeabi_dadd+0x618>)
 8005f14:	459a      	cmp	sl, r3
 8005f16:	d00b      	beq.n	8005f30 <__aeabi_dadd+0x3f4>
 8005f18:	4682      	mov	sl, r0
 8005f1a:	e6e7      	b.n	8005cec <__aeabi_dadd+0x1b0>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d000      	beq.n	8005f22 <__aeabi_dadd+0x3e6>
 8005f20:	e09e      	b.n	8006060 <__aeabi_dadd+0x524>
 8005f22:	0018      	movs	r0, r3
 8005f24:	4310      	orrs	r0, r2
 8005f26:	d100      	bne.n	8005f2a <__aeabi_dadd+0x3ee>
 8005f28:	e0e9      	b.n	80060fe <__aeabi_dadd+0x5c2>
 8005f2a:	001c      	movs	r4, r3
 8005f2c:	0017      	movs	r7, r2
 8005f2e:	46d8      	mov	r8, fp
 8005f30:	4e88      	ldr	r6, [pc, #544]	; (8006154 <__aeabi_dadd+0x618>)
 8005f32:	e687      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005f34:	2500      	movs	r5, #0
 8005f36:	e772      	b.n	8005e1e <__aeabi_dadd+0x2e2>
 8005f38:	2100      	movs	r1, #0
 8005f3a:	e782      	b.n	8005e42 <__aeabi_dadd+0x306>
 8005f3c:	0023      	movs	r3, r4
 8005f3e:	433b      	orrs	r3, r7
 8005f40:	2e00      	cmp	r6, #0
 8005f42:	d000      	beq.n	8005f46 <__aeabi_dadd+0x40a>
 8005f44:	e0ab      	b.n	800609e <__aeabi_dadd+0x562>
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d100      	bne.n	8005f4c <__aeabi_dadd+0x410>
 8005f4a:	e0e7      	b.n	800611c <__aeabi_dadd+0x5e0>
 8005f4c:	000b      	movs	r3, r1
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	d100      	bne.n	8005f54 <__aeabi_dadd+0x418>
 8005f52:	e677      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005f54:	18ba      	adds	r2, r7, r2
 8005f56:	42ba      	cmp	r2, r7
 8005f58:	41bf      	sbcs	r7, r7
 8005f5a:	1864      	adds	r4, r4, r1
 8005f5c:	427f      	negs	r7, r7
 8005f5e:	19e4      	adds	r4, r4, r7
 8005f60:	0223      	lsls	r3, r4, #8
 8005f62:	d400      	bmi.n	8005f66 <__aeabi_dadd+0x42a>
 8005f64:	e0f2      	b.n	800614c <__aeabi_dadd+0x610>
 8005f66:	4b7c      	ldr	r3, [pc, #496]	; (8006158 <__aeabi_dadd+0x61c>)
 8005f68:	0017      	movs	r7, r2
 8005f6a:	401c      	ands	r4, r3
 8005f6c:	0006      	movs	r6, r0
 8005f6e:	e669      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005f70:	0020      	movs	r0, r4
 8005f72:	4338      	orrs	r0, r7
 8005f74:	2e00      	cmp	r6, #0
 8005f76:	d1d1      	bne.n	8005f1c <__aeabi_dadd+0x3e0>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d15b      	bne.n	8006034 <__aeabi_dadd+0x4f8>
 8005f7c:	001c      	movs	r4, r3
 8005f7e:	4314      	orrs	r4, r2
 8005f80:	d100      	bne.n	8005f84 <__aeabi_dadd+0x448>
 8005f82:	e0a8      	b.n	80060d6 <__aeabi_dadd+0x59a>
 8005f84:	001c      	movs	r4, r3
 8005f86:	0017      	movs	r7, r2
 8005f88:	46d8      	mov	r8, fp
 8005f8a:	e65b      	b.n	8005c44 <__aeabi_dadd+0x108>
 8005f8c:	0006      	movs	r6, r0
 8005f8e:	2400      	movs	r4, #0
 8005f90:	2700      	movs	r7, #0
 8005f92:	e697      	b.n	8005cc4 <__aeabi_dadd+0x188>
 8005f94:	4650      	mov	r0, sl
 8005f96:	000b      	movs	r3, r1
 8005f98:	3820      	subs	r0, #32
 8005f9a:	40c3      	lsrs	r3, r0
 8005f9c:	4699      	mov	r9, r3
 8005f9e:	4653      	mov	r3, sl
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d100      	bne.n	8005fa6 <__aeabi_dadd+0x46a>
 8005fa4:	e095      	b.n	80060d2 <__aeabi_dadd+0x596>
 8005fa6:	2340      	movs	r3, #64	; 0x40
 8005fa8:	4650      	mov	r0, sl
 8005faa:	1a1b      	subs	r3, r3, r0
 8005fac:	4099      	lsls	r1, r3
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	1e51      	subs	r1, r2, #1
 8005fb2:	418a      	sbcs	r2, r1
 8005fb4:	464b      	mov	r3, r9
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	e69f      	b.n	8005cfc <__aeabi_dadd+0x1c0>
 8005fbc:	2e00      	cmp	r6, #0
 8005fbe:	d130      	bne.n	8006022 <__aeabi_dadd+0x4e6>
 8005fc0:	0026      	movs	r6, r4
 8005fc2:	433e      	orrs	r6, r7
 8005fc4:	d067      	beq.n	8006096 <__aeabi_dadd+0x55a>
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	469a      	mov	sl, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01c      	beq.n	8006008 <__aeabi_dadd+0x4cc>
 8005fce:	4e61      	ldr	r6, [pc, #388]	; (8006154 <__aeabi_dadd+0x618>)
 8005fd0:	42b0      	cmp	r0, r6
 8005fd2:	d060      	beq.n	8006096 <__aeabi_dadd+0x55a>
 8005fd4:	4653      	mov	r3, sl
 8005fd6:	2b38      	cmp	r3, #56	; 0x38
 8005fd8:	dd00      	ble.n	8005fdc <__aeabi_dadd+0x4a0>
 8005fda:	e096      	b.n	800610a <__aeabi_dadd+0x5ce>
 8005fdc:	2b1f      	cmp	r3, #31
 8005fde:	dd00      	ble.n	8005fe2 <__aeabi_dadd+0x4a6>
 8005fe0:	e09f      	b.n	8006122 <__aeabi_dadd+0x5e6>
 8005fe2:	2620      	movs	r6, #32
 8005fe4:	1af3      	subs	r3, r6, r3
 8005fe6:	0026      	movs	r6, r4
 8005fe8:	409e      	lsls	r6, r3
 8005fea:	469c      	mov	ip, r3
 8005fec:	46b3      	mov	fp, r6
 8005fee:	4653      	mov	r3, sl
 8005ff0:	003e      	movs	r6, r7
 8005ff2:	40de      	lsrs	r6, r3
 8005ff4:	0033      	movs	r3, r6
 8005ff6:	465e      	mov	r6, fp
 8005ff8:	431e      	orrs	r6, r3
 8005ffa:	4663      	mov	r3, ip
 8005ffc:	409f      	lsls	r7, r3
 8005ffe:	1e7b      	subs	r3, r7, #1
 8006000:	419f      	sbcs	r7, r3
 8006002:	4653      	mov	r3, sl
 8006004:	40dc      	lsrs	r4, r3
 8006006:	4337      	orrs	r7, r6
 8006008:	18bf      	adds	r7, r7, r2
 800600a:	4297      	cmp	r7, r2
 800600c:	4192      	sbcs	r2, r2
 800600e:	1864      	adds	r4, r4, r1
 8006010:	4252      	negs	r2, r2
 8006012:	18a4      	adds	r4, r4, r2
 8006014:	0006      	movs	r6, r0
 8006016:	e678      	b.n	8005d0a <__aeabi_dadd+0x1ce>
 8006018:	4327      	orrs	r7, r4
 800601a:	1e7c      	subs	r4, r7, #1
 800601c:	41a7      	sbcs	r7, r4
 800601e:	2400      	movs	r4, #0
 8006020:	e737      	b.n	8005e92 <__aeabi_dadd+0x356>
 8006022:	4e4c      	ldr	r6, [pc, #304]	; (8006154 <__aeabi_dadd+0x618>)
 8006024:	42b0      	cmp	r0, r6
 8006026:	d036      	beq.n	8006096 <__aeabi_dadd+0x55a>
 8006028:	2680      	movs	r6, #128	; 0x80
 800602a:	425b      	negs	r3, r3
 800602c:	0436      	lsls	r6, r6, #16
 800602e:	469a      	mov	sl, r3
 8006030:	4334      	orrs	r4, r6
 8006032:	e7cf      	b.n	8005fd4 <__aeabi_dadd+0x498>
 8006034:	0018      	movs	r0, r3
 8006036:	4310      	orrs	r0, r2
 8006038:	d100      	bne.n	800603c <__aeabi_dadd+0x500>
 800603a:	e603      	b.n	8005c44 <__aeabi_dadd+0x108>
 800603c:	1ab8      	subs	r0, r7, r2
 800603e:	4684      	mov	ip, r0
 8006040:	4567      	cmp	r7, ip
 8006042:	41ad      	sbcs	r5, r5
 8006044:	1ae0      	subs	r0, r4, r3
 8006046:	426d      	negs	r5, r5
 8006048:	1b40      	subs	r0, r0, r5
 800604a:	0205      	lsls	r5, r0, #8
 800604c:	d400      	bmi.n	8006050 <__aeabi_dadd+0x514>
 800604e:	e62c      	b.n	8005caa <__aeabi_dadd+0x16e>
 8006050:	1bd7      	subs	r7, r2, r7
 8006052:	42ba      	cmp	r2, r7
 8006054:	4192      	sbcs	r2, r2
 8006056:	1b1c      	subs	r4, r3, r4
 8006058:	4252      	negs	r2, r2
 800605a:	1aa4      	subs	r4, r4, r2
 800605c:	46d8      	mov	r8, fp
 800605e:	e5f1      	b.n	8005c44 <__aeabi_dadd+0x108>
 8006060:	0018      	movs	r0, r3
 8006062:	4310      	orrs	r0, r2
 8006064:	d100      	bne.n	8006068 <__aeabi_dadd+0x52c>
 8006066:	e763      	b.n	8005f30 <__aeabi_dadd+0x3f4>
 8006068:	08f8      	lsrs	r0, r7, #3
 800606a:	0767      	lsls	r7, r4, #29
 800606c:	4307      	orrs	r7, r0
 800606e:	2080      	movs	r0, #128	; 0x80
 8006070:	08e4      	lsrs	r4, r4, #3
 8006072:	0300      	lsls	r0, r0, #12
 8006074:	4204      	tst	r4, r0
 8006076:	d008      	beq.n	800608a <__aeabi_dadd+0x54e>
 8006078:	08dd      	lsrs	r5, r3, #3
 800607a:	4205      	tst	r5, r0
 800607c:	d105      	bne.n	800608a <__aeabi_dadd+0x54e>
 800607e:	08d2      	lsrs	r2, r2, #3
 8006080:	0759      	lsls	r1, r3, #29
 8006082:	4311      	orrs	r1, r2
 8006084:	000f      	movs	r7, r1
 8006086:	002c      	movs	r4, r5
 8006088:	46d8      	mov	r8, fp
 800608a:	0f7b      	lsrs	r3, r7, #29
 800608c:	00e4      	lsls	r4, r4, #3
 800608e:	431c      	orrs	r4, r3
 8006090:	00ff      	lsls	r7, r7, #3
 8006092:	4e30      	ldr	r6, [pc, #192]	; (8006154 <__aeabi_dadd+0x618>)
 8006094:	e5d6      	b.n	8005c44 <__aeabi_dadd+0x108>
 8006096:	000c      	movs	r4, r1
 8006098:	0017      	movs	r7, r2
 800609a:	0006      	movs	r6, r0
 800609c:	e5d2      	b.n	8005c44 <__aeabi_dadd+0x108>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d038      	beq.n	8006114 <__aeabi_dadd+0x5d8>
 80060a2:	000b      	movs	r3, r1
 80060a4:	4313      	orrs	r3, r2
 80060a6:	d100      	bne.n	80060aa <__aeabi_dadd+0x56e>
 80060a8:	e742      	b.n	8005f30 <__aeabi_dadd+0x3f4>
 80060aa:	08f8      	lsrs	r0, r7, #3
 80060ac:	0767      	lsls	r7, r4, #29
 80060ae:	4307      	orrs	r7, r0
 80060b0:	2080      	movs	r0, #128	; 0x80
 80060b2:	08e4      	lsrs	r4, r4, #3
 80060b4:	0300      	lsls	r0, r0, #12
 80060b6:	4204      	tst	r4, r0
 80060b8:	d0e7      	beq.n	800608a <__aeabi_dadd+0x54e>
 80060ba:	08cb      	lsrs	r3, r1, #3
 80060bc:	4203      	tst	r3, r0
 80060be:	d1e4      	bne.n	800608a <__aeabi_dadd+0x54e>
 80060c0:	08d2      	lsrs	r2, r2, #3
 80060c2:	0749      	lsls	r1, r1, #29
 80060c4:	4311      	orrs	r1, r2
 80060c6:	000f      	movs	r7, r1
 80060c8:	001c      	movs	r4, r3
 80060ca:	e7de      	b.n	800608a <__aeabi_dadd+0x54e>
 80060cc:	2700      	movs	r7, #0
 80060ce:	2400      	movs	r4, #0
 80060d0:	e5d5      	b.n	8005c7e <__aeabi_dadd+0x142>
 80060d2:	2100      	movs	r1, #0
 80060d4:	e76b      	b.n	8005fae <__aeabi_dadd+0x472>
 80060d6:	2500      	movs	r5, #0
 80060d8:	2700      	movs	r7, #0
 80060da:	e5f3      	b.n	8005cc4 <__aeabi_dadd+0x188>
 80060dc:	464e      	mov	r6, r9
 80060de:	0025      	movs	r5, r4
 80060e0:	3e20      	subs	r6, #32
 80060e2:	40f5      	lsrs	r5, r6
 80060e4:	464b      	mov	r3, r9
 80060e6:	002e      	movs	r6, r5
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d02d      	beq.n	8006148 <__aeabi_dadd+0x60c>
 80060ec:	2540      	movs	r5, #64	; 0x40
 80060ee:	1aed      	subs	r5, r5, r3
 80060f0:	40ac      	lsls	r4, r5
 80060f2:	4327      	orrs	r7, r4
 80060f4:	1e7c      	subs	r4, r7, #1
 80060f6:	41a7      	sbcs	r7, r4
 80060f8:	2400      	movs	r4, #0
 80060fa:	4337      	orrs	r7, r6
 80060fc:	e6c9      	b.n	8005e92 <__aeabi_dadd+0x356>
 80060fe:	2480      	movs	r4, #128	; 0x80
 8006100:	2500      	movs	r5, #0
 8006102:	0324      	lsls	r4, r4, #12
 8006104:	4e13      	ldr	r6, [pc, #76]	; (8006154 <__aeabi_dadd+0x618>)
 8006106:	2700      	movs	r7, #0
 8006108:	e5dc      	b.n	8005cc4 <__aeabi_dadd+0x188>
 800610a:	4327      	orrs	r7, r4
 800610c:	1e7c      	subs	r4, r7, #1
 800610e:	41a7      	sbcs	r7, r4
 8006110:	2400      	movs	r4, #0
 8006112:	e779      	b.n	8006008 <__aeabi_dadd+0x4cc>
 8006114:	000c      	movs	r4, r1
 8006116:	0017      	movs	r7, r2
 8006118:	4e0e      	ldr	r6, [pc, #56]	; (8006154 <__aeabi_dadd+0x618>)
 800611a:	e593      	b.n	8005c44 <__aeabi_dadd+0x108>
 800611c:	000c      	movs	r4, r1
 800611e:	0017      	movs	r7, r2
 8006120:	e590      	b.n	8005c44 <__aeabi_dadd+0x108>
 8006122:	4656      	mov	r6, sl
 8006124:	0023      	movs	r3, r4
 8006126:	3e20      	subs	r6, #32
 8006128:	40f3      	lsrs	r3, r6
 800612a:	4699      	mov	r9, r3
 800612c:	4653      	mov	r3, sl
 800612e:	2b20      	cmp	r3, #32
 8006130:	d00e      	beq.n	8006150 <__aeabi_dadd+0x614>
 8006132:	2340      	movs	r3, #64	; 0x40
 8006134:	4656      	mov	r6, sl
 8006136:	1b9b      	subs	r3, r3, r6
 8006138:	409c      	lsls	r4, r3
 800613a:	4327      	orrs	r7, r4
 800613c:	1e7c      	subs	r4, r7, #1
 800613e:	41a7      	sbcs	r7, r4
 8006140:	464b      	mov	r3, r9
 8006142:	2400      	movs	r4, #0
 8006144:	431f      	orrs	r7, r3
 8006146:	e75f      	b.n	8006008 <__aeabi_dadd+0x4cc>
 8006148:	2400      	movs	r4, #0
 800614a:	e7d2      	b.n	80060f2 <__aeabi_dadd+0x5b6>
 800614c:	0017      	movs	r7, r2
 800614e:	e5b2      	b.n	8005cb6 <__aeabi_dadd+0x17a>
 8006150:	2400      	movs	r4, #0
 8006152:	e7f2      	b.n	800613a <__aeabi_dadd+0x5fe>
 8006154:	000007ff 	.word	0x000007ff
 8006158:	ff7fffff 	.word	0xff7fffff

0800615c <__aeabi_ddiv>:
 800615c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800615e:	4657      	mov	r7, sl
 8006160:	4645      	mov	r5, r8
 8006162:	46de      	mov	lr, fp
 8006164:	464e      	mov	r6, r9
 8006166:	b5e0      	push	{r5, r6, r7, lr}
 8006168:	004c      	lsls	r4, r1, #1
 800616a:	030e      	lsls	r6, r1, #12
 800616c:	b087      	sub	sp, #28
 800616e:	4683      	mov	fp, r0
 8006170:	4692      	mov	sl, r2
 8006172:	001d      	movs	r5, r3
 8006174:	4680      	mov	r8, r0
 8006176:	0b36      	lsrs	r6, r6, #12
 8006178:	0d64      	lsrs	r4, r4, #21
 800617a:	0fcf      	lsrs	r7, r1, #31
 800617c:	2c00      	cmp	r4, #0
 800617e:	d04f      	beq.n	8006220 <__aeabi_ddiv+0xc4>
 8006180:	4b6f      	ldr	r3, [pc, #444]	; (8006340 <__aeabi_ddiv+0x1e4>)
 8006182:	429c      	cmp	r4, r3
 8006184:	d035      	beq.n	80061f2 <__aeabi_ddiv+0x96>
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	0f42      	lsrs	r2, r0, #29
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	00f6      	lsls	r6, r6, #3
 800618e:	4313      	orrs	r3, r2
 8006190:	4333      	orrs	r3, r6
 8006192:	4699      	mov	r9, r3
 8006194:	00c3      	lsls	r3, r0, #3
 8006196:	4698      	mov	r8, r3
 8006198:	4b6a      	ldr	r3, [pc, #424]	; (8006344 <__aeabi_ddiv+0x1e8>)
 800619a:	2600      	movs	r6, #0
 800619c:	469c      	mov	ip, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	4464      	add	r4, ip
 80061a2:	9303      	str	r3, [sp, #12]
 80061a4:	032b      	lsls	r3, r5, #12
 80061a6:	0b1b      	lsrs	r3, r3, #12
 80061a8:	469b      	mov	fp, r3
 80061aa:	006b      	lsls	r3, r5, #1
 80061ac:	0fed      	lsrs	r5, r5, #31
 80061ae:	4650      	mov	r0, sl
 80061b0:	0d5b      	lsrs	r3, r3, #21
 80061b2:	9501      	str	r5, [sp, #4]
 80061b4:	d05e      	beq.n	8006274 <__aeabi_ddiv+0x118>
 80061b6:	4a62      	ldr	r2, [pc, #392]	; (8006340 <__aeabi_ddiv+0x1e4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d053      	beq.n	8006264 <__aeabi_ddiv+0x108>
 80061bc:	465a      	mov	r2, fp
 80061be:	00d1      	lsls	r1, r2, #3
 80061c0:	2280      	movs	r2, #128	; 0x80
 80061c2:	0f40      	lsrs	r0, r0, #29
 80061c4:	0412      	lsls	r2, r2, #16
 80061c6:	4302      	orrs	r2, r0
 80061c8:	430a      	orrs	r2, r1
 80061ca:	4693      	mov	fp, r2
 80061cc:	4652      	mov	r2, sl
 80061ce:	00d1      	lsls	r1, r2, #3
 80061d0:	4a5c      	ldr	r2, [pc, #368]	; (8006344 <__aeabi_ddiv+0x1e8>)
 80061d2:	4694      	mov	ip, r2
 80061d4:	2200      	movs	r2, #0
 80061d6:	4463      	add	r3, ip
 80061d8:	0038      	movs	r0, r7
 80061da:	4068      	eors	r0, r5
 80061dc:	4684      	mov	ip, r0
 80061de:	9002      	str	r0, [sp, #8]
 80061e0:	1ae4      	subs	r4, r4, r3
 80061e2:	4316      	orrs	r6, r2
 80061e4:	2e0f      	cmp	r6, #15
 80061e6:	d900      	bls.n	80061ea <__aeabi_ddiv+0x8e>
 80061e8:	e0b4      	b.n	8006354 <__aeabi_ddiv+0x1f8>
 80061ea:	4b57      	ldr	r3, [pc, #348]	; (8006348 <__aeabi_ddiv+0x1ec>)
 80061ec:	00b6      	lsls	r6, r6, #2
 80061ee:	599b      	ldr	r3, [r3, r6]
 80061f0:	469f      	mov	pc, r3
 80061f2:	0003      	movs	r3, r0
 80061f4:	4333      	orrs	r3, r6
 80061f6:	4699      	mov	r9, r3
 80061f8:	d16c      	bne.n	80062d4 <__aeabi_ddiv+0x178>
 80061fa:	2300      	movs	r3, #0
 80061fc:	4698      	mov	r8, r3
 80061fe:	3302      	adds	r3, #2
 8006200:	2608      	movs	r6, #8
 8006202:	9303      	str	r3, [sp, #12]
 8006204:	e7ce      	b.n	80061a4 <__aeabi_ddiv+0x48>
 8006206:	46cb      	mov	fp, r9
 8006208:	4641      	mov	r1, r8
 800620a:	9a03      	ldr	r2, [sp, #12]
 800620c:	9701      	str	r7, [sp, #4]
 800620e:	2a02      	cmp	r2, #2
 8006210:	d165      	bne.n	80062de <__aeabi_ddiv+0x182>
 8006212:	9b01      	ldr	r3, [sp, #4]
 8006214:	4c4a      	ldr	r4, [pc, #296]	; (8006340 <__aeabi_ddiv+0x1e4>)
 8006216:	469c      	mov	ip, r3
 8006218:	2300      	movs	r3, #0
 800621a:	2200      	movs	r2, #0
 800621c:	4698      	mov	r8, r3
 800621e:	e06b      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 8006220:	0003      	movs	r3, r0
 8006222:	4333      	orrs	r3, r6
 8006224:	4699      	mov	r9, r3
 8006226:	d04e      	beq.n	80062c6 <__aeabi_ddiv+0x16a>
 8006228:	2e00      	cmp	r6, #0
 800622a:	d100      	bne.n	800622e <__aeabi_ddiv+0xd2>
 800622c:	e1bc      	b.n	80065a8 <__aeabi_ddiv+0x44c>
 800622e:	0030      	movs	r0, r6
 8006230:	f001 fad0 	bl	80077d4 <__clzsi2>
 8006234:	0003      	movs	r3, r0
 8006236:	3b0b      	subs	r3, #11
 8006238:	2b1c      	cmp	r3, #28
 800623a:	dd00      	ble.n	800623e <__aeabi_ddiv+0xe2>
 800623c:	e1ac      	b.n	8006598 <__aeabi_ddiv+0x43c>
 800623e:	221d      	movs	r2, #29
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	465a      	mov	r2, fp
 8006244:	0001      	movs	r1, r0
 8006246:	40da      	lsrs	r2, r3
 8006248:	3908      	subs	r1, #8
 800624a:	408e      	lsls	r6, r1
 800624c:	0013      	movs	r3, r2
 800624e:	4333      	orrs	r3, r6
 8006250:	4699      	mov	r9, r3
 8006252:	465b      	mov	r3, fp
 8006254:	408b      	lsls	r3, r1
 8006256:	4698      	mov	r8, r3
 8006258:	2300      	movs	r3, #0
 800625a:	4c3c      	ldr	r4, [pc, #240]	; (800634c <__aeabi_ddiv+0x1f0>)
 800625c:	2600      	movs	r6, #0
 800625e:	1a24      	subs	r4, r4, r0
 8006260:	9303      	str	r3, [sp, #12]
 8006262:	e79f      	b.n	80061a4 <__aeabi_ddiv+0x48>
 8006264:	4651      	mov	r1, sl
 8006266:	465a      	mov	r2, fp
 8006268:	4311      	orrs	r1, r2
 800626a:	d129      	bne.n	80062c0 <__aeabi_ddiv+0x164>
 800626c:	2200      	movs	r2, #0
 800626e:	4693      	mov	fp, r2
 8006270:	3202      	adds	r2, #2
 8006272:	e7b1      	b.n	80061d8 <__aeabi_ddiv+0x7c>
 8006274:	4659      	mov	r1, fp
 8006276:	4301      	orrs	r1, r0
 8006278:	d01e      	beq.n	80062b8 <__aeabi_ddiv+0x15c>
 800627a:	465b      	mov	r3, fp
 800627c:	2b00      	cmp	r3, #0
 800627e:	d100      	bne.n	8006282 <__aeabi_ddiv+0x126>
 8006280:	e19e      	b.n	80065c0 <__aeabi_ddiv+0x464>
 8006282:	4658      	mov	r0, fp
 8006284:	f001 faa6 	bl	80077d4 <__clzsi2>
 8006288:	0003      	movs	r3, r0
 800628a:	3b0b      	subs	r3, #11
 800628c:	2b1c      	cmp	r3, #28
 800628e:	dd00      	ble.n	8006292 <__aeabi_ddiv+0x136>
 8006290:	e18f      	b.n	80065b2 <__aeabi_ddiv+0x456>
 8006292:	0002      	movs	r2, r0
 8006294:	4659      	mov	r1, fp
 8006296:	3a08      	subs	r2, #8
 8006298:	4091      	lsls	r1, r2
 800629a:	468b      	mov	fp, r1
 800629c:	211d      	movs	r1, #29
 800629e:	1acb      	subs	r3, r1, r3
 80062a0:	4651      	mov	r1, sl
 80062a2:	40d9      	lsrs	r1, r3
 80062a4:	000b      	movs	r3, r1
 80062a6:	4659      	mov	r1, fp
 80062a8:	430b      	orrs	r3, r1
 80062aa:	4651      	mov	r1, sl
 80062ac:	469b      	mov	fp, r3
 80062ae:	4091      	lsls	r1, r2
 80062b0:	4b26      	ldr	r3, [pc, #152]	; (800634c <__aeabi_ddiv+0x1f0>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	1a1b      	subs	r3, r3, r0
 80062b6:	e78f      	b.n	80061d8 <__aeabi_ddiv+0x7c>
 80062b8:	2300      	movs	r3, #0
 80062ba:	2201      	movs	r2, #1
 80062bc:	469b      	mov	fp, r3
 80062be:	e78b      	b.n	80061d8 <__aeabi_ddiv+0x7c>
 80062c0:	4651      	mov	r1, sl
 80062c2:	2203      	movs	r2, #3
 80062c4:	e788      	b.n	80061d8 <__aeabi_ddiv+0x7c>
 80062c6:	2300      	movs	r3, #0
 80062c8:	4698      	mov	r8, r3
 80062ca:	3301      	adds	r3, #1
 80062cc:	2604      	movs	r6, #4
 80062ce:	2400      	movs	r4, #0
 80062d0:	9303      	str	r3, [sp, #12]
 80062d2:	e767      	b.n	80061a4 <__aeabi_ddiv+0x48>
 80062d4:	2303      	movs	r3, #3
 80062d6:	46b1      	mov	r9, r6
 80062d8:	9303      	str	r3, [sp, #12]
 80062da:	260c      	movs	r6, #12
 80062dc:	e762      	b.n	80061a4 <__aeabi_ddiv+0x48>
 80062de:	2a03      	cmp	r2, #3
 80062e0:	d100      	bne.n	80062e4 <__aeabi_ddiv+0x188>
 80062e2:	e25c      	b.n	800679e <__aeabi_ddiv+0x642>
 80062e4:	9b01      	ldr	r3, [sp, #4]
 80062e6:	2a01      	cmp	r2, #1
 80062e8:	d000      	beq.n	80062ec <__aeabi_ddiv+0x190>
 80062ea:	e1e4      	b.n	80066b6 <__aeabi_ddiv+0x55a>
 80062ec:	4013      	ands	r3, r2
 80062ee:	469c      	mov	ip, r3
 80062f0:	2300      	movs	r3, #0
 80062f2:	2400      	movs	r4, #0
 80062f4:	2200      	movs	r2, #0
 80062f6:	4698      	mov	r8, r3
 80062f8:	2100      	movs	r1, #0
 80062fa:	0312      	lsls	r2, r2, #12
 80062fc:	0b13      	lsrs	r3, r2, #12
 80062fe:	0d0a      	lsrs	r2, r1, #20
 8006300:	0512      	lsls	r2, r2, #20
 8006302:	431a      	orrs	r2, r3
 8006304:	0523      	lsls	r3, r4, #20
 8006306:	4c12      	ldr	r4, [pc, #72]	; (8006350 <__aeabi_ddiv+0x1f4>)
 8006308:	4640      	mov	r0, r8
 800630a:	4022      	ands	r2, r4
 800630c:	4313      	orrs	r3, r2
 800630e:	4662      	mov	r2, ip
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	07d2      	lsls	r2, r2, #31
 8006314:	085b      	lsrs	r3, r3, #1
 8006316:	4313      	orrs	r3, r2
 8006318:	0019      	movs	r1, r3
 800631a:	b007      	add	sp, #28
 800631c:	bc3c      	pop	{r2, r3, r4, r5}
 800631e:	4690      	mov	r8, r2
 8006320:	4699      	mov	r9, r3
 8006322:	46a2      	mov	sl, r4
 8006324:	46ab      	mov	fp, r5
 8006326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006328:	2300      	movs	r3, #0
 800632a:	2280      	movs	r2, #128	; 0x80
 800632c:	469c      	mov	ip, r3
 800632e:	0312      	lsls	r2, r2, #12
 8006330:	4698      	mov	r8, r3
 8006332:	4c03      	ldr	r4, [pc, #12]	; (8006340 <__aeabi_ddiv+0x1e4>)
 8006334:	e7e0      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 8006336:	2300      	movs	r3, #0
 8006338:	4c01      	ldr	r4, [pc, #4]	; (8006340 <__aeabi_ddiv+0x1e4>)
 800633a:	2200      	movs	r2, #0
 800633c:	4698      	mov	r8, r3
 800633e:	e7db      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 8006340:	000007ff 	.word	0x000007ff
 8006344:	fffffc01 	.word	0xfffffc01
 8006348:	080090a8 	.word	0x080090a8
 800634c:	fffffc0d 	.word	0xfffffc0d
 8006350:	800fffff 	.word	0x800fffff
 8006354:	45d9      	cmp	r9, fp
 8006356:	d900      	bls.n	800635a <__aeabi_ddiv+0x1fe>
 8006358:	e139      	b.n	80065ce <__aeabi_ddiv+0x472>
 800635a:	d100      	bne.n	800635e <__aeabi_ddiv+0x202>
 800635c:	e134      	b.n	80065c8 <__aeabi_ddiv+0x46c>
 800635e:	2300      	movs	r3, #0
 8006360:	4646      	mov	r6, r8
 8006362:	464d      	mov	r5, r9
 8006364:	469a      	mov	sl, r3
 8006366:	3c01      	subs	r4, #1
 8006368:	465b      	mov	r3, fp
 800636a:	0e0a      	lsrs	r2, r1, #24
 800636c:	021b      	lsls	r3, r3, #8
 800636e:	431a      	orrs	r2, r3
 8006370:	020b      	lsls	r3, r1, #8
 8006372:	0c17      	lsrs	r7, r2, #16
 8006374:	9303      	str	r3, [sp, #12]
 8006376:	0413      	lsls	r3, r2, #16
 8006378:	0c1b      	lsrs	r3, r3, #16
 800637a:	0039      	movs	r1, r7
 800637c:	0028      	movs	r0, r5
 800637e:	4690      	mov	r8, r2
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	f7fe fbe1 	bl	8004b48 <__udivsi3>
 8006386:	0002      	movs	r2, r0
 8006388:	9b01      	ldr	r3, [sp, #4]
 800638a:	4683      	mov	fp, r0
 800638c:	435a      	muls	r2, r3
 800638e:	0028      	movs	r0, r5
 8006390:	0039      	movs	r1, r7
 8006392:	4691      	mov	r9, r2
 8006394:	f7fe fc5e 	bl	8004c54 <__aeabi_uidivmod>
 8006398:	0c35      	lsrs	r5, r6, #16
 800639a:	0409      	lsls	r1, r1, #16
 800639c:	430d      	orrs	r5, r1
 800639e:	45a9      	cmp	r9, r5
 80063a0:	d90d      	bls.n	80063be <__aeabi_ddiv+0x262>
 80063a2:	465b      	mov	r3, fp
 80063a4:	4445      	add	r5, r8
 80063a6:	3b01      	subs	r3, #1
 80063a8:	45a8      	cmp	r8, r5
 80063aa:	d900      	bls.n	80063ae <__aeabi_ddiv+0x252>
 80063ac:	e13a      	b.n	8006624 <__aeabi_ddiv+0x4c8>
 80063ae:	45a9      	cmp	r9, r5
 80063b0:	d800      	bhi.n	80063b4 <__aeabi_ddiv+0x258>
 80063b2:	e137      	b.n	8006624 <__aeabi_ddiv+0x4c8>
 80063b4:	2302      	movs	r3, #2
 80063b6:	425b      	negs	r3, r3
 80063b8:	469c      	mov	ip, r3
 80063ba:	4445      	add	r5, r8
 80063bc:	44e3      	add	fp, ip
 80063be:	464b      	mov	r3, r9
 80063c0:	1aeb      	subs	r3, r5, r3
 80063c2:	0039      	movs	r1, r7
 80063c4:	0018      	movs	r0, r3
 80063c6:	9304      	str	r3, [sp, #16]
 80063c8:	f7fe fbbe 	bl	8004b48 <__udivsi3>
 80063cc:	9b01      	ldr	r3, [sp, #4]
 80063ce:	0005      	movs	r5, r0
 80063d0:	4343      	muls	r3, r0
 80063d2:	0039      	movs	r1, r7
 80063d4:	9804      	ldr	r0, [sp, #16]
 80063d6:	4699      	mov	r9, r3
 80063d8:	f7fe fc3c 	bl	8004c54 <__aeabi_uidivmod>
 80063dc:	0433      	lsls	r3, r6, #16
 80063de:	0409      	lsls	r1, r1, #16
 80063e0:	0c1b      	lsrs	r3, r3, #16
 80063e2:	430b      	orrs	r3, r1
 80063e4:	4599      	cmp	r9, r3
 80063e6:	d909      	bls.n	80063fc <__aeabi_ddiv+0x2a0>
 80063e8:	4443      	add	r3, r8
 80063ea:	1e6a      	subs	r2, r5, #1
 80063ec:	4598      	cmp	r8, r3
 80063ee:	d900      	bls.n	80063f2 <__aeabi_ddiv+0x296>
 80063f0:	e11a      	b.n	8006628 <__aeabi_ddiv+0x4cc>
 80063f2:	4599      	cmp	r9, r3
 80063f4:	d800      	bhi.n	80063f8 <__aeabi_ddiv+0x29c>
 80063f6:	e117      	b.n	8006628 <__aeabi_ddiv+0x4cc>
 80063f8:	3d02      	subs	r5, #2
 80063fa:	4443      	add	r3, r8
 80063fc:	464a      	mov	r2, r9
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	465a      	mov	r2, fp
 8006402:	0412      	lsls	r2, r2, #16
 8006404:	432a      	orrs	r2, r5
 8006406:	9903      	ldr	r1, [sp, #12]
 8006408:	4693      	mov	fp, r2
 800640a:	0c10      	lsrs	r0, r2, #16
 800640c:	0c0a      	lsrs	r2, r1, #16
 800640e:	4691      	mov	r9, r2
 8006410:	0409      	lsls	r1, r1, #16
 8006412:	465a      	mov	r2, fp
 8006414:	0c09      	lsrs	r1, r1, #16
 8006416:	464e      	mov	r6, r9
 8006418:	000d      	movs	r5, r1
 800641a:	0412      	lsls	r2, r2, #16
 800641c:	0c12      	lsrs	r2, r2, #16
 800641e:	4345      	muls	r5, r0
 8006420:	9105      	str	r1, [sp, #20]
 8006422:	4351      	muls	r1, r2
 8006424:	4372      	muls	r2, r6
 8006426:	4370      	muls	r0, r6
 8006428:	1952      	adds	r2, r2, r5
 800642a:	0c0e      	lsrs	r6, r1, #16
 800642c:	18b2      	adds	r2, r6, r2
 800642e:	4295      	cmp	r5, r2
 8006430:	d903      	bls.n	800643a <__aeabi_ddiv+0x2de>
 8006432:	2580      	movs	r5, #128	; 0x80
 8006434:	026d      	lsls	r5, r5, #9
 8006436:	46ac      	mov	ip, r5
 8006438:	4460      	add	r0, ip
 800643a:	0c15      	lsrs	r5, r2, #16
 800643c:	0409      	lsls	r1, r1, #16
 800643e:	0412      	lsls	r2, r2, #16
 8006440:	0c09      	lsrs	r1, r1, #16
 8006442:	1828      	adds	r0, r5, r0
 8006444:	1852      	adds	r2, r2, r1
 8006446:	4283      	cmp	r3, r0
 8006448:	d200      	bcs.n	800644c <__aeabi_ddiv+0x2f0>
 800644a:	e0ce      	b.n	80065ea <__aeabi_ddiv+0x48e>
 800644c:	d100      	bne.n	8006450 <__aeabi_ddiv+0x2f4>
 800644e:	e0c8      	b.n	80065e2 <__aeabi_ddiv+0x486>
 8006450:	1a1d      	subs	r5, r3, r0
 8006452:	4653      	mov	r3, sl
 8006454:	1a9e      	subs	r6, r3, r2
 8006456:	45b2      	cmp	sl, r6
 8006458:	4192      	sbcs	r2, r2
 800645a:	4252      	negs	r2, r2
 800645c:	1aab      	subs	r3, r5, r2
 800645e:	469a      	mov	sl, r3
 8006460:	4598      	cmp	r8, r3
 8006462:	d100      	bne.n	8006466 <__aeabi_ddiv+0x30a>
 8006464:	e117      	b.n	8006696 <__aeabi_ddiv+0x53a>
 8006466:	0039      	movs	r1, r7
 8006468:	0018      	movs	r0, r3
 800646a:	f7fe fb6d 	bl	8004b48 <__udivsi3>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	0005      	movs	r5, r0
 8006472:	4343      	muls	r3, r0
 8006474:	0039      	movs	r1, r7
 8006476:	4650      	mov	r0, sl
 8006478:	9304      	str	r3, [sp, #16]
 800647a:	f7fe fbeb 	bl	8004c54 <__aeabi_uidivmod>
 800647e:	9804      	ldr	r0, [sp, #16]
 8006480:	040b      	lsls	r3, r1, #16
 8006482:	0c31      	lsrs	r1, r6, #16
 8006484:	4319      	orrs	r1, r3
 8006486:	4288      	cmp	r0, r1
 8006488:	d909      	bls.n	800649e <__aeabi_ddiv+0x342>
 800648a:	4441      	add	r1, r8
 800648c:	1e6b      	subs	r3, r5, #1
 800648e:	4588      	cmp	r8, r1
 8006490:	d900      	bls.n	8006494 <__aeabi_ddiv+0x338>
 8006492:	e107      	b.n	80066a4 <__aeabi_ddiv+0x548>
 8006494:	4288      	cmp	r0, r1
 8006496:	d800      	bhi.n	800649a <__aeabi_ddiv+0x33e>
 8006498:	e104      	b.n	80066a4 <__aeabi_ddiv+0x548>
 800649a:	3d02      	subs	r5, #2
 800649c:	4441      	add	r1, r8
 800649e:	9b04      	ldr	r3, [sp, #16]
 80064a0:	1acb      	subs	r3, r1, r3
 80064a2:	0018      	movs	r0, r3
 80064a4:	0039      	movs	r1, r7
 80064a6:	9304      	str	r3, [sp, #16]
 80064a8:	f7fe fb4e 	bl	8004b48 <__udivsi3>
 80064ac:	9b01      	ldr	r3, [sp, #4]
 80064ae:	4682      	mov	sl, r0
 80064b0:	4343      	muls	r3, r0
 80064b2:	0039      	movs	r1, r7
 80064b4:	9804      	ldr	r0, [sp, #16]
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	f7fe fbcc 	bl	8004c54 <__aeabi_uidivmod>
 80064bc:	9801      	ldr	r0, [sp, #4]
 80064be:	040b      	lsls	r3, r1, #16
 80064c0:	0431      	lsls	r1, r6, #16
 80064c2:	0c09      	lsrs	r1, r1, #16
 80064c4:	4319      	orrs	r1, r3
 80064c6:	4288      	cmp	r0, r1
 80064c8:	d90d      	bls.n	80064e6 <__aeabi_ddiv+0x38a>
 80064ca:	4653      	mov	r3, sl
 80064cc:	4441      	add	r1, r8
 80064ce:	3b01      	subs	r3, #1
 80064d0:	4588      	cmp	r8, r1
 80064d2:	d900      	bls.n	80064d6 <__aeabi_ddiv+0x37a>
 80064d4:	e0e8      	b.n	80066a8 <__aeabi_ddiv+0x54c>
 80064d6:	4288      	cmp	r0, r1
 80064d8:	d800      	bhi.n	80064dc <__aeabi_ddiv+0x380>
 80064da:	e0e5      	b.n	80066a8 <__aeabi_ddiv+0x54c>
 80064dc:	2302      	movs	r3, #2
 80064de:	425b      	negs	r3, r3
 80064e0:	469c      	mov	ip, r3
 80064e2:	4441      	add	r1, r8
 80064e4:	44e2      	add	sl, ip
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	042d      	lsls	r5, r5, #16
 80064ea:	1ace      	subs	r6, r1, r3
 80064ec:	4651      	mov	r1, sl
 80064ee:	4329      	orrs	r1, r5
 80064f0:	9d05      	ldr	r5, [sp, #20]
 80064f2:	464f      	mov	r7, r9
 80064f4:	002a      	movs	r2, r5
 80064f6:	040b      	lsls	r3, r1, #16
 80064f8:	0c08      	lsrs	r0, r1, #16
 80064fa:	0c1b      	lsrs	r3, r3, #16
 80064fc:	435a      	muls	r2, r3
 80064fe:	4345      	muls	r5, r0
 8006500:	437b      	muls	r3, r7
 8006502:	4378      	muls	r0, r7
 8006504:	195b      	adds	r3, r3, r5
 8006506:	0c17      	lsrs	r7, r2, #16
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	429d      	cmp	r5, r3
 800650c:	d903      	bls.n	8006516 <__aeabi_ddiv+0x3ba>
 800650e:	2580      	movs	r5, #128	; 0x80
 8006510:	026d      	lsls	r5, r5, #9
 8006512:	46ac      	mov	ip, r5
 8006514:	4460      	add	r0, ip
 8006516:	0c1d      	lsrs	r5, r3, #16
 8006518:	0412      	lsls	r2, r2, #16
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	0c12      	lsrs	r2, r2, #16
 800651e:	1828      	adds	r0, r5, r0
 8006520:	189b      	adds	r3, r3, r2
 8006522:	4286      	cmp	r6, r0
 8006524:	d200      	bcs.n	8006528 <__aeabi_ddiv+0x3cc>
 8006526:	e093      	b.n	8006650 <__aeabi_ddiv+0x4f4>
 8006528:	d100      	bne.n	800652c <__aeabi_ddiv+0x3d0>
 800652a:	e08e      	b.n	800664a <__aeabi_ddiv+0x4ee>
 800652c:	2301      	movs	r3, #1
 800652e:	4319      	orrs	r1, r3
 8006530:	4ba0      	ldr	r3, [pc, #640]	; (80067b4 <__aeabi_ddiv+0x658>)
 8006532:	18e3      	adds	r3, r4, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	dc00      	bgt.n	800653a <__aeabi_ddiv+0x3de>
 8006538:	e099      	b.n	800666e <__aeabi_ddiv+0x512>
 800653a:	074a      	lsls	r2, r1, #29
 800653c:	d000      	beq.n	8006540 <__aeabi_ddiv+0x3e4>
 800653e:	e09e      	b.n	800667e <__aeabi_ddiv+0x522>
 8006540:	465a      	mov	r2, fp
 8006542:	01d2      	lsls	r2, r2, #7
 8006544:	d506      	bpl.n	8006554 <__aeabi_ddiv+0x3f8>
 8006546:	465a      	mov	r2, fp
 8006548:	4b9b      	ldr	r3, [pc, #620]	; (80067b8 <__aeabi_ddiv+0x65c>)
 800654a:	401a      	ands	r2, r3
 800654c:	2380      	movs	r3, #128	; 0x80
 800654e:	4693      	mov	fp, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	18e3      	adds	r3, r4, r3
 8006554:	4a99      	ldr	r2, [pc, #612]	; (80067bc <__aeabi_ddiv+0x660>)
 8006556:	4293      	cmp	r3, r2
 8006558:	dd68      	ble.n	800662c <__aeabi_ddiv+0x4d0>
 800655a:	2301      	movs	r3, #1
 800655c:	9a02      	ldr	r2, [sp, #8]
 800655e:	4c98      	ldr	r4, [pc, #608]	; (80067c0 <__aeabi_ddiv+0x664>)
 8006560:	401a      	ands	r2, r3
 8006562:	2300      	movs	r3, #0
 8006564:	4694      	mov	ip, r2
 8006566:	4698      	mov	r8, r3
 8006568:	2200      	movs	r2, #0
 800656a:	e6c5      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 800656c:	2280      	movs	r2, #128	; 0x80
 800656e:	464b      	mov	r3, r9
 8006570:	0312      	lsls	r2, r2, #12
 8006572:	4213      	tst	r3, r2
 8006574:	d00a      	beq.n	800658c <__aeabi_ddiv+0x430>
 8006576:	465b      	mov	r3, fp
 8006578:	4213      	tst	r3, r2
 800657a:	d106      	bne.n	800658a <__aeabi_ddiv+0x42e>
 800657c:	431a      	orrs	r2, r3
 800657e:	0312      	lsls	r2, r2, #12
 8006580:	0b12      	lsrs	r2, r2, #12
 8006582:	46ac      	mov	ip, r5
 8006584:	4688      	mov	r8, r1
 8006586:	4c8e      	ldr	r4, [pc, #568]	; (80067c0 <__aeabi_ddiv+0x664>)
 8006588:	e6b6      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 800658a:	464b      	mov	r3, r9
 800658c:	431a      	orrs	r2, r3
 800658e:	0312      	lsls	r2, r2, #12
 8006590:	0b12      	lsrs	r2, r2, #12
 8006592:	46bc      	mov	ip, r7
 8006594:	4c8a      	ldr	r4, [pc, #552]	; (80067c0 <__aeabi_ddiv+0x664>)
 8006596:	e6af      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 8006598:	0003      	movs	r3, r0
 800659a:	465a      	mov	r2, fp
 800659c:	3b28      	subs	r3, #40	; 0x28
 800659e:	409a      	lsls	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	4691      	mov	r9, r2
 80065a4:	4698      	mov	r8, r3
 80065a6:	e657      	b.n	8006258 <__aeabi_ddiv+0xfc>
 80065a8:	4658      	mov	r0, fp
 80065aa:	f001 f913 	bl	80077d4 <__clzsi2>
 80065ae:	3020      	adds	r0, #32
 80065b0:	e640      	b.n	8006234 <__aeabi_ddiv+0xd8>
 80065b2:	0003      	movs	r3, r0
 80065b4:	4652      	mov	r2, sl
 80065b6:	3b28      	subs	r3, #40	; 0x28
 80065b8:	409a      	lsls	r2, r3
 80065ba:	2100      	movs	r1, #0
 80065bc:	4693      	mov	fp, r2
 80065be:	e677      	b.n	80062b0 <__aeabi_ddiv+0x154>
 80065c0:	f001 f908 	bl	80077d4 <__clzsi2>
 80065c4:	3020      	adds	r0, #32
 80065c6:	e65f      	b.n	8006288 <__aeabi_ddiv+0x12c>
 80065c8:	4588      	cmp	r8, r1
 80065ca:	d200      	bcs.n	80065ce <__aeabi_ddiv+0x472>
 80065cc:	e6c7      	b.n	800635e <__aeabi_ddiv+0x202>
 80065ce:	464b      	mov	r3, r9
 80065d0:	07de      	lsls	r6, r3, #31
 80065d2:	085d      	lsrs	r5, r3, #1
 80065d4:	4643      	mov	r3, r8
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	431e      	orrs	r6, r3
 80065da:	4643      	mov	r3, r8
 80065dc:	07db      	lsls	r3, r3, #31
 80065de:	469a      	mov	sl, r3
 80065e0:	e6c2      	b.n	8006368 <__aeabi_ddiv+0x20c>
 80065e2:	2500      	movs	r5, #0
 80065e4:	4592      	cmp	sl, r2
 80065e6:	d300      	bcc.n	80065ea <__aeabi_ddiv+0x48e>
 80065e8:	e733      	b.n	8006452 <__aeabi_ddiv+0x2f6>
 80065ea:	9e03      	ldr	r6, [sp, #12]
 80065ec:	4659      	mov	r1, fp
 80065ee:	46b4      	mov	ip, r6
 80065f0:	44e2      	add	sl, ip
 80065f2:	45b2      	cmp	sl, r6
 80065f4:	41ad      	sbcs	r5, r5
 80065f6:	426d      	negs	r5, r5
 80065f8:	4445      	add	r5, r8
 80065fa:	18eb      	adds	r3, r5, r3
 80065fc:	3901      	subs	r1, #1
 80065fe:	4598      	cmp	r8, r3
 8006600:	d207      	bcs.n	8006612 <__aeabi_ddiv+0x4b6>
 8006602:	4298      	cmp	r0, r3
 8006604:	d900      	bls.n	8006608 <__aeabi_ddiv+0x4ac>
 8006606:	e07f      	b.n	8006708 <__aeabi_ddiv+0x5ac>
 8006608:	d100      	bne.n	800660c <__aeabi_ddiv+0x4b0>
 800660a:	e0bc      	b.n	8006786 <__aeabi_ddiv+0x62a>
 800660c:	1a1d      	subs	r5, r3, r0
 800660e:	468b      	mov	fp, r1
 8006610:	e71f      	b.n	8006452 <__aeabi_ddiv+0x2f6>
 8006612:	4598      	cmp	r8, r3
 8006614:	d1fa      	bne.n	800660c <__aeabi_ddiv+0x4b0>
 8006616:	9d03      	ldr	r5, [sp, #12]
 8006618:	4555      	cmp	r5, sl
 800661a:	d9f2      	bls.n	8006602 <__aeabi_ddiv+0x4a6>
 800661c:	4643      	mov	r3, r8
 800661e:	468b      	mov	fp, r1
 8006620:	1a1d      	subs	r5, r3, r0
 8006622:	e716      	b.n	8006452 <__aeabi_ddiv+0x2f6>
 8006624:	469b      	mov	fp, r3
 8006626:	e6ca      	b.n	80063be <__aeabi_ddiv+0x262>
 8006628:	0015      	movs	r5, r2
 800662a:	e6e7      	b.n	80063fc <__aeabi_ddiv+0x2a0>
 800662c:	465a      	mov	r2, fp
 800662e:	08c9      	lsrs	r1, r1, #3
 8006630:	0752      	lsls	r2, r2, #29
 8006632:	430a      	orrs	r2, r1
 8006634:	055b      	lsls	r3, r3, #21
 8006636:	4690      	mov	r8, r2
 8006638:	0d5c      	lsrs	r4, r3, #21
 800663a:	465a      	mov	r2, fp
 800663c:	2301      	movs	r3, #1
 800663e:	9902      	ldr	r1, [sp, #8]
 8006640:	0252      	lsls	r2, r2, #9
 8006642:	4019      	ands	r1, r3
 8006644:	0b12      	lsrs	r2, r2, #12
 8006646:	468c      	mov	ip, r1
 8006648:	e656      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d100      	bne.n	8006650 <__aeabi_ddiv+0x4f4>
 800664e:	e76f      	b.n	8006530 <__aeabi_ddiv+0x3d4>
 8006650:	4446      	add	r6, r8
 8006652:	1e4a      	subs	r2, r1, #1
 8006654:	45b0      	cmp	r8, r6
 8006656:	d929      	bls.n	80066ac <__aeabi_ddiv+0x550>
 8006658:	0011      	movs	r1, r2
 800665a:	4286      	cmp	r6, r0
 800665c:	d000      	beq.n	8006660 <__aeabi_ddiv+0x504>
 800665e:	e765      	b.n	800652c <__aeabi_ddiv+0x3d0>
 8006660:	9a03      	ldr	r2, [sp, #12]
 8006662:	4293      	cmp	r3, r2
 8006664:	d000      	beq.n	8006668 <__aeabi_ddiv+0x50c>
 8006666:	e761      	b.n	800652c <__aeabi_ddiv+0x3d0>
 8006668:	e762      	b.n	8006530 <__aeabi_ddiv+0x3d4>
 800666a:	2101      	movs	r1, #1
 800666c:	4249      	negs	r1, r1
 800666e:	2001      	movs	r0, #1
 8006670:	1ac2      	subs	r2, r0, r3
 8006672:	2a38      	cmp	r2, #56	; 0x38
 8006674:	dd21      	ble.n	80066ba <__aeabi_ddiv+0x55e>
 8006676:	9b02      	ldr	r3, [sp, #8]
 8006678:	4003      	ands	r3, r0
 800667a:	469c      	mov	ip, r3
 800667c:	e638      	b.n	80062f0 <__aeabi_ddiv+0x194>
 800667e:	220f      	movs	r2, #15
 8006680:	400a      	ands	r2, r1
 8006682:	2a04      	cmp	r2, #4
 8006684:	d100      	bne.n	8006688 <__aeabi_ddiv+0x52c>
 8006686:	e75b      	b.n	8006540 <__aeabi_ddiv+0x3e4>
 8006688:	000a      	movs	r2, r1
 800668a:	1d11      	adds	r1, r2, #4
 800668c:	4291      	cmp	r1, r2
 800668e:	4192      	sbcs	r2, r2
 8006690:	4252      	negs	r2, r2
 8006692:	4493      	add	fp, r2
 8006694:	e754      	b.n	8006540 <__aeabi_ddiv+0x3e4>
 8006696:	4b47      	ldr	r3, [pc, #284]	; (80067b4 <__aeabi_ddiv+0x658>)
 8006698:	18e3      	adds	r3, r4, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	dde5      	ble.n	800666a <__aeabi_ddiv+0x50e>
 800669e:	2201      	movs	r2, #1
 80066a0:	4252      	negs	r2, r2
 80066a2:	e7f2      	b.n	800668a <__aeabi_ddiv+0x52e>
 80066a4:	001d      	movs	r5, r3
 80066a6:	e6fa      	b.n	800649e <__aeabi_ddiv+0x342>
 80066a8:	469a      	mov	sl, r3
 80066aa:	e71c      	b.n	80064e6 <__aeabi_ddiv+0x38a>
 80066ac:	42b0      	cmp	r0, r6
 80066ae:	d839      	bhi.n	8006724 <__aeabi_ddiv+0x5c8>
 80066b0:	d06e      	beq.n	8006790 <__aeabi_ddiv+0x634>
 80066b2:	0011      	movs	r1, r2
 80066b4:	e73a      	b.n	800652c <__aeabi_ddiv+0x3d0>
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	e73a      	b.n	8006530 <__aeabi_ddiv+0x3d4>
 80066ba:	2a1f      	cmp	r2, #31
 80066bc:	dc3c      	bgt.n	8006738 <__aeabi_ddiv+0x5dc>
 80066be:	2320      	movs	r3, #32
 80066c0:	1a9b      	subs	r3, r3, r2
 80066c2:	000c      	movs	r4, r1
 80066c4:	4658      	mov	r0, fp
 80066c6:	4099      	lsls	r1, r3
 80066c8:	4098      	lsls	r0, r3
 80066ca:	1e4b      	subs	r3, r1, #1
 80066cc:	4199      	sbcs	r1, r3
 80066ce:	465b      	mov	r3, fp
 80066d0:	40d4      	lsrs	r4, r2
 80066d2:	40d3      	lsrs	r3, r2
 80066d4:	4320      	orrs	r0, r4
 80066d6:	4308      	orrs	r0, r1
 80066d8:	001a      	movs	r2, r3
 80066da:	0743      	lsls	r3, r0, #29
 80066dc:	d009      	beq.n	80066f2 <__aeabi_ddiv+0x596>
 80066de:	230f      	movs	r3, #15
 80066e0:	4003      	ands	r3, r0
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d005      	beq.n	80066f2 <__aeabi_ddiv+0x596>
 80066e6:	0001      	movs	r1, r0
 80066e8:	1d08      	adds	r0, r1, #4
 80066ea:	4288      	cmp	r0, r1
 80066ec:	419b      	sbcs	r3, r3
 80066ee:	425b      	negs	r3, r3
 80066f0:	18d2      	adds	r2, r2, r3
 80066f2:	0213      	lsls	r3, r2, #8
 80066f4:	d53a      	bpl.n	800676c <__aeabi_ddiv+0x610>
 80066f6:	2301      	movs	r3, #1
 80066f8:	9a02      	ldr	r2, [sp, #8]
 80066fa:	2401      	movs	r4, #1
 80066fc:	401a      	ands	r2, r3
 80066fe:	2300      	movs	r3, #0
 8006700:	4694      	mov	ip, r2
 8006702:	4698      	mov	r8, r3
 8006704:	2200      	movs	r2, #0
 8006706:	e5f7      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 8006708:	2102      	movs	r1, #2
 800670a:	4249      	negs	r1, r1
 800670c:	468c      	mov	ip, r1
 800670e:	9d03      	ldr	r5, [sp, #12]
 8006710:	44e3      	add	fp, ip
 8006712:	46ac      	mov	ip, r5
 8006714:	44e2      	add	sl, ip
 8006716:	45aa      	cmp	sl, r5
 8006718:	41ad      	sbcs	r5, r5
 800671a:	426d      	negs	r5, r5
 800671c:	4445      	add	r5, r8
 800671e:	18ed      	adds	r5, r5, r3
 8006720:	1a2d      	subs	r5, r5, r0
 8006722:	e696      	b.n	8006452 <__aeabi_ddiv+0x2f6>
 8006724:	1e8a      	subs	r2, r1, #2
 8006726:	9903      	ldr	r1, [sp, #12]
 8006728:	004d      	lsls	r5, r1, #1
 800672a:	428d      	cmp	r5, r1
 800672c:	4189      	sbcs	r1, r1
 800672e:	4249      	negs	r1, r1
 8006730:	4441      	add	r1, r8
 8006732:	1876      	adds	r6, r6, r1
 8006734:	9503      	str	r5, [sp, #12]
 8006736:	e78f      	b.n	8006658 <__aeabi_ddiv+0x4fc>
 8006738:	201f      	movs	r0, #31
 800673a:	4240      	negs	r0, r0
 800673c:	1ac3      	subs	r3, r0, r3
 800673e:	4658      	mov	r0, fp
 8006740:	40d8      	lsrs	r0, r3
 8006742:	0003      	movs	r3, r0
 8006744:	2a20      	cmp	r2, #32
 8006746:	d028      	beq.n	800679a <__aeabi_ddiv+0x63e>
 8006748:	2040      	movs	r0, #64	; 0x40
 800674a:	465d      	mov	r5, fp
 800674c:	1a82      	subs	r2, r0, r2
 800674e:	4095      	lsls	r5, r2
 8006750:	4329      	orrs	r1, r5
 8006752:	1e4a      	subs	r2, r1, #1
 8006754:	4191      	sbcs	r1, r2
 8006756:	4319      	orrs	r1, r3
 8006758:	2307      	movs	r3, #7
 800675a:	2200      	movs	r2, #0
 800675c:	400b      	ands	r3, r1
 800675e:	d009      	beq.n	8006774 <__aeabi_ddiv+0x618>
 8006760:	230f      	movs	r3, #15
 8006762:	2200      	movs	r2, #0
 8006764:	400b      	ands	r3, r1
 8006766:	0008      	movs	r0, r1
 8006768:	2b04      	cmp	r3, #4
 800676a:	d1bd      	bne.n	80066e8 <__aeabi_ddiv+0x58c>
 800676c:	0001      	movs	r1, r0
 800676e:	0753      	lsls	r3, r2, #29
 8006770:	0252      	lsls	r2, r2, #9
 8006772:	0b12      	lsrs	r2, r2, #12
 8006774:	08c9      	lsrs	r1, r1, #3
 8006776:	4319      	orrs	r1, r3
 8006778:	2301      	movs	r3, #1
 800677a:	4688      	mov	r8, r1
 800677c:	9902      	ldr	r1, [sp, #8]
 800677e:	2400      	movs	r4, #0
 8006780:	4019      	ands	r1, r3
 8006782:	468c      	mov	ip, r1
 8006784:	e5b8      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 8006786:	4552      	cmp	r2, sl
 8006788:	d8be      	bhi.n	8006708 <__aeabi_ddiv+0x5ac>
 800678a:	468b      	mov	fp, r1
 800678c:	2500      	movs	r5, #0
 800678e:	e660      	b.n	8006452 <__aeabi_ddiv+0x2f6>
 8006790:	9d03      	ldr	r5, [sp, #12]
 8006792:	429d      	cmp	r5, r3
 8006794:	d3c6      	bcc.n	8006724 <__aeabi_ddiv+0x5c8>
 8006796:	0011      	movs	r1, r2
 8006798:	e762      	b.n	8006660 <__aeabi_ddiv+0x504>
 800679a:	2500      	movs	r5, #0
 800679c:	e7d8      	b.n	8006750 <__aeabi_ddiv+0x5f4>
 800679e:	2280      	movs	r2, #128	; 0x80
 80067a0:	465b      	mov	r3, fp
 80067a2:	0312      	lsls	r2, r2, #12
 80067a4:	431a      	orrs	r2, r3
 80067a6:	9b01      	ldr	r3, [sp, #4]
 80067a8:	0312      	lsls	r2, r2, #12
 80067aa:	0b12      	lsrs	r2, r2, #12
 80067ac:	469c      	mov	ip, r3
 80067ae:	4688      	mov	r8, r1
 80067b0:	4c03      	ldr	r4, [pc, #12]	; (80067c0 <__aeabi_ddiv+0x664>)
 80067b2:	e5a1      	b.n	80062f8 <__aeabi_ddiv+0x19c>
 80067b4:	000003ff 	.word	0x000003ff
 80067b8:	feffffff 	.word	0xfeffffff
 80067bc:	000007fe 	.word	0x000007fe
 80067c0:	000007ff 	.word	0x000007ff

080067c4 <__eqdf2>:
 80067c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067c6:	464f      	mov	r7, r9
 80067c8:	4646      	mov	r6, r8
 80067ca:	46d6      	mov	lr, sl
 80067cc:	005c      	lsls	r4, r3, #1
 80067ce:	b5c0      	push	{r6, r7, lr}
 80067d0:	031f      	lsls	r7, r3, #12
 80067d2:	0fdb      	lsrs	r3, r3, #31
 80067d4:	469a      	mov	sl, r3
 80067d6:	4b17      	ldr	r3, [pc, #92]	; (8006834 <__eqdf2+0x70>)
 80067d8:	030e      	lsls	r6, r1, #12
 80067da:	004d      	lsls	r5, r1, #1
 80067dc:	4684      	mov	ip, r0
 80067de:	4680      	mov	r8, r0
 80067e0:	0b36      	lsrs	r6, r6, #12
 80067e2:	0d6d      	lsrs	r5, r5, #21
 80067e4:	0fc9      	lsrs	r1, r1, #31
 80067e6:	4691      	mov	r9, r2
 80067e8:	0b3f      	lsrs	r7, r7, #12
 80067ea:	0d64      	lsrs	r4, r4, #21
 80067ec:	2001      	movs	r0, #1
 80067ee:	429d      	cmp	r5, r3
 80067f0:	d008      	beq.n	8006804 <__eqdf2+0x40>
 80067f2:	429c      	cmp	r4, r3
 80067f4:	d001      	beq.n	80067fa <__eqdf2+0x36>
 80067f6:	42a5      	cmp	r5, r4
 80067f8:	d00b      	beq.n	8006812 <__eqdf2+0x4e>
 80067fa:	bc1c      	pop	{r2, r3, r4}
 80067fc:	4690      	mov	r8, r2
 80067fe:	4699      	mov	r9, r3
 8006800:	46a2      	mov	sl, r4
 8006802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006804:	4663      	mov	r3, ip
 8006806:	4333      	orrs	r3, r6
 8006808:	d1f7      	bne.n	80067fa <__eqdf2+0x36>
 800680a:	42ac      	cmp	r4, r5
 800680c:	d1f5      	bne.n	80067fa <__eqdf2+0x36>
 800680e:	433a      	orrs	r2, r7
 8006810:	d1f3      	bne.n	80067fa <__eqdf2+0x36>
 8006812:	2001      	movs	r0, #1
 8006814:	42be      	cmp	r6, r7
 8006816:	d1f0      	bne.n	80067fa <__eqdf2+0x36>
 8006818:	45c8      	cmp	r8, r9
 800681a:	d1ee      	bne.n	80067fa <__eqdf2+0x36>
 800681c:	4551      	cmp	r1, sl
 800681e:	d007      	beq.n	8006830 <__eqdf2+0x6c>
 8006820:	2d00      	cmp	r5, #0
 8006822:	d1ea      	bne.n	80067fa <__eqdf2+0x36>
 8006824:	4663      	mov	r3, ip
 8006826:	431e      	orrs	r6, r3
 8006828:	0030      	movs	r0, r6
 800682a:	1e46      	subs	r6, r0, #1
 800682c:	41b0      	sbcs	r0, r6
 800682e:	e7e4      	b.n	80067fa <__eqdf2+0x36>
 8006830:	2000      	movs	r0, #0
 8006832:	e7e2      	b.n	80067fa <__eqdf2+0x36>
 8006834:	000007ff 	.word	0x000007ff

08006838 <__gedf2>:
 8006838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683a:	4645      	mov	r5, r8
 800683c:	46de      	mov	lr, fp
 800683e:	4657      	mov	r7, sl
 8006840:	464e      	mov	r6, r9
 8006842:	b5e0      	push	{r5, r6, r7, lr}
 8006844:	031f      	lsls	r7, r3, #12
 8006846:	0b3d      	lsrs	r5, r7, #12
 8006848:	4f2c      	ldr	r7, [pc, #176]	; (80068fc <__gedf2+0xc4>)
 800684a:	030e      	lsls	r6, r1, #12
 800684c:	004c      	lsls	r4, r1, #1
 800684e:	46ab      	mov	fp, r5
 8006850:	005d      	lsls	r5, r3, #1
 8006852:	4684      	mov	ip, r0
 8006854:	0b36      	lsrs	r6, r6, #12
 8006856:	0d64      	lsrs	r4, r4, #21
 8006858:	0fc9      	lsrs	r1, r1, #31
 800685a:	4690      	mov	r8, r2
 800685c:	0d6d      	lsrs	r5, r5, #21
 800685e:	0fdb      	lsrs	r3, r3, #31
 8006860:	42bc      	cmp	r4, r7
 8006862:	d02a      	beq.n	80068ba <__gedf2+0x82>
 8006864:	4f25      	ldr	r7, [pc, #148]	; (80068fc <__gedf2+0xc4>)
 8006866:	42bd      	cmp	r5, r7
 8006868:	d02d      	beq.n	80068c6 <__gedf2+0x8e>
 800686a:	2c00      	cmp	r4, #0
 800686c:	d10f      	bne.n	800688e <__gedf2+0x56>
 800686e:	4330      	orrs	r0, r6
 8006870:	0007      	movs	r7, r0
 8006872:	4681      	mov	r9, r0
 8006874:	4278      	negs	r0, r7
 8006876:	4178      	adcs	r0, r7
 8006878:	b2c0      	uxtb	r0, r0
 800687a:	2d00      	cmp	r5, #0
 800687c:	d117      	bne.n	80068ae <__gedf2+0x76>
 800687e:	465f      	mov	r7, fp
 8006880:	433a      	orrs	r2, r7
 8006882:	d114      	bne.n	80068ae <__gedf2+0x76>
 8006884:	464b      	mov	r3, r9
 8006886:	2000      	movs	r0, #0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <__gedf2+0x6a>
 800688c:	e006      	b.n	800689c <__gedf2+0x64>
 800688e:	2d00      	cmp	r5, #0
 8006890:	d102      	bne.n	8006898 <__gedf2+0x60>
 8006892:	4658      	mov	r0, fp
 8006894:	4302      	orrs	r2, r0
 8006896:	d001      	beq.n	800689c <__gedf2+0x64>
 8006898:	4299      	cmp	r1, r3
 800689a:	d018      	beq.n	80068ce <__gedf2+0x96>
 800689c:	4248      	negs	r0, r1
 800689e:	2101      	movs	r1, #1
 80068a0:	4308      	orrs	r0, r1
 80068a2:	bc3c      	pop	{r2, r3, r4, r5}
 80068a4:	4690      	mov	r8, r2
 80068a6:	4699      	mov	r9, r3
 80068a8:	46a2      	mov	sl, r4
 80068aa:	46ab      	mov	fp, r5
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d0f2      	beq.n	8006898 <__gedf2+0x60>
 80068b2:	2001      	movs	r0, #1
 80068b4:	3b01      	subs	r3, #1
 80068b6:	4318      	orrs	r0, r3
 80068b8:	e7f3      	b.n	80068a2 <__gedf2+0x6a>
 80068ba:	0037      	movs	r7, r6
 80068bc:	4307      	orrs	r7, r0
 80068be:	d0d1      	beq.n	8006864 <__gedf2+0x2c>
 80068c0:	2002      	movs	r0, #2
 80068c2:	4240      	negs	r0, r0
 80068c4:	e7ed      	b.n	80068a2 <__gedf2+0x6a>
 80068c6:	465f      	mov	r7, fp
 80068c8:	4317      	orrs	r7, r2
 80068ca:	d0ce      	beq.n	800686a <__gedf2+0x32>
 80068cc:	e7f8      	b.n	80068c0 <__gedf2+0x88>
 80068ce:	42ac      	cmp	r4, r5
 80068d0:	dce4      	bgt.n	800689c <__gedf2+0x64>
 80068d2:	da03      	bge.n	80068dc <__gedf2+0xa4>
 80068d4:	1e48      	subs	r0, r1, #1
 80068d6:	2101      	movs	r1, #1
 80068d8:	4308      	orrs	r0, r1
 80068da:	e7e2      	b.n	80068a2 <__gedf2+0x6a>
 80068dc:	455e      	cmp	r6, fp
 80068de:	d8dd      	bhi.n	800689c <__gedf2+0x64>
 80068e0:	d006      	beq.n	80068f0 <__gedf2+0xb8>
 80068e2:	2000      	movs	r0, #0
 80068e4:	455e      	cmp	r6, fp
 80068e6:	d2dc      	bcs.n	80068a2 <__gedf2+0x6a>
 80068e8:	2301      	movs	r3, #1
 80068ea:	1e48      	subs	r0, r1, #1
 80068ec:	4318      	orrs	r0, r3
 80068ee:	e7d8      	b.n	80068a2 <__gedf2+0x6a>
 80068f0:	45c4      	cmp	ip, r8
 80068f2:	d8d3      	bhi.n	800689c <__gedf2+0x64>
 80068f4:	2000      	movs	r0, #0
 80068f6:	45c4      	cmp	ip, r8
 80068f8:	d3f6      	bcc.n	80068e8 <__gedf2+0xb0>
 80068fa:	e7d2      	b.n	80068a2 <__gedf2+0x6a>
 80068fc:	000007ff 	.word	0x000007ff

08006900 <__ledf2>:
 8006900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006902:	464e      	mov	r6, r9
 8006904:	4645      	mov	r5, r8
 8006906:	46de      	mov	lr, fp
 8006908:	4657      	mov	r7, sl
 800690a:	005c      	lsls	r4, r3, #1
 800690c:	b5e0      	push	{r5, r6, r7, lr}
 800690e:	031f      	lsls	r7, r3, #12
 8006910:	0fdb      	lsrs	r3, r3, #31
 8006912:	4699      	mov	r9, r3
 8006914:	4b2a      	ldr	r3, [pc, #168]	; (80069c0 <__ledf2+0xc0>)
 8006916:	030e      	lsls	r6, r1, #12
 8006918:	004d      	lsls	r5, r1, #1
 800691a:	0fc9      	lsrs	r1, r1, #31
 800691c:	4684      	mov	ip, r0
 800691e:	0b36      	lsrs	r6, r6, #12
 8006920:	0d6d      	lsrs	r5, r5, #21
 8006922:	468b      	mov	fp, r1
 8006924:	4690      	mov	r8, r2
 8006926:	0b3f      	lsrs	r7, r7, #12
 8006928:	0d64      	lsrs	r4, r4, #21
 800692a:	429d      	cmp	r5, r3
 800692c:	d020      	beq.n	8006970 <__ledf2+0x70>
 800692e:	4b24      	ldr	r3, [pc, #144]	; (80069c0 <__ledf2+0xc0>)
 8006930:	429c      	cmp	r4, r3
 8006932:	d022      	beq.n	800697a <__ledf2+0x7a>
 8006934:	2d00      	cmp	r5, #0
 8006936:	d112      	bne.n	800695e <__ledf2+0x5e>
 8006938:	4330      	orrs	r0, r6
 800693a:	4243      	negs	r3, r0
 800693c:	4143      	adcs	r3, r0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2c00      	cmp	r4, #0
 8006942:	d01f      	beq.n	8006984 <__ledf2+0x84>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00c      	beq.n	8006962 <__ledf2+0x62>
 8006948:	464b      	mov	r3, r9
 800694a:	2001      	movs	r0, #1
 800694c:	3b01      	subs	r3, #1
 800694e:	4303      	orrs	r3, r0
 8006950:	0018      	movs	r0, r3
 8006952:	bc3c      	pop	{r2, r3, r4, r5}
 8006954:	4690      	mov	r8, r2
 8006956:	4699      	mov	r9, r3
 8006958:	46a2      	mov	sl, r4
 800695a:	46ab      	mov	fp, r5
 800695c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800695e:	2c00      	cmp	r4, #0
 8006960:	d016      	beq.n	8006990 <__ledf2+0x90>
 8006962:	45cb      	cmp	fp, r9
 8006964:	d017      	beq.n	8006996 <__ledf2+0x96>
 8006966:	465b      	mov	r3, fp
 8006968:	4259      	negs	r1, r3
 800696a:	2301      	movs	r3, #1
 800696c:	430b      	orrs	r3, r1
 800696e:	e7ef      	b.n	8006950 <__ledf2+0x50>
 8006970:	0031      	movs	r1, r6
 8006972:	2302      	movs	r3, #2
 8006974:	4301      	orrs	r1, r0
 8006976:	d1eb      	bne.n	8006950 <__ledf2+0x50>
 8006978:	e7d9      	b.n	800692e <__ledf2+0x2e>
 800697a:	0039      	movs	r1, r7
 800697c:	2302      	movs	r3, #2
 800697e:	4311      	orrs	r1, r2
 8006980:	d1e6      	bne.n	8006950 <__ledf2+0x50>
 8006982:	e7d7      	b.n	8006934 <__ledf2+0x34>
 8006984:	433a      	orrs	r2, r7
 8006986:	d1dd      	bne.n	8006944 <__ledf2+0x44>
 8006988:	2300      	movs	r3, #0
 800698a:	2800      	cmp	r0, #0
 800698c:	d0e0      	beq.n	8006950 <__ledf2+0x50>
 800698e:	e7ea      	b.n	8006966 <__ledf2+0x66>
 8006990:	433a      	orrs	r2, r7
 8006992:	d1e6      	bne.n	8006962 <__ledf2+0x62>
 8006994:	e7e7      	b.n	8006966 <__ledf2+0x66>
 8006996:	42a5      	cmp	r5, r4
 8006998:	dce5      	bgt.n	8006966 <__ledf2+0x66>
 800699a:	db05      	blt.n	80069a8 <__ledf2+0xa8>
 800699c:	42be      	cmp	r6, r7
 800699e:	d8e2      	bhi.n	8006966 <__ledf2+0x66>
 80069a0:	d007      	beq.n	80069b2 <__ledf2+0xb2>
 80069a2:	2300      	movs	r3, #0
 80069a4:	42be      	cmp	r6, r7
 80069a6:	d2d3      	bcs.n	8006950 <__ledf2+0x50>
 80069a8:	4659      	mov	r1, fp
 80069aa:	2301      	movs	r3, #1
 80069ac:	3901      	subs	r1, #1
 80069ae:	430b      	orrs	r3, r1
 80069b0:	e7ce      	b.n	8006950 <__ledf2+0x50>
 80069b2:	45c4      	cmp	ip, r8
 80069b4:	d8d7      	bhi.n	8006966 <__ledf2+0x66>
 80069b6:	2300      	movs	r3, #0
 80069b8:	45c4      	cmp	ip, r8
 80069ba:	d3f5      	bcc.n	80069a8 <__ledf2+0xa8>
 80069bc:	e7c8      	b.n	8006950 <__ledf2+0x50>
 80069be:	46c0      	nop			; (mov r8, r8)
 80069c0:	000007ff 	.word	0x000007ff

080069c4 <__aeabi_dmul>:
 80069c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c6:	4657      	mov	r7, sl
 80069c8:	4645      	mov	r5, r8
 80069ca:	46de      	mov	lr, fp
 80069cc:	464e      	mov	r6, r9
 80069ce:	b5e0      	push	{r5, r6, r7, lr}
 80069d0:	030c      	lsls	r4, r1, #12
 80069d2:	4698      	mov	r8, r3
 80069d4:	004e      	lsls	r6, r1, #1
 80069d6:	0b23      	lsrs	r3, r4, #12
 80069d8:	b087      	sub	sp, #28
 80069da:	0007      	movs	r7, r0
 80069dc:	4692      	mov	sl, r2
 80069de:	469b      	mov	fp, r3
 80069e0:	0d76      	lsrs	r6, r6, #21
 80069e2:	0fcd      	lsrs	r5, r1, #31
 80069e4:	2e00      	cmp	r6, #0
 80069e6:	d06b      	beq.n	8006ac0 <__aeabi_dmul+0xfc>
 80069e8:	4b6d      	ldr	r3, [pc, #436]	; (8006ba0 <__aeabi_dmul+0x1dc>)
 80069ea:	429e      	cmp	r6, r3
 80069ec:	d035      	beq.n	8006a5a <__aeabi_dmul+0x96>
 80069ee:	2480      	movs	r4, #128	; 0x80
 80069f0:	465b      	mov	r3, fp
 80069f2:	0f42      	lsrs	r2, r0, #29
 80069f4:	0424      	lsls	r4, r4, #16
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4314      	orrs	r4, r2
 80069fa:	431c      	orrs	r4, r3
 80069fc:	00c3      	lsls	r3, r0, #3
 80069fe:	4699      	mov	r9, r3
 8006a00:	4b68      	ldr	r3, [pc, #416]	; (8006ba4 <__aeabi_dmul+0x1e0>)
 8006a02:	46a3      	mov	fp, r4
 8006a04:	469c      	mov	ip, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	2700      	movs	r7, #0
 8006a0a:	4466      	add	r6, ip
 8006a0c:	9302      	str	r3, [sp, #8]
 8006a0e:	4643      	mov	r3, r8
 8006a10:	031c      	lsls	r4, r3, #12
 8006a12:	005a      	lsls	r2, r3, #1
 8006a14:	0fdb      	lsrs	r3, r3, #31
 8006a16:	4650      	mov	r0, sl
 8006a18:	0b24      	lsrs	r4, r4, #12
 8006a1a:	0d52      	lsrs	r2, r2, #21
 8006a1c:	4698      	mov	r8, r3
 8006a1e:	d100      	bne.n	8006a22 <__aeabi_dmul+0x5e>
 8006a20:	e076      	b.n	8006b10 <__aeabi_dmul+0x14c>
 8006a22:	4b5f      	ldr	r3, [pc, #380]	; (8006ba0 <__aeabi_dmul+0x1dc>)
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d06d      	beq.n	8006b04 <__aeabi_dmul+0x140>
 8006a28:	2380      	movs	r3, #128	; 0x80
 8006a2a:	0f41      	lsrs	r1, r0, #29
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	495c      	ldr	r1, [pc, #368]	; (8006ba4 <__aeabi_dmul+0x1e0>)
 8006a32:	00e4      	lsls	r4, r4, #3
 8006a34:	468c      	mov	ip, r1
 8006a36:	431c      	orrs	r4, r3
 8006a38:	00c3      	lsls	r3, r0, #3
 8006a3a:	2000      	movs	r0, #0
 8006a3c:	4462      	add	r2, ip
 8006a3e:	4641      	mov	r1, r8
 8006a40:	18b6      	adds	r6, r6, r2
 8006a42:	4069      	eors	r1, r5
 8006a44:	1c72      	adds	r2, r6, #1
 8006a46:	9101      	str	r1, [sp, #4]
 8006a48:	4694      	mov	ip, r2
 8006a4a:	4307      	orrs	r7, r0
 8006a4c:	2f0f      	cmp	r7, #15
 8006a4e:	d900      	bls.n	8006a52 <__aeabi_dmul+0x8e>
 8006a50:	e0b0      	b.n	8006bb4 <__aeabi_dmul+0x1f0>
 8006a52:	4a55      	ldr	r2, [pc, #340]	; (8006ba8 <__aeabi_dmul+0x1e4>)
 8006a54:	00bf      	lsls	r7, r7, #2
 8006a56:	59d2      	ldr	r2, [r2, r7]
 8006a58:	4697      	mov	pc, r2
 8006a5a:	465b      	mov	r3, fp
 8006a5c:	4303      	orrs	r3, r0
 8006a5e:	4699      	mov	r9, r3
 8006a60:	d000      	beq.n	8006a64 <__aeabi_dmul+0xa0>
 8006a62:	e087      	b.n	8006b74 <__aeabi_dmul+0x1b0>
 8006a64:	2300      	movs	r3, #0
 8006a66:	469b      	mov	fp, r3
 8006a68:	3302      	adds	r3, #2
 8006a6a:	2708      	movs	r7, #8
 8006a6c:	9302      	str	r3, [sp, #8]
 8006a6e:	e7ce      	b.n	8006a0e <__aeabi_dmul+0x4a>
 8006a70:	4642      	mov	r2, r8
 8006a72:	9201      	str	r2, [sp, #4]
 8006a74:	2802      	cmp	r0, #2
 8006a76:	d067      	beq.n	8006b48 <__aeabi_dmul+0x184>
 8006a78:	2803      	cmp	r0, #3
 8006a7a:	d100      	bne.n	8006a7e <__aeabi_dmul+0xba>
 8006a7c:	e20e      	b.n	8006e9c <__aeabi_dmul+0x4d8>
 8006a7e:	2801      	cmp	r0, #1
 8006a80:	d000      	beq.n	8006a84 <__aeabi_dmul+0xc0>
 8006a82:	e162      	b.n	8006d4a <__aeabi_dmul+0x386>
 8006a84:	2300      	movs	r3, #0
 8006a86:	2400      	movs	r4, #0
 8006a88:	2200      	movs	r2, #0
 8006a8a:	4699      	mov	r9, r3
 8006a8c:	9901      	ldr	r1, [sp, #4]
 8006a8e:	4001      	ands	r1, r0
 8006a90:	b2cd      	uxtb	r5, r1
 8006a92:	2100      	movs	r1, #0
 8006a94:	0312      	lsls	r2, r2, #12
 8006a96:	0d0b      	lsrs	r3, r1, #20
 8006a98:	0b12      	lsrs	r2, r2, #12
 8006a9a:	051b      	lsls	r3, r3, #20
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	4a43      	ldr	r2, [pc, #268]	; (8006bac <__aeabi_dmul+0x1e8>)
 8006aa0:	0524      	lsls	r4, r4, #20
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	431c      	orrs	r4, r3
 8006aa6:	0064      	lsls	r4, r4, #1
 8006aa8:	07ed      	lsls	r5, r5, #31
 8006aaa:	0864      	lsrs	r4, r4, #1
 8006aac:	432c      	orrs	r4, r5
 8006aae:	4648      	mov	r0, r9
 8006ab0:	0021      	movs	r1, r4
 8006ab2:	b007      	add	sp, #28
 8006ab4:	bc3c      	pop	{r2, r3, r4, r5}
 8006ab6:	4690      	mov	r8, r2
 8006ab8:	4699      	mov	r9, r3
 8006aba:	46a2      	mov	sl, r4
 8006abc:	46ab      	mov	fp, r5
 8006abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac0:	4303      	orrs	r3, r0
 8006ac2:	4699      	mov	r9, r3
 8006ac4:	d04f      	beq.n	8006b66 <__aeabi_dmul+0x1a2>
 8006ac6:	465b      	mov	r3, fp
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d100      	bne.n	8006ace <__aeabi_dmul+0x10a>
 8006acc:	e189      	b.n	8006de2 <__aeabi_dmul+0x41e>
 8006ace:	4658      	mov	r0, fp
 8006ad0:	f000 fe80 	bl	80077d4 <__clzsi2>
 8006ad4:	0003      	movs	r3, r0
 8006ad6:	3b0b      	subs	r3, #11
 8006ad8:	2b1c      	cmp	r3, #28
 8006ada:	dd00      	ble.n	8006ade <__aeabi_dmul+0x11a>
 8006adc:	e17a      	b.n	8006dd4 <__aeabi_dmul+0x410>
 8006ade:	221d      	movs	r2, #29
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	003a      	movs	r2, r7
 8006ae4:	0001      	movs	r1, r0
 8006ae6:	465c      	mov	r4, fp
 8006ae8:	40da      	lsrs	r2, r3
 8006aea:	3908      	subs	r1, #8
 8006aec:	408c      	lsls	r4, r1
 8006aee:	0013      	movs	r3, r2
 8006af0:	408f      	lsls	r7, r1
 8006af2:	4323      	orrs	r3, r4
 8006af4:	469b      	mov	fp, r3
 8006af6:	46b9      	mov	r9, r7
 8006af8:	2300      	movs	r3, #0
 8006afa:	4e2d      	ldr	r6, [pc, #180]	; (8006bb0 <__aeabi_dmul+0x1ec>)
 8006afc:	2700      	movs	r7, #0
 8006afe:	1a36      	subs	r6, r6, r0
 8006b00:	9302      	str	r3, [sp, #8]
 8006b02:	e784      	b.n	8006a0e <__aeabi_dmul+0x4a>
 8006b04:	4653      	mov	r3, sl
 8006b06:	4323      	orrs	r3, r4
 8006b08:	d12a      	bne.n	8006b60 <__aeabi_dmul+0x19c>
 8006b0a:	2400      	movs	r4, #0
 8006b0c:	2002      	movs	r0, #2
 8006b0e:	e796      	b.n	8006a3e <__aeabi_dmul+0x7a>
 8006b10:	4653      	mov	r3, sl
 8006b12:	4323      	orrs	r3, r4
 8006b14:	d020      	beq.n	8006b58 <__aeabi_dmul+0x194>
 8006b16:	2c00      	cmp	r4, #0
 8006b18:	d100      	bne.n	8006b1c <__aeabi_dmul+0x158>
 8006b1a:	e157      	b.n	8006dcc <__aeabi_dmul+0x408>
 8006b1c:	0020      	movs	r0, r4
 8006b1e:	f000 fe59 	bl	80077d4 <__clzsi2>
 8006b22:	0003      	movs	r3, r0
 8006b24:	3b0b      	subs	r3, #11
 8006b26:	2b1c      	cmp	r3, #28
 8006b28:	dd00      	ble.n	8006b2c <__aeabi_dmul+0x168>
 8006b2a:	e149      	b.n	8006dc0 <__aeabi_dmul+0x3fc>
 8006b2c:	211d      	movs	r1, #29
 8006b2e:	1acb      	subs	r3, r1, r3
 8006b30:	4651      	mov	r1, sl
 8006b32:	0002      	movs	r2, r0
 8006b34:	40d9      	lsrs	r1, r3
 8006b36:	4653      	mov	r3, sl
 8006b38:	3a08      	subs	r2, #8
 8006b3a:	4094      	lsls	r4, r2
 8006b3c:	4093      	lsls	r3, r2
 8006b3e:	430c      	orrs	r4, r1
 8006b40:	4a1b      	ldr	r2, [pc, #108]	; (8006bb0 <__aeabi_dmul+0x1ec>)
 8006b42:	1a12      	subs	r2, r2, r0
 8006b44:	2000      	movs	r0, #0
 8006b46:	e77a      	b.n	8006a3e <__aeabi_dmul+0x7a>
 8006b48:	2501      	movs	r5, #1
 8006b4a:	9b01      	ldr	r3, [sp, #4]
 8006b4c:	4c14      	ldr	r4, [pc, #80]	; (8006ba0 <__aeabi_dmul+0x1dc>)
 8006b4e:	401d      	ands	r5, r3
 8006b50:	2300      	movs	r3, #0
 8006b52:	2200      	movs	r2, #0
 8006b54:	4699      	mov	r9, r3
 8006b56:	e79c      	b.n	8006a92 <__aeabi_dmul+0xce>
 8006b58:	2400      	movs	r4, #0
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	e76e      	b.n	8006a3e <__aeabi_dmul+0x7a>
 8006b60:	4653      	mov	r3, sl
 8006b62:	2003      	movs	r0, #3
 8006b64:	e76b      	b.n	8006a3e <__aeabi_dmul+0x7a>
 8006b66:	2300      	movs	r3, #0
 8006b68:	469b      	mov	fp, r3
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	2704      	movs	r7, #4
 8006b6e:	2600      	movs	r6, #0
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	e74c      	b.n	8006a0e <__aeabi_dmul+0x4a>
 8006b74:	2303      	movs	r3, #3
 8006b76:	4681      	mov	r9, r0
 8006b78:	270c      	movs	r7, #12
 8006b7a:	9302      	str	r3, [sp, #8]
 8006b7c:	e747      	b.n	8006a0e <__aeabi_dmul+0x4a>
 8006b7e:	2280      	movs	r2, #128	; 0x80
 8006b80:	2300      	movs	r3, #0
 8006b82:	2500      	movs	r5, #0
 8006b84:	0312      	lsls	r2, r2, #12
 8006b86:	4699      	mov	r9, r3
 8006b88:	4c05      	ldr	r4, [pc, #20]	; (8006ba0 <__aeabi_dmul+0x1dc>)
 8006b8a:	e782      	b.n	8006a92 <__aeabi_dmul+0xce>
 8006b8c:	465c      	mov	r4, fp
 8006b8e:	464b      	mov	r3, r9
 8006b90:	9802      	ldr	r0, [sp, #8]
 8006b92:	e76f      	b.n	8006a74 <__aeabi_dmul+0xb0>
 8006b94:	465c      	mov	r4, fp
 8006b96:	464b      	mov	r3, r9
 8006b98:	9501      	str	r5, [sp, #4]
 8006b9a:	9802      	ldr	r0, [sp, #8]
 8006b9c:	e76a      	b.n	8006a74 <__aeabi_dmul+0xb0>
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	000007ff 	.word	0x000007ff
 8006ba4:	fffffc01 	.word	0xfffffc01
 8006ba8:	080090e8 	.word	0x080090e8
 8006bac:	800fffff 	.word	0x800fffff
 8006bb0:	fffffc0d 	.word	0xfffffc0d
 8006bb4:	464a      	mov	r2, r9
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	0c17      	lsrs	r7, r2, #16
 8006bba:	0c1a      	lsrs	r2, r3, #16
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	0c1b      	lsrs	r3, r3, #16
 8006bc0:	0408      	lsls	r0, r1, #16
 8006bc2:	0019      	movs	r1, r3
 8006bc4:	0c00      	lsrs	r0, r0, #16
 8006bc6:	4341      	muls	r1, r0
 8006bc8:	0015      	movs	r5, r2
 8006bca:	4688      	mov	r8, r1
 8006bcc:	0019      	movs	r1, r3
 8006bce:	437d      	muls	r5, r7
 8006bd0:	4379      	muls	r1, r7
 8006bd2:	9503      	str	r5, [sp, #12]
 8006bd4:	4689      	mov	r9, r1
 8006bd6:	0029      	movs	r1, r5
 8006bd8:	0015      	movs	r5, r2
 8006bda:	4345      	muls	r5, r0
 8006bdc:	444d      	add	r5, r9
 8006bde:	9502      	str	r5, [sp, #8]
 8006be0:	4645      	mov	r5, r8
 8006be2:	0c2d      	lsrs	r5, r5, #16
 8006be4:	46aa      	mov	sl, r5
 8006be6:	9d02      	ldr	r5, [sp, #8]
 8006be8:	4455      	add	r5, sl
 8006bea:	45a9      	cmp	r9, r5
 8006bec:	d906      	bls.n	8006bfc <__aeabi_dmul+0x238>
 8006bee:	468a      	mov	sl, r1
 8006bf0:	2180      	movs	r1, #128	; 0x80
 8006bf2:	0249      	lsls	r1, r1, #9
 8006bf4:	4689      	mov	r9, r1
 8006bf6:	44ca      	add	sl, r9
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	9103      	str	r1, [sp, #12]
 8006bfc:	0c29      	lsrs	r1, r5, #16
 8006bfe:	9104      	str	r1, [sp, #16]
 8006c00:	4641      	mov	r1, r8
 8006c02:	0409      	lsls	r1, r1, #16
 8006c04:	042d      	lsls	r5, r5, #16
 8006c06:	0c09      	lsrs	r1, r1, #16
 8006c08:	4688      	mov	r8, r1
 8006c0a:	0029      	movs	r1, r5
 8006c0c:	0c25      	lsrs	r5, r4, #16
 8006c0e:	0424      	lsls	r4, r4, #16
 8006c10:	4441      	add	r1, r8
 8006c12:	0c24      	lsrs	r4, r4, #16
 8006c14:	9105      	str	r1, [sp, #20]
 8006c16:	0021      	movs	r1, r4
 8006c18:	4341      	muls	r1, r0
 8006c1a:	4688      	mov	r8, r1
 8006c1c:	0021      	movs	r1, r4
 8006c1e:	4379      	muls	r1, r7
 8006c20:	468a      	mov	sl, r1
 8006c22:	4368      	muls	r0, r5
 8006c24:	4641      	mov	r1, r8
 8006c26:	4450      	add	r0, sl
 8006c28:	4681      	mov	r9, r0
 8006c2a:	0c08      	lsrs	r0, r1, #16
 8006c2c:	4448      	add	r0, r9
 8006c2e:	436f      	muls	r7, r5
 8006c30:	4582      	cmp	sl, r0
 8006c32:	d903      	bls.n	8006c3c <__aeabi_dmul+0x278>
 8006c34:	2180      	movs	r1, #128	; 0x80
 8006c36:	0249      	lsls	r1, r1, #9
 8006c38:	4689      	mov	r9, r1
 8006c3a:	444f      	add	r7, r9
 8006c3c:	0c01      	lsrs	r1, r0, #16
 8006c3e:	4689      	mov	r9, r1
 8006c40:	0039      	movs	r1, r7
 8006c42:	4449      	add	r1, r9
 8006c44:	9102      	str	r1, [sp, #8]
 8006c46:	4641      	mov	r1, r8
 8006c48:	040f      	lsls	r7, r1, #16
 8006c4a:	9904      	ldr	r1, [sp, #16]
 8006c4c:	0c3f      	lsrs	r7, r7, #16
 8006c4e:	4688      	mov	r8, r1
 8006c50:	0400      	lsls	r0, r0, #16
 8006c52:	19c0      	adds	r0, r0, r7
 8006c54:	4480      	add	r8, r0
 8006c56:	4641      	mov	r1, r8
 8006c58:	9104      	str	r1, [sp, #16]
 8006c5a:	4659      	mov	r1, fp
 8006c5c:	0c0f      	lsrs	r7, r1, #16
 8006c5e:	0409      	lsls	r1, r1, #16
 8006c60:	0c09      	lsrs	r1, r1, #16
 8006c62:	4688      	mov	r8, r1
 8006c64:	4359      	muls	r1, r3
 8006c66:	468a      	mov	sl, r1
 8006c68:	0039      	movs	r1, r7
 8006c6a:	4351      	muls	r1, r2
 8006c6c:	4689      	mov	r9, r1
 8006c6e:	4641      	mov	r1, r8
 8006c70:	434a      	muls	r2, r1
 8006c72:	4651      	mov	r1, sl
 8006c74:	0c09      	lsrs	r1, r1, #16
 8006c76:	468b      	mov	fp, r1
 8006c78:	437b      	muls	r3, r7
 8006c7a:	18d2      	adds	r2, r2, r3
 8006c7c:	445a      	add	r2, fp
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d903      	bls.n	8006c8a <__aeabi_dmul+0x2c6>
 8006c82:	2380      	movs	r3, #128	; 0x80
 8006c84:	025b      	lsls	r3, r3, #9
 8006c86:	469b      	mov	fp, r3
 8006c88:	44d9      	add	r9, fp
 8006c8a:	4651      	mov	r1, sl
 8006c8c:	0409      	lsls	r1, r1, #16
 8006c8e:	0c09      	lsrs	r1, r1, #16
 8006c90:	468a      	mov	sl, r1
 8006c92:	4641      	mov	r1, r8
 8006c94:	4361      	muls	r1, r4
 8006c96:	437c      	muls	r4, r7
 8006c98:	0c13      	lsrs	r3, r2, #16
 8006c9a:	0412      	lsls	r2, r2, #16
 8006c9c:	444b      	add	r3, r9
 8006c9e:	4452      	add	r2, sl
 8006ca0:	46a1      	mov	r9, r4
 8006ca2:	468a      	mov	sl, r1
 8006ca4:	003c      	movs	r4, r7
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	436c      	muls	r4, r5
 8006caa:	434d      	muls	r5, r1
 8006cac:	4651      	mov	r1, sl
 8006cae:	444d      	add	r5, r9
 8006cb0:	0c0f      	lsrs	r7, r1, #16
 8006cb2:	197d      	adds	r5, r7, r5
 8006cb4:	45a9      	cmp	r9, r5
 8006cb6:	d903      	bls.n	8006cc0 <__aeabi_dmul+0x2fc>
 8006cb8:	2180      	movs	r1, #128	; 0x80
 8006cba:	0249      	lsls	r1, r1, #9
 8006cbc:	4688      	mov	r8, r1
 8006cbe:	4444      	add	r4, r8
 8006cc0:	9f04      	ldr	r7, [sp, #16]
 8006cc2:	9903      	ldr	r1, [sp, #12]
 8006cc4:	46b8      	mov	r8, r7
 8006cc6:	4441      	add	r1, r8
 8006cc8:	468b      	mov	fp, r1
 8006cca:	4583      	cmp	fp, r0
 8006ccc:	4180      	sbcs	r0, r0
 8006cce:	4241      	negs	r1, r0
 8006cd0:	4688      	mov	r8, r1
 8006cd2:	4651      	mov	r1, sl
 8006cd4:	0408      	lsls	r0, r1, #16
 8006cd6:	042f      	lsls	r7, r5, #16
 8006cd8:	0c00      	lsrs	r0, r0, #16
 8006cda:	183f      	adds	r7, r7, r0
 8006cdc:	4658      	mov	r0, fp
 8006cde:	9902      	ldr	r1, [sp, #8]
 8006ce0:	1810      	adds	r0, r2, r0
 8006ce2:	4689      	mov	r9, r1
 8006ce4:	4290      	cmp	r0, r2
 8006ce6:	4192      	sbcs	r2, r2
 8006ce8:	444f      	add	r7, r9
 8006cea:	46ba      	mov	sl, r7
 8006cec:	4252      	negs	r2, r2
 8006cee:	4699      	mov	r9, r3
 8006cf0:	4693      	mov	fp, r2
 8006cf2:	44c2      	add	sl, r8
 8006cf4:	44d1      	add	r9, sl
 8006cf6:	44cb      	add	fp, r9
 8006cf8:	428f      	cmp	r7, r1
 8006cfa:	41bf      	sbcs	r7, r7
 8006cfc:	45c2      	cmp	sl, r8
 8006cfe:	4189      	sbcs	r1, r1
 8006d00:	4599      	cmp	r9, r3
 8006d02:	419b      	sbcs	r3, r3
 8006d04:	4593      	cmp	fp, r2
 8006d06:	4192      	sbcs	r2, r2
 8006d08:	427f      	negs	r7, r7
 8006d0a:	4249      	negs	r1, r1
 8006d0c:	0c2d      	lsrs	r5, r5, #16
 8006d0e:	4252      	negs	r2, r2
 8006d10:	430f      	orrs	r7, r1
 8006d12:	425b      	negs	r3, r3
 8006d14:	4313      	orrs	r3, r2
 8006d16:	197f      	adds	r7, r7, r5
 8006d18:	18ff      	adds	r7, r7, r3
 8006d1a:	465b      	mov	r3, fp
 8006d1c:	193c      	adds	r4, r7, r4
 8006d1e:	0ddb      	lsrs	r3, r3, #23
 8006d20:	9a05      	ldr	r2, [sp, #20]
 8006d22:	0264      	lsls	r4, r4, #9
 8006d24:	431c      	orrs	r4, r3
 8006d26:	0243      	lsls	r3, r0, #9
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	1e5d      	subs	r5, r3, #1
 8006d2c:	41ab      	sbcs	r3, r5
 8006d2e:	465a      	mov	r2, fp
 8006d30:	0dc0      	lsrs	r0, r0, #23
 8006d32:	4303      	orrs	r3, r0
 8006d34:	0252      	lsls	r2, r2, #9
 8006d36:	4313      	orrs	r3, r2
 8006d38:	01e2      	lsls	r2, r4, #7
 8006d3a:	d556      	bpl.n	8006dea <__aeabi_dmul+0x426>
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	085a      	lsrs	r2, r3, #1
 8006d40:	4003      	ands	r3, r0
 8006d42:	4313      	orrs	r3, r2
 8006d44:	07e2      	lsls	r2, r4, #31
 8006d46:	4313      	orrs	r3, r2
 8006d48:	0864      	lsrs	r4, r4, #1
 8006d4a:	485a      	ldr	r0, [pc, #360]	; (8006eb4 <__aeabi_dmul+0x4f0>)
 8006d4c:	4460      	add	r0, ip
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	dd4d      	ble.n	8006dee <__aeabi_dmul+0x42a>
 8006d52:	075a      	lsls	r2, r3, #29
 8006d54:	d009      	beq.n	8006d6a <__aeabi_dmul+0x3a6>
 8006d56:	220f      	movs	r2, #15
 8006d58:	401a      	ands	r2, r3
 8006d5a:	2a04      	cmp	r2, #4
 8006d5c:	d005      	beq.n	8006d6a <__aeabi_dmul+0x3a6>
 8006d5e:	1d1a      	adds	r2, r3, #4
 8006d60:	429a      	cmp	r2, r3
 8006d62:	419b      	sbcs	r3, r3
 8006d64:	425b      	negs	r3, r3
 8006d66:	18e4      	adds	r4, r4, r3
 8006d68:	0013      	movs	r3, r2
 8006d6a:	01e2      	lsls	r2, r4, #7
 8006d6c:	d504      	bpl.n	8006d78 <__aeabi_dmul+0x3b4>
 8006d6e:	2080      	movs	r0, #128	; 0x80
 8006d70:	4a51      	ldr	r2, [pc, #324]	; (8006eb8 <__aeabi_dmul+0x4f4>)
 8006d72:	00c0      	lsls	r0, r0, #3
 8006d74:	4014      	ands	r4, r2
 8006d76:	4460      	add	r0, ip
 8006d78:	4a50      	ldr	r2, [pc, #320]	; (8006ebc <__aeabi_dmul+0x4f8>)
 8006d7a:	4290      	cmp	r0, r2
 8006d7c:	dd00      	ble.n	8006d80 <__aeabi_dmul+0x3bc>
 8006d7e:	e6e3      	b.n	8006b48 <__aeabi_dmul+0x184>
 8006d80:	2501      	movs	r5, #1
 8006d82:	08db      	lsrs	r3, r3, #3
 8006d84:	0762      	lsls	r2, r4, #29
 8006d86:	431a      	orrs	r2, r3
 8006d88:	0264      	lsls	r4, r4, #9
 8006d8a:	9b01      	ldr	r3, [sp, #4]
 8006d8c:	4691      	mov	r9, r2
 8006d8e:	0b22      	lsrs	r2, r4, #12
 8006d90:	0544      	lsls	r4, r0, #21
 8006d92:	0d64      	lsrs	r4, r4, #21
 8006d94:	401d      	ands	r5, r3
 8006d96:	e67c      	b.n	8006a92 <__aeabi_dmul+0xce>
 8006d98:	2280      	movs	r2, #128	; 0x80
 8006d9a:	4659      	mov	r1, fp
 8006d9c:	0312      	lsls	r2, r2, #12
 8006d9e:	4211      	tst	r1, r2
 8006da0:	d008      	beq.n	8006db4 <__aeabi_dmul+0x3f0>
 8006da2:	4214      	tst	r4, r2
 8006da4:	d106      	bne.n	8006db4 <__aeabi_dmul+0x3f0>
 8006da6:	4322      	orrs	r2, r4
 8006da8:	0312      	lsls	r2, r2, #12
 8006daa:	0b12      	lsrs	r2, r2, #12
 8006dac:	4645      	mov	r5, r8
 8006dae:	4699      	mov	r9, r3
 8006db0:	4c43      	ldr	r4, [pc, #268]	; (8006ec0 <__aeabi_dmul+0x4fc>)
 8006db2:	e66e      	b.n	8006a92 <__aeabi_dmul+0xce>
 8006db4:	465b      	mov	r3, fp
 8006db6:	431a      	orrs	r2, r3
 8006db8:	0312      	lsls	r2, r2, #12
 8006dba:	0b12      	lsrs	r2, r2, #12
 8006dbc:	4c40      	ldr	r4, [pc, #256]	; (8006ec0 <__aeabi_dmul+0x4fc>)
 8006dbe:	e668      	b.n	8006a92 <__aeabi_dmul+0xce>
 8006dc0:	0003      	movs	r3, r0
 8006dc2:	4654      	mov	r4, sl
 8006dc4:	3b28      	subs	r3, #40	; 0x28
 8006dc6:	409c      	lsls	r4, r3
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e6b9      	b.n	8006b40 <__aeabi_dmul+0x17c>
 8006dcc:	f000 fd02 	bl	80077d4 <__clzsi2>
 8006dd0:	3020      	adds	r0, #32
 8006dd2:	e6a6      	b.n	8006b22 <__aeabi_dmul+0x15e>
 8006dd4:	0003      	movs	r3, r0
 8006dd6:	3b28      	subs	r3, #40	; 0x28
 8006dd8:	409f      	lsls	r7, r3
 8006dda:	2300      	movs	r3, #0
 8006ddc:	46bb      	mov	fp, r7
 8006dde:	4699      	mov	r9, r3
 8006de0:	e68a      	b.n	8006af8 <__aeabi_dmul+0x134>
 8006de2:	f000 fcf7 	bl	80077d4 <__clzsi2>
 8006de6:	3020      	adds	r0, #32
 8006de8:	e674      	b.n	8006ad4 <__aeabi_dmul+0x110>
 8006dea:	46b4      	mov	ip, r6
 8006dec:	e7ad      	b.n	8006d4a <__aeabi_dmul+0x386>
 8006dee:	2501      	movs	r5, #1
 8006df0:	1a2a      	subs	r2, r5, r0
 8006df2:	2a38      	cmp	r2, #56	; 0x38
 8006df4:	dd06      	ble.n	8006e04 <__aeabi_dmul+0x440>
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	2400      	movs	r4, #0
 8006dfa:	401d      	ands	r5, r3
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2200      	movs	r2, #0
 8006e00:	4699      	mov	r9, r3
 8006e02:	e646      	b.n	8006a92 <__aeabi_dmul+0xce>
 8006e04:	2a1f      	cmp	r2, #31
 8006e06:	dc21      	bgt.n	8006e4c <__aeabi_dmul+0x488>
 8006e08:	2520      	movs	r5, #32
 8006e0a:	0020      	movs	r0, r4
 8006e0c:	1aad      	subs	r5, r5, r2
 8006e0e:	001e      	movs	r6, r3
 8006e10:	40ab      	lsls	r3, r5
 8006e12:	40a8      	lsls	r0, r5
 8006e14:	40d6      	lsrs	r6, r2
 8006e16:	1e5d      	subs	r5, r3, #1
 8006e18:	41ab      	sbcs	r3, r5
 8006e1a:	4330      	orrs	r0, r6
 8006e1c:	4318      	orrs	r0, r3
 8006e1e:	40d4      	lsrs	r4, r2
 8006e20:	0743      	lsls	r3, r0, #29
 8006e22:	d009      	beq.n	8006e38 <__aeabi_dmul+0x474>
 8006e24:	230f      	movs	r3, #15
 8006e26:	4003      	ands	r3, r0
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d005      	beq.n	8006e38 <__aeabi_dmul+0x474>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	1d18      	adds	r0, r3, #4
 8006e30:	4298      	cmp	r0, r3
 8006e32:	419b      	sbcs	r3, r3
 8006e34:	425b      	negs	r3, r3
 8006e36:	18e4      	adds	r4, r4, r3
 8006e38:	0223      	lsls	r3, r4, #8
 8006e3a:	d521      	bpl.n	8006e80 <__aeabi_dmul+0x4bc>
 8006e3c:	2501      	movs	r5, #1
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	2401      	movs	r4, #1
 8006e42:	401d      	ands	r5, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	2200      	movs	r2, #0
 8006e48:	4699      	mov	r9, r3
 8006e4a:	e622      	b.n	8006a92 <__aeabi_dmul+0xce>
 8006e4c:	251f      	movs	r5, #31
 8006e4e:	0021      	movs	r1, r4
 8006e50:	426d      	negs	r5, r5
 8006e52:	1a28      	subs	r0, r5, r0
 8006e54:	40c1      	lsrs	r1, r0
 8006e56:	0008      	movs	r0, r1
 8006e58:	2a20      	cmp	r2, #32
 8006e5a:	d01d      	beq.n	8006e98 <__aeabi_dmul+0x4d4>
 8006e5c:	355f      	adds	r5, #95	; 0x5f
 8006e5e:	1aaa      	subs	r2, r5, r2
 8006e60:	4094      	lsls	r4, r2
 8006e62:	4323      	orrs	r3, r4
 8006e64:	1e5c      	subs	r4, r3, #1
 8006e66:	41a3      	sbcs	r3, r4
 8006e68:	2507      	movs	r5, #7
 8006e6a:	4303      	orrs	r3, r0
 8006e6c:	401d      	ands	r5, r3
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	d009      	beq.n	8006e88 <__aeabi_dmul+0x4c4>
 8006e74:	220f      	movs	r2, #15
 8006e76:	2400      	movs	r4, #0
 8006e78:	401a      	ands	r2, r3
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	2a04      	cmp	r2, #4
 8006e7e:	d1d6      	bne.n	8006e2e <__aeabi_dmul+0x46a>
 8006e80:	0003      	movs	r3, r0
 8006e82:	0765      	lsls	r5, r4, #29
 8006e84:	0264      	lsls	r4, r4, #9
 8006e86:	0b22      	lsrs	r2, r4, #12
 8006e88:	08db      	lsrs	r3, r3, #3
 8006e8a:	432b      	orrs	r3, r5
 8006e8c:	2501      	movs	r5, #1
 8006e8e:	4699      	mov	r9, r3
 8006e90:	9b01      	ldr	r3, [sp, #4]
 8006e92:	2400      	movs	r4, #0
 8006e94:	401d      	ands	r5, r3
 8006e96:	e5fc      	b.n	8006a92 <__aeabi_dmul+0xce>
 8006e98:	2400      	movs	r4, #0
 8006e9a:	e7e2      	b.n	8006e62 <__aeabi_dmul+0x49e>
 8006e9c:	2280      	movs	r2, #128	; 0x80
 8006e9e:	2501      	movs	r5, #1
 8006ea0:	0312      	lsls	r2, r2, #12
 8006ea2:	4322      	orrs	r2, r4
 8006ea4:	9901      	ldr	r1, [sp, #4]
 8006ea6:	0312      	lsls	r2, r2, #12
 8006ea8:	0b12      	lsrs	r2, r2, #12
 8006eaa:	400d      	ands	r5, r1
 8006eac:	4699      	mov	r9, r3
 8006eae:	4c04      	ldr	r4, [pc, #16]	; (8006ec0 <__aeabi_dmul+0x4fc>)
 8006eb0:	e5ef      	b.n	8006a92 <__aeabi_dmul+0xce>
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	000003ff 	.word	0x000003ff
 8006eb8:	feffffff 	.word	0xfeffffff
 8006ebc:	000007fe 	.word	0x000007fe
 8006ec0:	000007ff 	.word	0x000007ff

08006ec4 <__aeabi_dsub>:
 8006ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec6:	4646      	mov	r6, r8
 8006ec8:	46d6      	mov	lr, sl
 8006eca:	464f      	mov	r7, r9
 8006ecc:	030c      	lsls	r4, r1, #12
 8006ece:	b5c0      	push	{r6, r7, lr}
 8006ed0:	0fcd      	lsrs	r5, r1, #31
 8006ed2:	004e      	lsls	r6, r1, #1
 8006ed4:	0a61      	lsrs	r1, r4, #9
 8006ed6:	0f44      	lsrs	r4, r0, #29
 8006ed8:	430c      	orrs	r4, r1
 8006eda:	00c1      	lsls	r1, r0, #3
 8006edc:	0058      	lsls	r0, r3, #1
 8006ede:	0d40      	lsrs	r0, r0, #21
 8006ee0:	4684      	mov	ip, r0
 8006ee2:	468a      	mov	sl, r1
 8006ee4:	000f      	movs	r7, r1
 8006ee6:	0319      	lsls	r1, r3, #12
 8006ee8:	0f50      	lsrs	r0, r2, #29
 8006eea:	0a49      	lsrs	r1, r1, #9
 8006eec:	4301      	orrs	r1, r0
 8006eee:	48c6      	ldr	r0, [pc, #792]	; (8007208 <__aeabi_dsub+0x344>)
 8006ef0:	0d76      	lsrs	r6, r6, #21
 8006ef2:	46a8      	mov	r8, r5
 8006ef4:	0fdb      	lsrs	r3, r3, #31
 8006ef6:	00d2      	lsls	r2, r2, #3
 8006ef8:	4584      	cmp	ip, r0
 8006efa:	d100      	bne.n	8006efe <__aeabi_dsub+0x3a>
 8006efc:	e0d8      	b.n	80070b0 <__aeabi_dsub+0x1ec>
 8006efe:	2001      	movs	r0, #1
 8006f00:	4043      	eors	r3, r0
 8006f02:	42ab      	cmp	r3, r5
 8006f04:	d100      	bne.n	8006f08 <__aeabi_dsub+0x44>
 8006f06:	e0a6      	b.n	8007056 <__aeabi_dsub+0x192>
 8006f08:	4660      	mov	r0, ip
 8006f0a:	1a35      	subs	r5, r6, r0
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	dc00      	bgt.n	8006f12 <__aeabi_dsub+0x4e>
 8006f10:	e105      	b.n	800711e <__aeabi_dsub+0x25a>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	d110      	bne.n	8006f38 <__aeabi_dsub+0x74>
 8006f16:	000b      	movs	r3, r1
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	d100      	bne.n	8006f1e <__aeabi_dsub+0x5a>
 8006f1c:	e0d7      	b.n	80070ce <__aeabi_dsub+0x20a>
 8006f1e:	1e6b      	subs	r3, r5, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d000      	beq.n	8006f26 <__aeabi_dsub+0x62>
 8006f24:	e14b      	b.n	80071be <__aeabi_dsub+0x2fa>
 8006f26:	4653      	mov	r3, sl
 8006f28:	1a9f      	subs	r7, r3, r2
 8006f2a:	45ba      	cmp	sl, r7
 8006f2c:	4180      	sbcs	r0, r0
 8006f2e:	1a64      	subs	r4, r4, r1
 8006f30:	4240      	negs	r0, r0
 8006f32:	1a24      	subs	r4, r4, r0
 8006f34:	2601      	movs	r6, #1
 8006f36:	e01e      	b.n	8006f76 <__aeabi_dsub+0xb2>
 8006f38:	4bb3      	ldr	r3, [pc, #716]	; (8007208 <__aeabi_dsub+0x344>)
 8006f3a:	429e      	cmp	r6, r3
 8006f3c:	d048      	beq.n	8006fd0 <__aeabi_dsub+0x10c>
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	041b      	lsls	r3, r3, #16
 8006f42:	4319      	orrs	r1, r3
 8006f44:	2d38      	cmp	r5, #56	; 0x38
 8006f46:	dd00      	ble.n	8006f4a <__aeabi_dsub+0x86>
 8006f48:	e119      	b.n	800717e <__aeabi_dsub+0x2ba>
 8006f4a:	2d1f      	cmp	r5, #31
 8006f4c:	dd00      	ble.n	8006f50 <__aeabi_dsub+0x8c>
 8006f4e:	e14c      	b.n	80071ea <__aeabi_dsub+0x326>
 8006f50:	2320      	movs	r3, #32
 8006f52:	000f      	movs	r7, r1
 8006f54:	1b5b      	subs	r3, r3, r5
 8006f56:	0010      	movs	r0, r2
 8006f58:	409a      	lsls	r2, r3
 8006f5a:	409f      	lsls	r7, r3
 8006f5c:	40e8      	lsrs	r0, r5
 8006f5e:	1e53      	subs	r3, r2, #1
 8006f60:	419a      	sbcs	r2, r3
 8006f62:	40e9      	lsrs	r1, r5
 8006f64:	4307      	orrs	r7, r0
 8006f66:	4317      	orrs	r7, r2
 8006f68:	4653      	mov	r3, sl
 8006f6a:	1bdf      	subs	r7, r3, r7
 8006f6c:	1a61      	subs	r1, r4, r1
 8006f6e:	45ba      	cmp	sl, r7
 8006f70:	41a4      	sbcs	r4, r4
 8006f72:	4264      	negs	r4, r4
 8006f74:	1b0c      	subs	r4, r1, r4
 8006f76:	0223      	lsls	r3, r4, #8
 8006f78:	d400      	bmi.n	8006f7c <__aeabi_dsub+0xb8>
 8006f7a:	e0c5      	b.n	8007108 <__aeabi_dsub+0x244>
 8006f7c:	0264      	lsls	r4, r4, #9
 8006f7e:	0a65      	lsrs	r5, r4, #9
 8006f80:	2d00      	cmp	r5, #0
 8006f82:	d100      	bne.n	8006f86 <__aeabi_dsub+0xc2>
 8006f84:	e0f6      	b.n	8007174 <__aeabi_dsub+0x2b0>
 8006f86:	0028      	movs	r0, r5
 8006f88:	f000 fc24 	bl	80077d4 <__clzsi2>
 8006f8c:	0003      	movs	r3, r0
 8006f8e:	3b08      	subs	r3, #8
 8006f90:	2b1f      	cmp	r3, #31
 8006f92:	dd00      	ble.n	8006f96 <__aeabi_dsub+0xd2>
 8006f94:	e0e9      	b.n	800716a <__aeabi_dsub+0x2a6>
 8006f96:	2220      	movs	r2, #32
 8006f98:	003c      	movs	r4, r7
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	409d      	lsls	r5, r3
 8006f9e:	40d4      	lsrs	r4, r2
 8006fa0:	409f      	lsls	r7, r3
 8006fa2:	4325      	orrs	r5, r4
 8006fa4:	429e      	cmp	r6, r3
 8006fa6:	dd00      	ble.n	8006faa <__aeabi_dsub+0xe6>
 8006fa8:	e0db      	b.n	8007162 <__aeabi_dsub+0x29e>
 8006faa:	1b9e      	subs	r6, r3, r6
 8006fac:	1c73      	adds	r3, r6, #1
 8006fae:	2b1f      	cmp	r3, #31
 8006fb0:	dd00      	ble.n	8006fb4 <__aeabi_dsub+0xf0>
 8006fb2:	e10a      	b.n	80071ca <__aeabi_dsub+0x306>
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	0038      	movs	r0, r7
 8006fb8:	1ad2      	subs	r2, r2, r3
 8006fba:	0029      	movs	r1, r5
 8006fbc:	4097      	lsls	r7, r2
 8006fbe:	002c      	movs	r4, r5
 8006fc0:	4091      	lsls	r1, r2
 8006fc2:	40d8      	lsrs	r0, r3
 8006fc4:	1e7a      	subs	r2, r7, #1
 8006fc6:	4197      	sbcs	r7, r2
 8006fc8:	40dc      	lsrs	r4, r3
 8006fca:	2600      	movs	r6, #0
 8006fcc:	4301      	orrs	r1, r0
 8006fce:	430f      	orrs	r7, r1
 8006fd0:	077b      	lsls	r3, r7, #29
 8006fd2:	d009      	beq.n	8006fe8 <__aeabi_dsub+0x124>
 8006fd4:	230f      	movs	r3, #15
 8006fd6:	403b      	ands	r3, r7
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d005      	beq.n	8006fe8 <__aeabi_dsub+0x124>
 8006fdc:	1d3b      	adds	r3, r7, #4
 8006fde:	42bb      	cmp	r3, r7
 8006fe0:	41bf      	sbcs	r7, r7
 8006fe2:	427f      	negs	r7, r7
 8006fe4:	19e4      	adds	r4, r4, r7
 8006fe6:	001f      	movs	r7, r3
 8006fe8:	0223      	lsls	r3, r4, #8
 8006fea:	d525      	bpl.n	8007038 <__aeabi_dsub+0x174>
 8006fec:	4b86      	ldr	r3, [pc, #536]	; (8007208 <__aeabi_dsub+0x344>)
 8006fee:	3601      	adds	r6, #1
 8006ff0:	429e      	cmp	r6, r3
 8006ff2:	d100      	bne.n	8006ff6 <__aeabi_dsub+0x132>
 8006ff4:	e0af      	b.n	8007156 <__aeabi_dsub+0x292>
 8006ff6:	4b85      	ldr	r3, [pc, #532]	; (800720c <__aeabi_dsub+0x348>)
 8006ff8:	2501      	movs	r5, #1
 8006ffa:	401c      	ands	r4, r3
 8006ffc:	4643      	mov	r3, r8
 8006ffe:	0762      	lsls	r2, r4, #29
 8007000:	08ff      	lsrs	r7, r7, #3
 8007002:	0264      	lsls	r4, r4, #9
 8007004:	0576      	lsls	r6, r6, #21
 8007006:	4317      	orrs	r7, r2
 8007008:	0b24      	lsrs	r4, r4, #12
 800700a:	0d76      	lsrs	r6, r6, #21
 800700c:	401d      	ands	r5, r3
 800700e:	2100      	movs	r1, #0
 8007010:	0324      	lsls	r4, r4, #12
 8007012:	0b23      	lsrs	r3, r4, #12
 8007014:	0d0c      	lsrs	r4, r1, #20
 8007016:	4a7e      	ldr	r2, [pc, #504]	; (8007210 <__aeabi_dsub+0x34c>)
 8007018:	0524      	lsls	r4, r4, #20
 800701a:	431c      	orrs	r4, r3
 800701c:	4014      	ands	r4, r2
 800701e:	0533      	lsls	r3, r6, #20
 8007020:	4323      	orrs	r3, r4
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	07ed      	lsls	r5, r5, #31
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	432b      	orrs	r3, r5
 800702a:	0038      	movs	r0, r7
 800702c:	0019      	movs	r1, r3
 800702e:	bc1c      	pop	{r2, r3, r4}
 8007030:	4690      	mov	r8, r2
 8007032:	4699      	mov	r9, r3
 8007034:	46a2      	mov	sl, r4
 8007036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007038:	2501      	movs	r5, #1
 800703a:	4643      	mov	r3, r8
 800703c:	0762      	lsls	r2, r4, #29
 800703e:	08ff      	lsrs	r7, r7, #3
 8007040:	4317      	orrs	r7, r2
 8007042:	08e4      	lsrs	r4, r4, #3
 8007044:	401d      	ands	r5, r3
 8007046:	4b70      	ldr	r3, [pc, #448]	; (8007208 <__aeabi_dsub+0x344>)
 8007048:	429e      	cmp	r6, r3
 800704a:	d036      	beq.n	80070ba <__aeabi_dsub+0x1f6>
 800704c:	0324      	lsls	r4, r4, #12
 800704e:	0576      	lsls	r6, r6, #21
 8007050:	0b24      	lsrs	r4, r4, #12
 8007052:	0d76      	lsrs	r6, r6, #21
 8007054:	e7db      	b.n	800700e <__aeabi_dsub+0x14a>
 8007056:	4663      	mov	r3, ip
 8007058:	1af3      	subs	r3, r6, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	dc00      	bgt.n	8007060 <__aeabi_dsub+0x19c>
 800705e:	e094      	b.n	800718a <__aeabi_dsub+0x2c6>
 8007060:	4660      	mov	r0, ip
 8007062:	2800      	cmp	r0, #0
 8007064:	d035      	beq.n	80070d2 <__aeabi_dsub+0x20e>
 8007066:	4868      	ldr	r0, [pc, #416]	; (8007208 <__aeabi_dsub+0x344>)
 8007068:	4286      	cmp	r6, r0
 800706a:	d0b1      	beq.n	8006fd0 <__aeabi_dsub+0x10c>
 800706c:	2780      	movs	r7, #128	; 0x80
 800706e:	043f      	lsls	r7, r7, #16
 8007070:	4339      	orrs	r1, r7
 8007072:	2b38      	cmp	r3, #56	; 0x38
 8007074:	dc00      	bgt.n	8007078 <__aeabi_dsub+0x1b4>
 8007076:	e0fd      	b.n	8007274 <__aeabi_dsub+0x3b0>
 8007078:	430a      	orrs	r2, r1
 800707a:	0017      	movs	r7, r2
 800707c:	2100      	movs	r1, #0
 800707e:	1e7a      	subs	r2, r7, #1
 8007080:	4197      	sbcs	r7, r2
 8007082:	4457      	add	r7, sl
 8007084:	4557      	cmp	r7, sl
 8007086:	4180      	sbcs	r0, r0
 8007088:	1909      	adds	r1, r1, r4
 800708a:	4244      	negs	r4, r0
 800708c:	190c      	adds	r4, r1, r4
 800708e:	0223      	lsls	r3, r4, #8
 8007090:	d53a      	bpl.n	8007108 <__aeabi_dsub+0x244>
 8007092:	4b5d      	ldr	r3, [pc, #372]	; (8007208 <__aeabi_dsub+0x344>)
 8007094:	3601      	adds	r6, #1
 8007096:	429e      	cmp	r6, r3
 8007098:	d100      	bne.n	800709c <__aeabi_dsub+0x1d8>
 800709a:	e14b      	b.n	8007334 <__aeabi_dsub+0x470>
 800709c:	2201      	movs	r2, #1
 800709e:	4b5b      	ldr	r3, [pc, #364]	; (800720c <__aeabi_dsub+0x348>)
 80070a0:	401c      	ands	r4, r3
 80070a2:	087b      	lsrs	r3, r7, #1
 80070a4:	4017      	ands	r7, r2
 80070a6:	431f      	orrs	r7, r3
 80070a8:	07e2      	lsls	r2, r4, #31
 80070aa:	4317      	orrs	r7, r2
 80070ac:	0864      	lsrs	r4, r4, #1
 80070ae:	e78f      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80070b0:	0008      	movs	r0, r1
 80070b2:	4310      	orrs	r0, r2
 80070b4:	d000      	beq.n	80070b8 <__aeabi_dsub+0x1f4>
 80070b6:	e724      	b.n	8006f02 <__aeabi_dsub+0x3e>
 80070b8:	e721      	b.n	8006efe <__aeabi_dsub+0x3a>
 80070ba:	0023      	movs	r3, r4
 80070bc:	433b      	orrs	r3, r7
 80070be:	d100      	bne.n	80070c2 <__aeabi_dsub+0x1fe>
 80070c0:	e1b9      	b.n	8007436 <__aeabi_dsub+0x572>
 80070c2:	2280      	movs	r2, #128	; 0x80
 80070c4:	0312      	lsls	r2, r2, #12
 80070c6:	4314      	orrs	r4, r2
 80070c8:	0324      	lsls	r4, r4, #12
 80070ca:	0b24      	lsrs	r4, r4, #12
 80070cc:	e79f      	b.n	800700e <__aeabi_dsub+0x14a>
 80070ce:	002e      	movs	r6, r5
 80070d0:	e77e      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80070d2:	0008      	movs	r0, r1
 80070d4:	4310      	orrs	r0, r2
 80070d6:	d100      	bne.n	80070da <__aeabi_dsub+0x216>
 80070d8:	e0ca      	b.n	8007270 <__aeabi_dsub+0x3ac>
 80070da:	1e58      	subs	r0, r3, #1
 80070dc:	4684      	mov	ip, r0
 80070de:	2800      	cmp	r0, #0
 80070e0:	d000      	beq.n	80070e4 <__aeabi_dsub+0x220>
 80070e2:	e0e7      	b.n	80072b4 <__aeabi_dsub+0x3f0>
 80070e4:	4452      	add	r2, sl
 80070e6:	4552      	cmp	r2, sl
 80070e8:	4180      	sbcs	r0, r0
 80070ea:	1864      	adds	r4, r4, r1
 80070ec:	4240      	negs	r0, r0
 80070ee:	1824      	adds	r4, r4, r0
 80070f0:	0017      	movs	r7, r2
 80070f2:	2601      	movs	r6, #1
 80070f4:	0223      	lsls	r3, r4, #8
 80070f6:	d507      	bpl.n	8007108 <__aeabi_dsub+0x244>
 80070f8:	2602      	movs	r6, #2
 80070fa:	e7cf      	b.n	800709c <__aeabi_dsub+0x1d8>
 80070fc:	4664      	mov	r4, ip
 80070fe:	432c      	orrs	r4, r5
 8007100:	d100      	bne.n	8007104 <__aeabi_dsub+0x240>
 8007102:	e1b3      	b.n	800746c <__aeabi_dsub+0x5a8>
 8007104:	002c      	movs	r4, r5
 8007106:	4667      	mov	r7, ip
 8007108:	077b      	lsls	r3, r7, #29
 800710a:	d000      	beq.n	800710e <__aeabi_dsub+0x24a>
 800710c:	e762      	b.n	8006fd4 <__aeabi_dsub+0x110>
 800710e:	0763      	lsls	r3, r4, #29
 8007110:	08ff      	lsrs	r7, r7, #3
 8007112:	431f      	orrs	r7, r3
 8007114:	2501      	movs	r5, #1
 8007116:	4643      	mov	r3, r8
 8007118:	08e4      	lsrs	r4, r4, #3
 800711a:	401d      	ands	r5, r3
 800711c:	e793      	b.n	8007046 <__aeabi_dsub+0x182>
 800711e:	2d00      	cmp	r5, #0
 8007120:	d178      	bne.n	8007214 <__aeabi_dsub+0x350>
 8007122:	1c75      	adds	r5, r6, #1
 8007124:	056d      	lsls	r5, r5, #21
 8007126:	0d6d      	lsrs	r5, r5, #21
 8007128:	2d01      	cmp	r5, #1
 800712a:	dc00      	bgt.n	800712e <__aeabi_dsub+0x26a>
 800712c:	e0f2      	b.n	8007314 <__aeabi_dsub+0x450>
 800712e:	4650      	mov	r0, sl
 8007130:	1a80      	subs	r0, r0, r2
 8007132:	4582      	cmp	sl, r0
 8007134:	41bf      	sbcs	r7, r7
 8007136:	1a65      	subs	r5, r4, r1
 8007138:	427f      	negs	r7, r7
 800713a:	1bed      	subs	r5, r5, r7
 800713c:	4684      	mov	ip, r0
 800713e:	0228      	lsls	r0, r5, #8
 8007140:	d400      	bmi.n	8007144 <__aeabi_dsub+0x280>
 8007142:	e08c      	b.n	800725e <__aeabi_dsub+0x39a>
 8007144:	4650      	mov	r0, sl
 8007146:	1a17      	subs	r7, r2, r0
 8007148:	42ba      	cmp	r2, r7
 800714a:	4192      	sbcs	r2, r2
 800714c:	1b0c      	subs	r4, r1, r4
 800714e:	4255      	negs	r5, r2
 8007150:	1b65      	subs	r5, r4, r5
 8007152:	4698      	mov	r8, r3
 8007154:	e714      	b.n	8006f80 <__aeabi_dsub+0xbc>
 8007156:	2501      	movs	r5, #1
 8007158:	4643      	mov	r3, r8
 800715a:	2400      	movs	r4, #0
 800715c:	401d      	ands	r5, r3
 800715e:	2700      	movs	r7, #0
 8007160:	e755      	b.n	800700e <__aeabi_dsub+0x14a>
 8007162:	4c2a      	ldr	r4, [pc, #168]	; (800720c <__aeabi_dsub+0x348>)
 8007164:	1af6      	subs	r6, r6, r3
 8007166:	402c      	ands	r4, r5
 8007168:	e732      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 800716a:	003d      	movs	r5, r7
 800716c:	3828      	subs	r0, #40	; 0x28
 800716e:	4085      	lsls	r5, r0
 8007170:	2700      	movs	r7, #0
 8007172:	e717      	b.n	8006fa4 <__aeabi_dsub+0xe0>
 8007174:	0038      	movs	r0, r7
 8007176:	f000 fb2d 	bl	80077d4 <__clzsi2>
 800717a:	3020      	adds	r0, #32
 800717c:	e706      	b.n	8006f8c <__aeabi_dsub+0xc8>
 800717e:	430a      	orrs	r2, r1
 8007180:	0017      	movs	r7, r2
 8007182:	2100      	movs	r1, #0
 8007184:	1e7a      	subs	r2, r7, #1
 8007186:	4197      	sbcs	r7, r2
 8007188:	e6ee      	b.n	8006f68 <__aeabi_dsub+0xa4>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d000      	beq.n	8007190 <__aeabi_dsub+0x2cc>
 800718e:	e0e5      	b.n	800735c <__aeabi_dsub+0x498>
 8007190:	1c73      	adds	r3, r6, #1
 8007192:	469c      	mov	ip, r3
 8007194:	055b      	lsls	r3, r3, #21
 8007196:	0d5b      	lsrs	r3, r3, #21
 8007198:	2b01      	cmp	r3, #1
 800719a:	dc00      	bgt.n	800719e <__aeabi_dsub+0x2da>
 800719c:	e09f      	b.n	80072de <__aeabi_dsub+0x41a>
 800719e:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <__aeabi_dsub+0x344>)
 80071a0:	459c      	cmp	ip, r3
 80071a2:	d100      	bne.n	80071a6 <__aeabi_dsub+0x2e2>
 80071a4:	e0c5      	b.n	8007332 <__aeabi_dsub+0x46e>
 80071a6:	4452      	add	r2, sl
 80071a8:	4552      	cmp	r2, sl
 80071aa:	4180      	sbcs	r0, r0
 80071ac:	1864      	adds	r4, r4, r1
 80071ae:	4240      	negs	r0, r0
 80071b0:	1824      	adds	r4, r4, r0
 80071b2:	07e7      	lsls	r7, r4, #31
 80071b4:	0852      	lsrs	r2, r2, #1
 80071b6:	4317      	orrs	r7, r2
 80071b8:	0864      	lsrs	r4, r4, #1
 80071ba:	4666      	mov	r6, ip
 80071bc:	e708      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80071be:	4812      	ldr	r0, [pc, #72]	; (8007208 <__aeabi_dsub+0x344>)
 80071c0:	4285      	cmp	r5, r0
 80071c2:	d100      	bne.n	80071c6 <__aeabi_dsub+0x302>
 80071c4:	e085      	b.n	80072d2 <__aeabi_dsub+0x40e>
 80071c6:	001d      	movs	r5, r3
 80071c8:	e6bc      	b.n	8006f44 <__aeabi_dsub+0x80>
 80071ca:	0029      	movs	r1, r5
 80071cc:	3e1f      	subs	r6, #31
 80071ce:	40f1      	lsrs	r1, r6
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d100      	bne.n	80071d6 <__aeabi_dsub+0x312>
 80071d4:	e07f      	b.n	80072d6 <__aeabi_dsub+0x412>
 80071d6:	2240      	movs	r2, #64	; 0x40
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	409d      	lsls	r5, r3
 80071dc:	432f      	orrs	r7, r5
 80071de:	1e7d      	subs	r5, r7, #1
 80071e0:	41af      	sbcs	r7, r5
 80071e2:	2400      	movs	r4, #0
 80071e4:	430f      	orrs	r7, r1
 80071e6:	2600      	movs	r6, #0
 80071e8:	e78e      	b.n	8007108 <__aeabi_dsub+0x244>
 80071ea:	002b      	movs	r3, r5
 80071ec:	000f      	movs	r7, r1
 80071ee:	3b20      	subs	r3, #32
 80071f0:	40df      	lsrs	r7, r3
 80071f2:	2d20      	cmp	r5, #32
 80071f4:	d071      	beq.n	80072da <__aeabi_dsub+0x416>
 80071f6:	2340      	movs	r3, #64	; 0x40
 80071f8:	1b5d      	subs	r5, r3, r5
 80071fa:	40a9      	lsls	r1, r5
 80071fc:	430a      	orrs	r2, r1
 80071fe:	1e51      	subs	r1, r2, #1
 8007200:	418a      	sbcs	r2, r1
 8007202:	2100      	movs	r1, #0
 8007204:	4317      	orrs	r7, r2
 8007206:	e6af      	b.n	8006f68 <__aeabi_dsub+0xa4>
 8007208:	000007ff 	.word	0x000007ff
 800720c:	ff7fffff 	.word	0xff7fffff
 8007210:	800fffff 	.word	0x800fffff
 8007214:	2e00      	cmp	r6, #0
 8007216:	d03e      	beq.n	8007296 <__aeabi_dsub+0x3d2>
 8007218:	4eb3      	ldr	r6, [pc, #716]	; (80074e8 <__aeabi_dsub+0x624>)
 800721a:	45b4      	cmp	ip, r6
 800721c:	d045      	beq.n	80072aa <__aeabi_dsub+0x3e6>
 800721e:	2680      	movs	r6, #128	; 0x80
 8007220:	0436      	lsls	r6, r6, #16
 8007222:	426d      	negs	r5, r5
 8007224:	4334      	orrs	r4, r6
 8007226:	2d38      	cmp	r5, #56	; 0x38
 8007228:	dd00      	ble.n	800722c <__aeabi_dsub+0x368>
 800722a:	e0a8      	b.n	800737e <__aeabi_dsub+0x4ba>
 800722c:	2d1f      	cmp	r5, #31
 800722e:	dd00      	ble.n	8007232 <__aeabi_dsub+0x36e>
 8007230:	e11f      	b.n	8007472 <__aeabi_dsub+0x5ae>
 8007232:	2620      	movs	r6, #32
 8007234:	0027      	movs	r7, r4
 8007236:	4650      	mov	r0, sl
 8007238:	1b76      	subs	r6, r6, r5
 800723a:	40b7      	lsls	r7, r6
 800723c:	40e8      	lsrs	r0, r5
 800723e:	4307      	orrs	r7, r0
 8007240:	4650      	mov	r0, sl
 8007242:	40b0      	lsls	r0, r6
 8007244:	1e46      	subs	r6, r0, #1
 8007246:	41b0      	sbcs	r0, r6
 8007248:	40ec      	lsrs	r4, r5
 800724a:	4338      	orrs	r0, r7
 800724c:	1a17      	subs	r7, r2, r0
 800724e:	42ba      	cmp	r2, r7
 8007250:	4192      	sbcs	r2, r2
 8007252:	1b0c      	subs	r4, r1, r4
 8007254:	4252      	negs	r2, r2
 8007256:	1aa4      	subs	r4, r4, r2
 8007258:	4666      	mov	r6, ip
 800725a:	4698      	mov	r8, r3
 800725c:	e68b      	b.n	8006f76 <__aeabi_dsub+0xb2>
 800725e:	4664      	mov	r4, ip
 8007260:	4667      	mov	r7, ip
 8007262:	432c      	orrs	r4, r5
 8007264:	d000      	beq.n	8007268 <__aeabi_dsub+0x3a4>
 8007266:	e68b      	b.n	8006f80 <__aeabi_dsub+0xbc>
 8007268:	2500      	movs	r5, #0
 800726a:	2600      	movs	r6, #0
 800726c:	2700      	movs	r7, #0
 800726e:	e6ea      	b.n	8007046 <__aeabi_dsub+0x182>
 8007270:	001e      	movs	r6, r3
 8007272:	e6ad      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 8007274:	2b1f      	cmp	r3, #31
 8007276:	dc60      	bgt.n	800733a <__aeabi_dsub+0x476>
 8007278:	2720      	movs	r7, #32
 800727a:	1af8      	subs	r0, r7, r3
 800727c:	000f      	movs	r7, r1
 800727e:	4684      	mov	ip, r0
 8007280:	4087      	lsls	r7, r0
 8007282:	0010      	movs	r0, r2
 8007284:	40d8      	lsrs	r0, r3
 8007286:	4307      	orrs	r7, r0
 8007288:	4660      	mov	r0, ip
 800728a:	4082      	lsls	r2, r0
 800728c:	1e50      	subs	r0, r2, #1
 800728e:	4182      	sbcs	r2, r0
 8007290:	40d9      	lsrs	r1, r3
 8007292:	4317      	orrs	r7, r2
 8007294:	e6f5      	b.n	8007082 <__aeabi_dsub+0x1be>
 8007296:	0026      	movs	r6, r4
 8007298:	4650      	mov	r0, sl
 800729a:	4306      	orrs	r6, r0
 800729c:	d005      	beq.n	80072aa <__aeabi_dsub+0x3e6>
 800729e:	43ed      	mvns	r5, r5
 80072a0:	2d00      	cmp	r5, #0
 80072a2:	d0d3      	beq.n	800724c <__aeabi_dsub+0x388>
 80072a4:	4e90      	ldr	r6, [pc, #576]	; (80074e8 <__aeabi_dsub+0x624>)
 80072a6:	45b4      	cmp	ip, r6
 80072a8:	d1bd      	bne.n	8007226 <__aeabi_dsub+0x362>
 80072aa:	000c      	movs	r4, r1
 80072ac:	0017      	movs	r7, r2
 80072ae:	4666      	mov	r6, ip
 80072b0:	4698      	mov	r8, r3
 80072b2:	e68d      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80072b4:	488c      	ldr	r0, [pc, #560]	; (80074e8 <__aeabi_dsub+0x624>)
 80072b6:	4283      	cmp	r3, r0
 80072b8:	d00b      	beq.n	80072d2 <__aeabi_dsub+0x40e>
 80072ba:	4663      	mov	r3, ip
 80072bc:	e6d9      	b.n	8007072 <__aeabi_dsub+0x1ae>
 80072be:	2d00      	cmp	r5, #0
 80072c0:	d000      	beq.n	80072c4 <__aeabi_dsub+0x400>
 80072c2:	e096      	b.n	80073f2 <__aeabi_dsub+0x52e>
 80072c4:	0008      	movs	r0, r1
 80072c6:	4310      	orrs	r0, r2
 80072c8:	d100      	bne.n	80072cc <__aeabi_dsub+0x408>
 80072ca:	e0e2      	b.n	8007492 <__aeabi_dsub+0x5ce>
 80072cc:	000c      	movs	r4, r1
 80072ce:	0017      	movs	r7, r2
 80072d0:	4698      	mov	r8, r3
 80072d2:	4e85      	ldr	r6, [pc, #532]	; (80074e8 <__aeabi_dsub+0x624>)
 80072d4:	e67c      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80072d6:	2500      	movs	r5, #0
 80072d8:	e780      	b.n	80071dc <__aeabi_dsub+0x318>
 80072da:	2100      	movs	r1, #0
 80072dc:	e78e      	b.n	80071fc <__aeabi_dsub+0x338>
 80072de:	0023      	movs	r3, r4
 80072e0:	4650      	mov	r0, sl
 80072e2:	4303      	orrs	r3, r0
 80072e4:	2e00      	cmp	r6, #0
 80072e6:	d000      	beq.n	80072ea <__aeabi_dsub+0x426>
 80072e8:	e0a8      	b.n	800743c <__aeabi_dsub+0x578>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d100      	bne.n	80072f0 <__aeabi_dsub+0x42c>
 80072ee:	e0de      	b.n	80074ae <__aeabi_dsub+0x5ea>
 80072f0:	000b      	movs	r3, r1
 80072f2:	4313      	orrs	r3, r2
 80072f4:	d100      	bne.n	80072f8 <__aeabi_dsub+0x434>
 80072f6:	e66b      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80072f8:	4452      	add	r2, sl
 80072fa:	4552      	cmp	r2, sl
 80072fc:	4180      	sbcs	r0, r0
 80072fe:	1864      	adds	r4, r4, r1
 8007300:	4240      	negs	r0, r0
 8007302:	1824      	adds	r4, r4, r0
 8007304:	0017      	movs	r7, r2
 8007306:	0223      	lsls	r3, r4, #8
 8007308:	d400      	bmi.n	800730c <__aeabi_dsub+0x448>
 800730a:	e6fd      	b.n	8007108 <__aeabi_dsub+0x244>
 800730c:	4b77      	ldr	r3, [pc, #476]	; (80074ec <__aeabi_dsub+0x628>)
 800730e:	4666      	mov	r6, ip
 8007310:	401c      	ands	r4, r3
 8007312:	e65d      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 8007314:	0025      	movs	r5, r4
 8007316:	4650      	mov	r0, sl
 8007318:	4305      	orrs	r5, r0
 800731a:	2e00      	cmp	r6, #0
 800731c:	d1cf      	bne.n	80072be <__aeabi_dsub+0x3fa>
 800731e:	2d00      	cmp	r5, #0
 8007320:	d14f      	bne.n	80073c2 <__aeabi_dsub+0x4fe>
 8007322:	000c      	movs	r4, r1
 8007324:	4314      	orrs	r4, r2
 8007326:	d100      	bne.n	800732a <__aeabi_dsub+0x466>
 8007328:	e0a0      	b.n	800746c <__aeabi_dsub+0x5a8>
 800732a:	000c      	movs	r4, r1
 800732c:	0017      	movs	r7, r2
 800732e:	4698      	mov	r8, r3
 8007330:	e64e      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 8007332:	4666      	mov	r6, ip
 8007334:	2400      	movs	r4, #0
 8007336:	2700      	movs	r7, #0
 8007338:	e685      	b.n	8007046 <__aeabi_dsub+0x182>
 800733a:	001f      	movs	r7, r3
 800733c:	0008      	movs	r0, r1
 800733e:	3f20      	subs	r7, #32
 8007340:	40f8      	lsrs	r0, r7
 8007342:	0007      	movs	r7, r0
 8007344:	2b20      	cmp	r3, #32
 8007346:	d100      	bne.n	800734a <__aeabi_dsub+0x486>
 8007348:	e08e      	b.n	8007468 <__aeabi_dsub+0x5a4>
 800734a:	2040      	movs	r0, #64	; 0x40
 800734c:	1ac3      	subs	r3, r0, r3
 800734e:	4099      	lsls	r1, r3
 8007350:	430a      	orrs	r2, r1
 8007352:	1e51      	subs	r1, r2, #1
 8007354:	418a      	sbcs	r2, r1
 8007356:	2100      	movs	r1, #0
 8007358:	4317      	orrs	r7, r2
 800735a:	e692      	b.n	8007082 <__aeabi_dsub+0x1be>
 800735c:	2e00      	cmp	r6, #0
 800735e:	d114      	bne.n	800738a <__aeabi_dsub+0x4c6>
 8007360:	0026      	movs	r6, r4
 8007362:	4650      	mov	r0, sl
 8007364:	4306      	orrs	r6, r0
 8007366:	d062      	beq.n	800742e <__aeabi_dsub+0x56a>
 8007368:	43db      	mvns	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d15c      	bne.n	8007428 <__aeabi_dsub+0x564>
 800736e:	1887      	adds	r7, r0, r2
 8007370:	4297      	cmp	r7, r2
 8007372:	4192      	sbcs	r2, r2
 8007374:	1864      	adds	r4, r4, r1
 8007376:	4252      	negs	r2, r2
 8007378:	18a4      	adds	r4, r4, r2
 800737a:	4666      	mov	r6, ip
 800737c:	e687      	b.n	800708e <__aeabi_dsub+0x1ca>
 800737e:	4650      	mov	r0, sl
 8007380:	4320      	orrs	r0, r4
 8007382:	1e44      	subs	r4, r0, #1
 8007384:	41a0      	sbcs	r0, r4
 8007386:	2400      	movs	r4, #0
 8007388:	e760      	b.n	800724c <__aeabi_dsub+0x388>
 800738a:	4e57      	ldr	r6, [pc, #348]	; (80074e8 <__aeabi_dsub+0x624>)
 800738c:	45b4      	cmp	ip, r6
 800738e:	d04e      	beq.n	800742e <__aeabi_dsub+0x56a>
 8007390:	2680      	movs	r6, #128	; 0x80
 8007392:	0436      	lsls	r6, r6, #16
 8007394:	425b      	negs	r3, r3
 8007396:	4334      	orrs	r4, r6
 8007398:	2b38      	cmp	r3, #56	; 0x38
 800739a:	dd00      	ble.n	800739e <__aeabi_dsub+0x4da>
 800739c:	e07f      	b.n	800749e <__aeabi_dsub+0x5da>
 800739e:	2b1f      	cmp	r3, #31
 80073a0:	dd00      	ble.n	80073a4 <__aeabi_dsub+0x4e0>
 80073a2:	e08b      	b.n	80074bc <__aeabi_dsub+0x5f8>
 80073a4:	2620      	movs	r6, #32
 80073a6:	0027      	movs	r7, r4
 80073a8:	4650      	mov	r0, sl
 80073aa:	1af6      	subs	r6, r6, r3
 80073ac:	40b7      	lsls	r7, r6
 80073ae:	40d8      	lsrs	r0, r3
 80073b0:	4307      	orrs	r7, r0
 80073b2:	4650      	mov	r0, sl
 80073b4:	40b0      	lsls	r0, r6
 80073b6:	1e46      	subs	r6, r0, #1
 80073b8:	41b0      	sbcs	r0, r6
 80073ba:	4307      	orrs	r7, r0
 80073bc:	40dc      	lsrs	r4, r3
 80073be:	18bf      	adds	r7, r7, r2
 80073c0:	e7d6      	b.n	8007370 <__aeabi_dsub+0x4ac>
 80073c2:	000d      	movs	r5, r1
 80073c4:	4315      	orrs	r5, r2
 80073c6:	d100      	bne.n	80073ca <__aeabi_dsub+0x506>
 80073c8:	e602      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80073ca:	4650      	mov	r0, sl
 80073cc:	1a80      	subs	r0, r0, r2
 80073ce:	4582      	cmp	sl, r0
 80073d0:	41bf      	sbcs	r7, r7
 80073d2:	1a65      	subs	r5, r4, r1
 80073d4:	427f      	negs	r7, r7
 80073d6:	1bed      	subs	r5, r5, r7
 80073d8:	4684      	mov	ip, r0
 80073da:	0228      	lsls	r0, r5, #8
 80073dc:	d400      	bmi.n	80073e0 <__aeabi_dsub+0x51c>
 80073de:	e68d      	b.n	80070fc <__aeabi_dsub+0x238>
 80073e0:	4650      	mov	r0, sl
 80073e2:	1a17      	subs	r7, r2, r0
 80073e4:	42ba      	cmp	r2, r7
 80073e6:	4192      	sbcs	r2, r2
 80073e8:	1b0c      	subs	r4, r1, r4
 80073ea:	4252      	negs	r2, r2
 80073ec:	1aa4      	subs	r4, r4, r2
 80073ee:	4698      	mov	r8, r3
 80073f0:	e5ee      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80073f2:	000d      	movs	r5, r1
 80073f4:	4315      	orrs	r5, r2
 80073f6:	d100      	bne.n	80073fa <__aeabi_dsub+0x536>
 80073f8:	e76b      	b.n	80072d2 <__aeabi_dsub+0x40e>
 80073fa:	4650      	mov	r0, sl
 80073fc:	0767      	lsls	r7, r4, #29
 80073fe:	08c0      	lsrs	r0, r0, #3
 8007400:	4307      	orrs	r7, r0
 8007402:	2080      	movs	r0, #128	; 0x80
 8007404:	08e4      	lsrs	r4, r4, #3
 8007406:	0300      	lsls	r0, r0, #12
 8007408:	4204      	tst	r4, r0
 800740a:	d007      	beq.n	800741c <__aeabi_dsub+0x558>
 800740c:	08cd      	lsrs	r5, r1, #3
 800740e:	4205      	tst	r5, r0
 8007410:	d104      	bne.n	800741c <__aeabi_dsub+0x558>
 8007412:	002c      	movs	r4, r5
 8007414:	4698      	mov	r8, r3
 8007416:	08d7      	lsrs	r7, r2, #3
 8007418:	0749      	lsls	r1, r1, #29
 800741a:	430f      	orrs	r7, r1
 800741c:	0f7b      	lsrs	r3, r7, #29
 800741e:	00e4      	lsls	r4, r4, #3
 8007420:	431c      	orrs	r4, r3
 8007422:	00ff      	lsls	r7, r7, #3
 8007424:	4e30      	ldr	r6, [pc, #192]	; (80074e8 <__aeabi_dsub+0x624>)
 8007426:	e5d3      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 8007428:	4e2f      	ldr	r6, [pc, #188]	; (80074e8 <__aeabi_dsub+0x624>)
 800742a:	45b4      	cmp	ip, r6
 800742c:	d1b4      	bne.n	8007398 <__aeabi_dsub+0x4d4>
 800742e:	000c      	movs	r4, r1
 8007430:	0017      	movs	r7, r2
 8007432:	4666      	mov	r6, ip
 8007434:	e5cc      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 8007436:	2700      	movs	r7, #0
 8007438:	2400      	movs	r4, #0
 800743a:	e5e8      	b.n	800700e <__aeabi_dsub+0x14a>
 800743c:	2b00      	cmp	r3, #0
 800743e:	d039      	beq.n	80074b4 <__aeabi_dsub+0x5f0>
 8007440:	000b      	movs	r3, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	d100      	bne.n	8007448 <__aeabi_dsub+0x584>
 8007446:	e744      	b.n	80072d2 <__aeabi_dsub+0x40e>
 8007448:	08c0      	lsrs	r0, r0, #3
 800744a:	0767      	lsls	r7, r4, #29
 800744c:	4307      	orrs	r7, r0
 800744e:	2080      	movs	r0, #128	; 0x80
 8007450:	08e4      	lsrs	r4, r4, #3
 8007452:	0300      	lsls	r0, r0, #12
 8007454:	4204      	tst	r4, r0
 8007456:	d0e1      	beq.n	800741c <__aeabi_dsub+0x558>
 8007458:	08cb      	lsrs	r3, r1, #3
 800745a:	4203      	tst	r3, r0
 800745c:	d1de      	bne.n	800741c <__aeabi_dsub+0x558>
 800745e:	08d7      	lsrs	r7, r2, #3
 8007460:	0749      	lsls	r1, r1, #29
 8007462:	430f      	orrs	r7, r1
 8007464:	001c      	movs	r4, r3
 8007466:	e7d9      	b.n	800741c <__aeabi_dsub+0x558>
 8007468:	2100      	movs	r1, #0
 800746a:	e771      	b.n	8007350 <__aeabi_dsub+0x48c>
 800746c:	2500      	movs	r5, #0
 800746e:	2700      	movs	r7, #0
 8007470:	e5e9      	b.n	8007046 <__aeabi_dsub+0x182>
 8007472:	002e      	movs	r6, r5
 8007474:	0027      	movs	r7, r4
 8007476:	3e20      	subs	r6, #32
 8007478:	40f7      	lsrs	r7, r6
 800747a:	2d20      	cmp	r5, #32
 800747c:	d02f      	beq.n	80074de <__aeabi_dsub+0x61a>
 800747e:	2640      	movs	r6, #64	; 0x40
 8007480:	1b75      	subs	r5, r6, r5
 8007482:	40ac      	lsls	r4, r5
 8007484:	4650      	mov	r0, sl
 8007486:	4320      	orrs	r0, r4
 8007488:	1e44      	subs	r4, r0, #1
 800748a:	41a0      	sbcs	r0, r4
 800748c:	2400      	movs	r4, #0
 800748e:	4338      	orrs	r0, r7
 8007490:	e6dc      	b.n	800724c <__aeabi_dsub+0x388>
 8007492:	2480      	movs	r4, #128	; 0x80
 8007494:	2500      	movs	r5, #0
 8007496:	0324      	lsls	r4, r4, #12
 8007498:	4e13      	ldr	r6, [pc, #76]	; (80074e8 <__aeabi_dsub+0x624>)
 800749a:	2700      	movs	r7, #0
 800749c:	e5d3      	b.n	8007046 <__aeabi_dsub+0x182>
 800749e:	4650      	mov	r0, sl
 80074a0:	4320      	orrs	r0, r4
 80074a2:	0007      	movs	r7, r0
 80074a4:	1e78      	subs	r0, r7, #1
 80074a6:	4187      	sbcs	r7, r0
 80074a8:	2400      	movs	r4, #0
 80074aa:	18bf      	adds	r7, r7, r2
 80074ac:	e760      	b.n	8007370 <__aeabi_dsub+0x4ac>
 80074ae:	000c      	movs	r4, r1
 80074b0:	0017      	movs	r7, r2
 80074b2:	e58d      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80074b4:	000c      	movs	r4, r1
 80074b6:	0017      	movs	r7, r2
 80074b8:	4e0b      	ldr	r6, [pc, #44]	; (80074e8 <__aeabi_dsub+0x624>)
 80074ba:	e589      	b.n	8006fd0 <__aeabi_dsub+0x10c>
 80074bc:	001e      	movs	r6, r3
 80074be:	0027      	movs	r7, r4
 80074c0:	3e20      	subs	r6, #32
 80074c2:	40f7      	lsrs	r7, r6
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d00c      	beq.n	80074e2 <__aeabi_dsub+0x61e>
 80074c8:	2640      	movs	r6, #64	; 0x40
 80074ca:	1af3      	subs	r3, r6, r3
 80074cc:	409c      	lsls	r4, r3
 80074ce:	4650      	mov	r0, sl
 80074d0:	4320      	orrs	r0, r4
 80074d2:	1e44      	subs	r4, r0, #1
 80074d4:	41a0      	sbcs	r0, r4
 80074d6:	4307      	orrs	r7, r0
 80074d8:	2400      	movs	r4, #0
 80074da:	18bf      	adds	r7, r7, r2
 80074dc:	e748      	b.n	8007370 <__aeabi_dsub+0x4ac>
 80074de:	2400      	movs	r4, #0
 80074e0:	e7d0      	b.n	8007484 <__aeabi_dsub+0x5c0>
 80074e2:	2400      	movs	r4, #0
 80074e4:	e7f3      	b.n	80074ce <__aeabi_dsub+0x60a>
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	000007ff 	.word	0x000007ff
 80074ec:	ff7fffff 	.word	0xff7fffff

080074f0 <__aeabi_dcmpun>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	4e0e      	ldr	r6, [pc, #56]	; (800752c <__aeabi_dcmpun+0x3c>)
 80074f4:	030d      	lsls	r5, r1, #12
 80074f6:	031c      	lsls	r4, r3, #12
 80074f8:	0049      	lsls	r1, r1, #1
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	0b2d      	lsrs	r5, r5, #12
 80074fe:	0d49      	lsrs	r1, r1, #21
 8007500:	0b24      	lsrs	r4, r4, #12
 8007502:	0d5b      	lsrs	r3, r3, #21
 8007504:	42b1      	cmp	r1, r6
 8007506:	d004      	beq.n	8007512 <__aeabi_dcmpun+0x22>
 8007508:	4908      	ldr	r1, [pc, #32]	; (800752c <__aeabi_dcmpun+0x3c>)
 800750a:	2000      	movs	r0, #0
 800750c:	428b      	cmp	r3, r1
 800750e:	d008      	beq.n	8007522 <__aeabi_dcmpun+0x32>
 8007510:	bd70      	pop	{r4, r5, r6, pc}
 8007512:	4305      	orrs	r5, r0
 8007514:	2001      	movs	r0, #1
 8007516:	2d00      	cmp	r5, #0
 8007518:	d1fa      	bne.n	8007510 <__aeabi_dcmpun+0x20>
 800751a:	4904      	ldr	r1, [pc, #16]	; (800752c <__aeabi_dcmpun+0x3c>)
 800751c:	2000      	movs	r0, #0
 800751e:	428b      	cmp	r3, r1
 8007520:	d1f6      	bne.n	8007510 <__aeabi_dcmpun+0x20>
 8007522:	4314      	orrs	r4, r2
 8007524:	0020      	movs	r0, r4
 8007526:	1e44      	subs	r4, r0, #1
 8007528:	41a0      	sbcs	r0, r4
 800752a:	e7f1      	b.n	8007510 <__aeabi_dcmpun+0x20>
 800752c:	000007ff 	.word	0x000007ff

08007530 <__aeabi_d2iz>:
 8007530:	b530      	push	{r4, r5, lr}
 8007532:	4d13      	ldr	r5, [pc, #76]	; (8007580 <__aeabi_d2iz+0x50>)
 8007534:	030a      	lsls	r2, r1, #12
 8007536:	004b      	lsls	r3, r1, #1
 8007538:	0b12      	lsrs	r2, r2, #12
 800753a:	0d5b      	lsrs	r3, r3, #21
 800753c:	0fc9      	lsrs	r1, r1, #31
 800753e:	2400      	movs	r4, #0
 8007540:	42ab      	cmp	r3, r5
 8007542:	dd10      	ble.n	8007566 <__aeabi_d2iz+0x36>
 8007544:	4c0f      	ldr	r4, [pc, #60]	; (8007584 <__aeabi_d2iz+0x54>)
 8007546:	42a3      	cmp	r3, r4
 8007548:	dc0f      	bgt.n	800756a <__aeabi_d2iz+0x3a>
 800754a:	2480      	movs	r4, #128	; 0x80
 800754c:	4d0e      	ldr	r5, [pc, #56]	; (8007588 <__aeabi_d2iz+0x58>)
 800754e:	0364      	lsls	r4, r4, #13
 8007550:	4322      	orrs	r2, r4
 8007552:	1aed      	subs	r5, r5, r3
 8007554:	2d1f      	cmp	r5, #31
 8007556:	dd0b      	ble.n	8007570 <__aeabi_d2iz+0x40>
 8007558:	480c      	ldr	r0, [pc, #48]	; (800758c <__aeabi_d2iz+0x5c>)
 800755a:	1ac3      	subs	r3, r0, r3
 800755c:	40da      	lsrs	r2, r3
 800755e:	4254      	negs	r4, r2
 8007560:	2900      	cmp	r1, #0
 8007562:	d100      	bne.n	8007566 <__aeabi_d2iz+0x36>
 8007564:	0014      	movs	r4, r2
 8007566:	0020      	movs	r0, r4
 8007568:	bd30      	pop	{r4, r5, pc}
 800756a:	4b09      	ldr	r3, [pc, #36]	; (8007590 <__aeabi_d2iz+0x60>)
 800756c:	18cc      	adds	r4, r1, r3
 800756e:	e7fa      	b.n	8007566 <__aeabi_d2iz+0x36>
 8007570:	4c08      	ldr	r4, [pc, #32]	; (8007594 <__aeabi_d2iz+0x64>)
 8007572:	40e8      	lsrs	r0, r5
 8007574:	46a4      	mov	ip, r4
 8007576:	4463      	add	r3, ip
 8007578:	409a      	lsls	r2, r3
 800757a:	4302      	orrs	r2, r0
 800757c:	e7ef      	b.n	800755e <__aeabi_d2iz+0x2e>
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	000003fe 	.word	0x000003fe
 8007584:	0000041d 	.word	0x0000041d
 8007588:	00000433 	.word	0x00000433
 800758c:	00000413 	.word	0x00000413
 8007590:	7fffffff 	.word	0x7fffffff
 8007594:	fffffbed 	.word	0xfffffbed

08007598 <__aeabi_i2d>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	2800      	cmp	r0, #0
 800759c:	d030      	beq.n	8007600 <__aeabi_i2d+0x68>
 800759e:	17c3      	asrs	r3, r0, #31
 80075a0:	18c4      	adds	r4, r0, r3
 80075a2:	405c      	eors	r4, r3
 80075a4:	0fc5      	lsrs	r5, r0, #31
 80075a6:	0020      	movs	r0, r4
 80075a8:	f000 f914 	bl	80077d4 <__clzsi2>
 80075ac:	4b17      	ldr	r3, [pc, #92]	; (800760c <__aeabi_i2d+0x74>)
 80075ae:	4a18      	ldr	r2, [pc, #96]	; (8007610 <__aeabi_i2d+0x78>)
 80075b0:	1a1b      	subs	r3, r3, r0
 80075b2:	1ad2      	subs	r2, r2, r3
 80075b4:	2a1f      	cmp	r2, #31
 80075b6:	dd18      	ble.n	80075ea <__aeabi_i2d+0x52>
 80075b8:	4a16      	ldr	r2, [pc, #88]	; (8007614 <__aeabi_i2d+0x7c>)
 80075ba:	1ad2      	subs	r2, r2, r3
 80075bc:	4094      	lsls	r4, r2
 80075be:	2200      	movs	r2, #0
 80075c0:	0324      	lsls	r4, r4, #12
 80075c2:	055b      	lsls	r3, r3, #21
 80075c4:	0b24      	lsrs	r4, r4, #12
 80075c6:	0d5b      	lsrs	r3, r3, #21
 80075c8:	2100      	movs	r1, #0
 80075ca:	0010      	movs	r0, r2
 80075cc:	0324      	lsls	r4, r4, #12
 80075ce:	0d0a      	lsrs	r2, r1, #20
 80075d0:	0b24      	lsrs	r4, r4, #12
 80075d2:	0512      	lsls	r2, r2, #20
 80075d4:	4322      	orrs	r2, r4
 80075d6:	4c10      	ldr	r4, [pc, #64]	; (8007618 <__aeabi_i2d+0x80>)
 80075d8:	051b      	lsls	r3, r3, #20
 80075da:	4022      	ands	r2, r4
 80075dc:	4313      	orrs	r3, r2
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	07ed      	lsls	r5, r5, #31
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	432b      	orrs	r3, r5
 80075e6:	0019      	movs	r1, r3
 80075e8:	bd70      	pop	{r4, r5, r6, pc}
 80075ea:	0021      	movs	r1, r4
 80075ec:	4091      	lsls	r1, r2
 80075ee:	000a      	movs	r2, r1
 80075f0:	210b      	movs	r1, #11
 80075f2:	1a08      	subs	r0, r1, r0
 80075f4:	40c4      	lsrs	r4, r0
 80075f6:	055b      	lsls	r3, r3, #21
 80075f8:	0324      	lsls	r4, r4, #12
 80075fa:	0b24      	lsrs	r4, r4, #12
 80075fc:	0d5b      	lsrs	r3, r3, #21
 80075fe:	e7e3      	b.n	80075c8 <__aeabi_i2d+0x30>
 8007600:	2500      	movs	r5, #0
 8007602:	2300      	movs	r3, #0
 8007604:	2400      	movs	r4, #0
 8007606:	2200      	movs	r2, #0
 8007608:	e7de      	b.n	80075c8 <__aeabi_i2d+0x30>
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	0000041e 	.word	0x0000041e
 8007610:	00000433 	.word	0x00000433
 8007614:	00000413 	.word	0x00000413
 8007618:	800fffff 	.word	0x800fffff

0800761c <__aeabi_f2d>:
 800761c:	0041      	lsls	r1, r0, #1
 800761e:	0e09      	lsrs	r1, r1, #24
 8007620:	1c4b      	adds	r3, r1, #1
 8007622:	b570      	push	{r4, r5, r6, lr}
 8007624:	b2db      	uxtb	r3, r3
 8007626:	0246      	lsls	r6, r0, #9
 8007628:	0a75      	lsrs	r5, r6, #9
 800762a:	0fc4      	lsrs	r4, r0, #31
 800762c:	2b01      	cmp	r3, #1
 800762e:	dd14      	ble.n	800765a <__aeabi_f2d+0x3e>
 8007630:	23e0      	movs	r3, #224	; 0xe0
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	076d      	lsls	r5, r5, #29
 8007636:	0b36      	lsrs	r6, r6, #12
 8007638:	18cb      	adds	r3, r1, r3
 800763a:	2100      	movs	r1, #0
 800763c:	0d0a      	lsrs	r2, r1, #20
 800763e:	0028      	movs	r0, r5
 8007640:	0512      	lsls	r2, r2, #20
 8007642:	4d1c      	ldr	r5, [pc, #112]	; (80076b4 <__aeabi_f2d+0x98>)
 8007644:	4332      	orrs	r2, r6
 8007646:	055b      	lsls	r3, r3, #21
 8007648:	402a      	ands	r2, r5
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	4313      	orrs	r3, r2
 800764e:	005b      	lsls	r3, r3, #1
 8007650:	07e4      	lsls	r4, r4, #31
 8007652:	085b      	lsrs	r3, r3, #1
 8007654:	4323      	orrs	r3, r4
 8007656:	0019      	movs	r1, r3
 8007658:	bd70      	pop	{r4, r5, r6, pc}
 800765a:	2900      	cmp	r1, #0
 800765c:	d114      	bne.n	8007688 <__aeabi_f2d+0x6c>
 800765e:	2d00      	cmp	r5, #0
 8007660:	d01e      	beq.n	80076a0 <__aeabi_f2d+0x84>
 8007662:	0028      	movs	r0, r5
 8007664:	f000 f8b6 	bl	80077d4 <__clzsi2>
 8007668:	280a      	cmp	r0, #10
 800766a:	dc1c      	bgt.n	80076a6 <__aeabi_f2d+0x8a>
 800766c:	230b      	movs	r3, #11
 800766e:	002a      	movs	r2, r5
 8007670:	1a1b      	subs	r3, r3, r0
 8007672:	40da      	lsrs	r2, r3
 8007674:	0003      	movs	r3, r0
 8007676:	3315      	adds	r3, #21
 8007678:	409d      	lsls	r5, r3
 800767a:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <__aeabi_f2d+0x9c>)
 800767c:	0312      	lsls	r2, r2, #12
 800767e:	1a1b      	subs	r3, r3, r0
 8007680:	055b      	lsls	r3, r3, #21
 8007682:	0b16      	lsrs	r6, r2, #12
 8007684:	0d5b      	lsrs	r3, r3, #21
 8007686:	e7d8      	b.n	800763a <__aeabi_f2d+0x1e>
 8007688:	2d00      	cmp	r5, #0
 800768a:	d006      	beq.n	800769a <__aeabi_f2d+0x7e>
 800768c:	0b32      	lsrs	r2, r6, #12
 800768e:	2680      	movs	r6, #128	; 0x80
 8007690:	0336      	lsls	r6, r6, #12
 8007692:	076d      	lsls	r5, r5, #29
 8007694:	4316      	orrs	r6, r2
 8007696:	4b09      	ldr	r3, [pc, #36]	; (80076bc <__aeabi_f2d+0xa0>)
 8007698:	e7cf      	b.n	800763a <__aeabi_f2d+0x1e>
 800769a:	4b08      	ldr	r3, [pc, #32]	; (80076bc <__aeabi_f2d+0xa0>)
 800769c:	2600      	movs	r6, #0
 800769e:	e7cc      	b.n	800763a <__aeabi_f2d+0x1e>
 80076a0:	2300      	movs	r3, #0
 80076a2:	2600      	movs	r6, #0
 80076a4:	e7c9      	b.n	800763a <__aeabi_f2d+0x1e>
 80076a6:	0003      	movs	r3, r0
 80076a8:	002a      	movs	r2, r5
 80076aa:	3b0b      	subs	r3, #11
 80076ac:	409a      	lsls	r2, r3
 80076ae:	2500      	movs	r5, #0
 80076b0:	e7e3      	b.n	800767a <__aeabi_f2d+0x5e>
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	800fffff 	.word	0x800fffff
 80076b8:	00000389 	.word	0x00000389
 80076bc:	000007ff 	.word	0x000007ff

080076c0 <__aeabi_d2f>:
 80076c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c2:	004c      	lsls	r4, r1, #1
 80076c4:	0d64      	lsrs	r4, r4, #21
 80076c6:	030b      	lsls	r3, r1, #12
 80076c8:	1c62      	adds	r2, r4, #1
 80076ca:	0f45      	lsrs	r5, r0, #29
 80076cc:	0a5b      	lsrs	r3, r3, #9
 80076ce:	0552      	lsls	r2, r2, #21
 80076d0:	432b      	orrs	r3, r5
 80076d2:	0fc9      	lsrs	r1, r1, #31
 80076d4:	00c5      	lsls	r5, r0, #3
 80076d6:	0d52      	lsrs	r2, r2, #21
 80076d8:	2a01      	cmp	r2, #1
 80076da:	dd28      	ble.n	800772e <__aeabi_d2f+0x6e>
 80076dc:	4a3a      	ldr	r2, [pc, #232]	; (80077c8 <__aeabi_d2f+0x108>)
 80076de:	18a6      	adds	r6, r4, r2
 80076e0:	2efe      	cmp	r6, #254	; 0xfe
 80076e2:	dc1b      	bgt.n	800771c <__aeabi_d2f+0x5c>
 80076e4:	2e00      	cmp	r6, #0
 80076e6:	dd3e      	ble.n	8007766 <__aeabi_d2f+0xa6>
 80076e8:	0180      	lsls	r0, r0, #6
 80076ea:	0002      	movs	r2, r0
 80076ec:	1e50      	subs	r0, r2, #1
 80076ee:	4182      	sbcs	r2, r0
 80076f0:	0f6d      	lsrs	r5, r5, #29
 80076f2:	432a      	orrs	r2, r5
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	4313      	orrs	r3, r2
 80076f8:	075a      	lsls	r2, r3, #29
 80076fa:	d004      	beq.n	8007706 <__aeabi_d2f+0x46>
 80076fc:	220f      	movs	r2, #15
 80076fe:	401a      	ands	r2, r3
 8007700:	2a04      	cmp	r2, #4
 8007702:	d000      	beq.n	8007706 <__aeabi_d2f+0x46>
 8007704:	3304      	adds	r3, #4
 8007706:	2280      	movs	r2, #128	; 0x80
 8007708:	04d2      	lsls	r2, r2, #19
 800770a:	401a      	ands	r2, r3
 800770c:	d05a      	beq.n	80077c4 <__aeabi_d2f+0x104>
 800770e:	3601      	adds	r6, #1
 8007710:	2eff      	cmp	r6, #255	; 0xff
 8007712:	d003      	beq.n	800771c <__aeabi_d2f+0x5c>
 8007714:	019b      	lsls	r3, r3, #6
 8007716:	0a5b      	lsrs	r3, r3, #9
 8007718:	b2f4      	uxtb	r4, r6
 800771a:	e001      	b.n	8007720 <__aeabi_d2f+0x60>
 800771c:	24ff      	movs	r4, #255	; 0xff
 800771e:	2300      	movs	r3, #0
 8007720:	0258      	lsls	r0, r3, #9
 8007722:	05e4      	lsls	r4, r4, #23
 8007724:	0a40      	lsrs	r0, r0, #9
 8007726:	07c9      	lsls	r1, r1, #31
 8007728:	4320      	orrs	r0, r4
 800772a:	4308      	orrs	r0, r1
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772e:	2c00      	cmp	r4, #0
 8007730:	d007      	beq.n	8007742 <__aeabi_d2f+0x82>
 8007732:	431d      	orrs	r5, r3
 8007734:	d0f2      	beq.n	800771c <__aeabi_d2f+0x5c>
 8007736:	2080      	movs	r0, #128	; 0x80
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	0480      	lsls	r0, r0, #18
 800773c:	4303      	orrs	r3, r0
 800773e:	26ff      	movs	r6, #255	; 0xff
 8007740:	e7da      	b.n	80076f8 <__aeabi_d2f+0x38>
 8007742:	432b      	orrs	r3, r5
 8007744:	d003      	beq.n	800774e <__aeabi_d2f+0x8e>
 8007746:	2305      	movs	r3, #5
 8007748:	08db      	lsrs	r3, r3, #3
 800774a:	2cff      	cmp	r4, #255	; 0xff
 800774c:	d003      	beq.n	8007756 <__aeabi_d2f+0x96>
 800774e:	025b      	lsls	r3, r3, #9
 8007750:	0a5b      	lsrs	r3, r3, #9
 8007752:	b2e4      	uxtb	r4, r4
 8007754:	e7e4      	b.n	8007720 <__aeabi_d2f+0x60>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d032      	beq.n	80077c0 <__aeabi_d2f+0x100>
 800775a:	2080      	movs	r0, #128	; 0x80
 800775c:	03c0      	lsls	r0, r0, #15
 800775e:	4303      	orrs	r3, r0
 8007760:	025b      	lsls	r3, r3, #9
 8007762:	0a5b      	lsrs	r3, r3, #9
 8007764:	e7dc      	b.n	8007720 <__aeabi_d2f+0x60>
 8007766:	0032      	movs	r2, r6
 8007768:	3217      	adds	r2, #23
 800776a:	db14      	blt.n	8007796 <__aeabi_d2f+0xd6>
 800776c:	2280      	movs	r2, #128	; 0x80
 800776e:	271e      	movs	r7, #30
 8007770:	0412      	lsls	r2, r2, #16
 8007772:	4313      	orrs	r3, r2
 8007774:	1bbf      	subs	r7, r7, r6
 8007776:	2f1f      	cmp	r7, #31
 8007778:	dc0f      	bgt.n	800779a <__aeabi_d2f+0xda>
 800777a:	4a14      	ldr	r2, [pc, #80]	; (80077cc <__aeabi_d2f+0x10c>)
 800777c:	4694      	mov	ip, r2
 800777e:	4464      	add	r4, ip
 8007780:	002a      	movs	r2, r5
 8007782:	40a5      	lsls	r5, r4
 8007784:	002e      	movs	r6, r5
 8007786:	40a3      	lsls	r3, r4
 8007788:	1e75      	subs	r5, r6, #1
 800778a:	41ae      	sbcs	r6, r5
 800778c:	40fa      	lsrs	r2, r7
 800778e:	4333      	orrs	r3, r6
 8007790:	4313      	orrs	r3, r2
 8007792:	2600      	movs	r6, #0
 8007794:	e7b0      	b.n	80076f8 <__aeabi_d2f+0x38>
 8007796:	2400      	movs	r4, #0
 8007798:	e7d5      	b.n	8007746 <__aeabi_d2f+0x86>
 800779a:	2202      	movs	r2, #2
 800779c:	4252      	negs	r2, r2
 800779e:	1b96      	subs	r6, r2, r6
 80077a0:	001a      	movs	r2, r3
 80077a2:	40f2      	lsrs	r2, r6
 80077a4:	2f20      	cmp	r7, #32
 80077a6:	d009      	beq.n	80077bc <__aeabi_d2f+0xfc>
 80077a8:	4809      	ldr	r0, [pc, #36]	; (80077d0 <__aeabi_d2f+0x110>)
 80077aa:	4684      	mov	ip, r0
 80077ac:	4464      	add	r4, ip
 80077ae:	40a3      	lsls	r3, r4
 80077b0:	432b      	orrs	r3, r5
 80077b2:	1e5d      	subs	r5, r3, #1
 80077b4:	41ab      	sbcs	r3, r5
 80077b6:	2600      	movs	r6, #0
 80077b8:	4313      	orrs	r3, r2
 80077ba:	e79d      	b.n	80076f8 <__aeabi_d2f+0x38>
 80077bc:	2300      	movs	r3, #0
 80077be:	e7f7      	b.n	80077b0 <__aeabi_d2f+0xf0>
 80077c0:	2300      	movs	r3, #0
 80077c2:	e7ad      	b.n	8007720 <__aeabi_d2f+0x60>
 80077c4:	0034      	movs	r4, r6
 80077c6:	e7bf      	b.n	8007748 <__aeabi_d2f+0x88>
 80077c8:	fffffc80 	.word	0xfffffc80
 80077cc:	fffffc82 	.word	0xfffffc82
 80077d0:	fffffca2 	.word	0xfffffca2

080077d4 <__clzsi2>:
 80077d4:	211c      	movs	r1, #28
 80077d6:	2301      	movs	r3, #1
 80077d8:	041b      	lsls	r3, r3, #16
 80077da:	4298      	cmp	r0, r3
 80077dc:	d301      	bcc.n	80077e2 <__clzsi2+0xe>
 80077de:	0c00      	lsrs	r0, r0, #16
 80077e0:	3910      	subs	r1, #16
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	4298      	cmp	r0, r3
 80077e6:	d301      	bcc.n	80077ec <__clzsi2+0x18>
 80077e8:	0a00      	lsrs	r0, r0, #8
 80077ea:	3908      	subs	r1, #8
 80077ec:	091b      	lsrs	r3, r3, #4
 80077ee:	4298      	cmp	r0, r3
 80077f0:	d301      	bcc.n	80077f6 <__clzsi2+0x22>
 80077f2:	0900      	lsrs	r0, r0, #4
 80077f4:	3904      	subs	r1, #4
 80077f6:	a202      	add	r2, pc, #8	; (adr r2, 8007800 <__clzsi2+0x2c>)
 80077f8:	5c10      	ldrb	r0, [r2, r0]
 80077fa:	1840      	adds	r0, r0, r1
 80077fc:	4770      	bx	lr
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	02020304 	.word	0x02020304
 8007804:	01010101 	.word	0x01010101
	...

08007810 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007810:	480d      	ldr	r0, [pc, #52]	; (8007848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007812:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007814:	480d      	ldr	r0, [pc, #52]	; (800784c <LoopForever+0x6>)
  ldr r1, =_edata
 8007816:	490e      	ldr	r1, [pc, #56]	; (8007850 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007818:	4a0e      	ldr	r2, [pc, #56]	; (8007854 <LoopForever+0xe>)
  movs r3, #0
 800781a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800781c:	e002      	b.n	8007824 <LoopCopyDataInit>

0800781e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800781e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007822:	3304      	adds	r3, #4

08007824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007828:	d3f9      	bcc.n	800781e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800782a:	4a0b      	ldr	r2, [pc, #44]	; (8007858 <LoopForever+0x12>)
  ldr r4, =_ebss
 800782c:	4c0b      	ldr	r4, [pc, #44]	; (800785c <LoopForever+0x16>)
  movs r3, #0
 800782e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007830:	e001      	b.n	8007836 <LoopFillZerobss>

08007832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007834:	3204      	adds	r2, #4

08007836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007838:	d3fb      	bcc.n	8007832 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800783a:	f7fd f8b9 	bl	80049b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800783e:	f000 f811 	bl	8007864 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007842:	f7f8 fea7 	bl	8000594 <main>

08007846 <LoopForever>:

LoopForever:
    b LoopForever
 8007846:	e7fe      	b.n	8007846 <LoopForever>
  ldr   r0, =_estack
 8007848:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800784c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007850:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8007854:	08009178 	.word	0x08009178
  ldr r2, =_sbss
 8007858:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 800785c:	20000404 	.word	0x20000404

08007860 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007860:	e7fe      	b.n	8007860 <ADC1_COMP_IRQHandler>
	...

08007864 <__libc_init_array>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	2600      	movs	r6, #0
 8007868:	4d0c      	ldr	r5, [pc, #48]	; (800789c <__libc_init_array+0x38>)
 800786a:	4c0d      	ldr	r4, [pc, #52]	; (80078a0 <__libc_init_array+0x3c>)
 800786c:	1b64      	subs	r4, r4, r5
 800786e:	10a4      	asrs	r4, r4, #2
 8007870:	42a6      	cmp	r6, r4
 8007872:	d109      	bne.n	8007888 <__libc_init_array+0x24>
 8007874:	2600      	movs	r6, #0
 8007876:	f001 fab3 	bl	8008de0 <_init>
 800787a:	4d0a      	ldr	r5, [pc, #40]	; (80078a4 <__libc_init_array+0x40>)
 800787c:	4c0a      	ldr	r4, [pc, #40]	; (80078a8 <__libc_init_array+0x44>)
 800787e:	1b64      	subs	r4, r4, r5
 8007880:	10a4      	asrs	r4, r4, #2
 8007882:	42a6      	cmp	r6, r4
 8007884:	d105      	bne.n	8007892 <__libc_init_array+0x2e>
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	00b3      	lsls	r3, r6, #2
 800788a:	58eb      	ldr	r3, [r5, r3]
 800788c:	4798      	blx	r3
 800788e:	3601      	adds	r6, #1
 8007890:	e7ee      	b.n	8007870 <__libc_init_array+0xc>
 8007892:	00b3      	lsls	r3, r6, #2
 8007894:	58eb      	ldr	r3, [r5, r3]
 8007896:	4798      	blx	r3
 8007898:	3601      	adds	r6, #1
 800789a:	e7f2      	b.n	8007882 <__libc_init_array+0x1e>
 800789c:	08009170 	.word	0x08009170
 80078a0:	08009170 	.word	0x08009170
 80078a4:	08009170 	.word	0x08009170
 80078a8:	08009174 	.word	0x08009174

080078ac <memcmp>:
 80078ac:	b530      	push	{r4, r5, lr}
 80078ae:	2400      	movs	r4, #0
 80078b0:	42a2      	cmp	r2, r4
 80078b2:	d101      	bne.n	80078b8 <memcmp+0xc>
 80078b4:	2000      	movs	r0, #0
 80078b6:	e005      	b.n	80078c4 <memcmp+0x18>
 80078b8:	5d03      	ldrb	r3, [r0, r4]
 80078ba:	1c65      	adds	r5, r4, #1
 80078bc:	5d0c      	ldrb	r4, [r1, r4]
 80078be:	42a3      	cmp	r3, r4
 80078c0:	d001      	beq.n	80078c6 <memcmp+0x1a>
 80078c2:	1b18      	subs	r0, r3, r4
 80078c4:	bd30      	pop	{r4, r5, pc}
 80078c6:	002c      	movs	r4, r5
 80078c8:	e7f2      	b.n	80078b0 <memcmp+0x4>

080078ca <memset>:
 80078ca:	0003      	movs	r3, r0
 80078cc:	1882      	adds	r2, r0, r2
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d100      	bne.n	80078d4 <memset+0xa>
 80078d2:	4770      	bx	lr
 80078d4:	7019      	strb	r1, [r3, #0]
 80078d6:	3301      	adds	r3, #1
 80078d8:	e7f9      	b.n	80078ce <memset+0x4>
	...

080078dc <srand>:
 80078dc:	4b10      	ldr	r3, [pc, #64]	; (8007920 <srand+0x44>)
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	681c      	ldr	r4, [r3, #0]
 80078e2:	0005      	movs	r5, r0
 80078e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d115      	bne.n	8007916 <srand+0x3a>
 80078ea:	2018      	movs	r0, #24
 80078ec:	f000 f860 	bl	80079b0 <malloc>
 80078f0:	4b0c      	ldr	r3, [pc, #48]	; (8007924 <srand+0x48>)
 80078f2:	63a0      	str	r0, [r4, #56]	; 0x38
 80078f4:	8003      	strh	r3, [r0, #0]
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <srand+0x4c>)
 80078f8:	2201      	movs	r2, #1
 80078fa:	8043      	strh	r3, [r0, #2]
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <srand+0x50>)
 80078fe:	8083      	strh	r3, [r0, #4]
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <srand+0x54>)
 8007902:	80c3      	strh	r3, [r0, #6]
 8007904:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <srand+0x58>)
 8007906:	8103      	strh	r3, [r0, #8]
 8007908:	2305      	movs	r3, #5
 800790a:	8143      	strh	r3, [r0, #10]
 800790c:	3306      	adds	r3, #6
 800790e:	8183      	strh	r3, [r0, #12]
 8007910:	2300      	movs	r3, #0
 8007912:	6102      	str	r2, [r0, #16]
 8007914:	6143      	str	r3, [r0, #20]
 8007916:	2200      	movs	r2, #0
 8007918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800791a:	611d      	str	r5, [r3, #16]
 800791c:	615a      	str	r2, [r3, #20]
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	20000034 	.word	0x20000034
 8007924:	0000330e 	.word	0x0000330e
 8007928:	ffffabcd 	.word	0xffffabcd
 800792c:	00001234 	.word	0x00001234
 8007930:	ffffe66d 	.word	0xffffe66d
 8007934:	ffffdeec 	.word	0xffffdeec

08007938 <rand>:
 8007938:	4b15      	ldr	r3, [pc, #84]	; (8007990 <rand+0x58>)
 800793a:	b510      	push	{r4, lr}
 800793c:	681c      	ldr	r4, [r3, #0]
 800793e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007940:	2b00      	cmp	r3, #0
 8007942:	d115      	bne.n	8007970 <rand+0x38>
 8007944:	2018      	movs	r0, #24
 8007946:	f000 f833 	bl	80079b0 <malloc>
 800794a:	4b12      	ldr	r3, [pc, #72]	; (8007994 <rand+0x5c>)
 800794c:	63a0      	str	r0, [r4, #56]	; 0x38
 800794e:	8003      	strh	r3, [r0, #0]
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <rand+0x60>)
 8007952:	2201      	movs	r2, #1
 8007954:	8043      	strh	r3, [r0, #2]
 8007956:	4b11      	ldr	r3, [pc, #68]	; (800799c <rand+0x64>)
 8007958:	8083      	strh	r3, [r0, #4]
 800795a:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <rand+0x68>)
 800795c:	80c3      	strh	r3, [r0, #6]
 800795e:	4b11      	ldr	r3, [pc, #68]	; (80079a4 <rand+0x6c>)
 8007960:	8103      	strh	r3, [r0, #8]
 8007962:	2305      	movs	r3, #5
 8007964:	8143      	strh	r3, [r0, #10]
 8007966:	3306      	adds	r3, #6
 8007968:	8183      	strh	r3, [r0, #12]
 800796a:	2300      	movs	r3, #0
 800796c:	6102      	str	r2, [r0, #16]
 800796e:	6143      	str	r3, [r0, #20]
 8007970:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007972:	4a0d      	ldr	r2, [pc, #52]	; (80079a8 <rand+0x70>)
 8007974:	6920      	ldr	r0, [r4, #16]
 8007976:	6961      	ldr	r1, [r4, #20]
 8007978:	4b0c      	ldr	r3, [pc, #48]	; (80079ac <rand+0x74>)
 800797a:	f7fd fad3 	bl	8004f24 <__aeabi_lmul>
 800797e:	2201      	movs	r2, #1
 8007980:	2300      	movs	r3, #0
 8007982:	1880      	adds	r0, r0, r2
 8007984:	4159      	adcs	r1, r3
 8007986:	6120      	str	r0, [r4, #16]
 8007988:	6161      	str	r1, [r4, #20]
 800798a:	0048      	lsls	r0, r1, #1
 800798c:	0840      	lsrs	r0, r0, #1
 800798e:	bd10      	pop	{r4, pc}
 8007990:	20000034 	.word	0x20000034
 8007994:	0000330e 	.word	0x0000330e
 8007998:	ffffabcd 	.word	0xffffabcd
 800799c:	00001234 	.word	0x00001234
 80079a0:	ffffe66d 	.word	0xffffe66d
 80079a4:	ffffdeec 	.word	0xffffdeec
 80079a8:	4c957f2d 	.word	0x4c957f2d
 80079ac:	5851f42d 	.word	0x5851f42d

080079b0 <malloc>:
 80079b0:	b510      	push	{r4, lr}
 80079b2:	4b03      	ldr	r3, [pc, #12]	; (80079c0 <malloc+0x10>)
 80079b4:	0001      	movs	r1, r0
 80079b6:	6818      	ldr	r0, [r3, #0]
 80079b8:	f000 f858 	bl	8007a6c <_malloc_r>
 80079bc:	bd10      	pop	{r4, pc}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	20000034 	.word	0x20000034

080079c4 <free>:
 80079c4:	b510      	push	{r4, lr}
 80079c6:	4b03      	ldr	r3, [pc, #12]	; (80079d4 <free+0x10>)
 80079c8:	0001      	movs	r1, r0
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	f000 f804 	bl	80079d8 <_free_r>
 80079d0:	bd10      	pop	{r4, pc}
 80079d2:	46c0      	nop			; (mov r8, r8)
 80079d4:	20000034 	.word	0x20000034

080079d8 <_free_r>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	0005      	movs	r5, r0
 80079dc:	2900      	cmp	r1, #0
 80079de:	d010      	beq.n	8007a02 <_free_r+0x2a>
 80079e0:	1f0c      	subs	r4, r1, #4
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da00      	bge.n	80079ea <_free_r+0x12>
 80079e8:	18e4      	adds	r4, r4, r3
 80079ea:	0028      	movs	r0, r5
 80079ec:	f000 f8ae 	bl	8007b4c <__malloc_lock>
 80079f0:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <_free_r+0x90>)
 80079f2:	6813      	ldr	r3, [r2, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d105      	bne.n	8007a04 <_free_r+0x2c>
 80079f8:	6063      	str	r3, [r4, #4]
 80079fa:	6014      	str	r4, [r2, #0]
 80079fc:	0028      	movs	r0, r5
 80079fe:	f000 f8a6 	bl	8007b4e <__malloc_unlock>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d909      	bls.n	8007a1c <_free_r+0x44>
 8007a08:	6821      	ldr	r1, [r4, #0]
 8007a0a:	1860      	adds	r0, r4, r1
 8007a0c:	4283      	cmp	r3, r0
 8007a0e:	d1f3      	bne.n	80079f8 <_free_r+0x20>
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	1841      	adds	r1, r0, r1
 8007a16:	6021      	str	r1, [r4, #0]
 8007a18:	e7ee      	b.n	80079f8 <_free_r+0x20>
 8007a1a:	0013      	movs	r3, r2
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	d001      	beq.n	8007a26 <_free_r+0x4e>
 8007a22:	42a2      	cmp	r2, r4
 8007a24:	d9f9      	bls.n	8007a1a <_free_r+0x42>
 8007a26:	6819      	ldr	r1, [r3, #0]
 8007a28:	1858      	adds	r0, r3, r1
 8007a2a:	42a0      	cmp	r0, r4
 8007a2c:	d10b      	bne.n	8007a46 <_free_r+0x6e>
 8007a2e:	6820      	ldr	r0, [r4, #0]
 8007a30:	1809      	adds	r1, r1, r0
 8007a32:	1858      	adds	r0, r3, r1
 8007a34:	6019      	str	r1, [r3, #0]
 8007a36:	4282      	cmp	r2, r0
 8007a38:	d1e0      	bne.n	80079fc <_free_r+0x24>
 8007a3a:	6810      	ldr	r0, [r2, #0]
 8007a3c:	6852      	ldr	r2, [r2, #4]
 8007a3e:	1841      	adds	r1, r0, r1
 8007a40:	6019      	str	r1, [r3, #0]
 8007a42:	605a      	str	r2, [r3, #4]
 8007a44:	e7da      	b.n	80079fc <_free_r+0x24>
 8007a46:	42a0      	cmp	r0, r4
 8007a48:	d902      	bls.n	8007a50 <_free_r+0x78>
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	602b      	str	r3, [r5, #0]
 8007a4e:	e7d5      	b.n	80079fc <_free_r+0x24>
 8007a50:	6821      	ldr	r1, [r4, #0]
 8007a52:	1860      	adds	r0, r4, r1
 8007a54:	4282      	cmp	r2, r0
 8007a56:	d103      	bne.n	8007a60 <_free_r+0x88>
 8007a58:	6810      	ldr	r0, [r2, #0]
 8007a5a:	6852      	ldr	r2, [r2, #4]
 8007a5c:	1841      	adds	r1, r0, r1
 8007a5e:	6021      	str	r1, [r4, #0]
 8007a60:	6062      	str	r2, [r4, #4]
 8007a62:	605c      	str	r4, [r3, #4]
 8007a64:	e7ca      	b.n	80079fc <_free_r+0x24>
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	200000c8 	.word	0x200000c8

08007a6c <_malloc_r>:
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	b570      	push	{r4, r5, r6, lr}
 8007a70:	1ccd      	adds	r5, r1, #3
 8007a72:	439d      	bics	r5, r3
 8007a74:	3508      	adds	r5, #8
 8007a76:	0006      	movs	r6, r0
 8007a78:	2d0c      	cmp	r5, #12
 8007a7a:	d21e      	bcs.n	8007aba <_malloc_r+0x4e>
 8007a7c:	250c      	movs	r5, #12
 8007a7e:	42a9      	cmp	r1, r5
 8007a80:	d81d      	bhi.n	8007abe <_malloc_r+0x52>
 8007a82:	0030      	movs	r0, r6
 8007a84:	f000 f862 	bl	8007b4c <__malloc_lock>
 8007a88:	4a25      	ldr	r2, [pc, #148]	; (8007b20 <_malloc_r+0xb4>)
 8007a8a:	6814      	ldr	r4, [r2, #0]
 8007a8c:	0021      	movs	r1, r4
 8007a8e:	2900      	cmp	r1, #0
 8007a90:	d119      	bne.n	8007ac6 <_malloc_r+0x5a>
 8007a92:	4c24      	ldr	r4, [pc, #144]	; (8007b24 <_malloc_r+0xb8>)
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <_malloc_r+0x36>
 8007a9a:	0030      	movs	r0, r6
 8007a9c:	f000 f844 	bl	8007b28 <_sbrk_r>
 8007aa0:	6020      	str	r0, [r4, #0]
 8007aa2:	0029      	movs	r1, r5
 8007aa4:	0030      	movs	r0, r6
 8007aa6:	f000 f83f 	bl	8007b28 <_sbrk_r>
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	d12c      	bne.n	8007b08 <_malloc_r+0x9c>
 8007aae:	230c      	movs	r3, #12
 8007ab0:	0030      	movs	r0, r6
 8007ab2:	6033      	str	r3, [r6, #0]
 8007ab4:	f000 f84b 	bl	8007b4e <__malloc_unlock>
 8007ab8:	e003      	b.n	8007ac2 <_malloc_r+0x56>
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	dadf      	bge.n	8007a7e <_malloc_r+0x12>
 8007abe:	230c      	movs	r3, #12
 8007ac0:	6033      	str	r3, [r6, #0]
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
 8007ac6:	680b      	ldr	r3, [r1, #0]
 8007ac8:	1b5b      	subs	r3, r3, r5
 8007aca:	d41a      	bmi.n	8007b02 <_malloc_r+0x96>
 8007acc:	2b0b      	cmp	r3, #11
 8007ace:	d903      	bls.n	8007ad8 <_malloc_r+0x6c>
 8007ad0:	600b      	str	r3, [r1, #0]
 8007ad2:	18cc      	adds	r4, r1, r3
 8007ad4:	6025      	str	r5, [r4, #0]
 8007ad6:	e003      	b.n	8007ae0 <_malloc_r+0x74>
 8007ad8:	428c      	cmp	r4, r1
 8007ada:	d10e      	bne.n	8007afa <_malloc_r+0x8e>
 8007adc:	6863      	ldr	r3, [r4, #4]
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	0030      	movs	r0, r6
 8007ae2:	f000 f834 	bl	8007b4e <__malloc_unlock>
 8007ae6:	0020      	movs	r0, r4
 8007ae8:	2207      	movs	r2, #7
 8007aea:	300b      	adds	r0, #11
 8007aec:	1d23      	adds	r3, r4, #4
 8007aee:	4390      	bics	r0, r2
 8007af0:	1ac3      	subs	r3, r0, r3
 8007af2:	d0e7      	beq.n	8007ac4 <_malloc_r+0x58>
 8007af4:	425a      	negs	r2, r3
 8007af6:	50e2      	str	r2, [r4, r3]
 8007af8:	e7e4      	b.n	8007ac4 <_malloc_r+0x58>
 8007afa:	684b      	ldr	r3, [r1, #4]
 8007afc:	6063      	str	r3, [r4, #4]
 8007afe:	000c      	movs	r4, r1
 8007b00:	e7ee      	b.n	8007ae0 <_malloc_r+0x74>
 8007b02:	000c      	movs	r4, r1
 8007b04:	6849      	ldr	r1, [r1, #4]
 8007b06:	e7c2      	b.n	8007a8e <_malloc_r+0x22>
 8007b08:	2303      	movs	r3, #3
 8007b0a:	1cc4      	adds	r4, r0, #3
 8007b0c:	439c      	bics	r4, r3
 8007b0e:	42a0      	cmp	r0, r4
 8007b10:	d0e0      	beq.n	8007ad4 <_malloc_r+0x68>
 8007b12:	1a21      	subs	r1, r4, r0
 8007b14:	0030      	movs	r0, r6
 8007b16:	f000 f807 	bl	8007b28 <_sbrk_r>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d1da      	bne.n	8007ad4 <_malloc_r+0x68>
 8007b1e:	e7c6      	b.n	8007aae <_malloc_r+0x42>
 8007b20:	200000c8 	.word	0x200000c8
 8007b24:	200000cc 	.word	0x200000cc

08007b28 <_sbrk_r>:
 8007b28:	2300      	movs	r3, #0
 8007b2a:	b570      	push	{r4, r5, r6, lr}
 8007b2c:	4c06      	ldr	r4, [pc, #24]	; (8007b48 <_sbrk_r+0x20>)
 8007b2e:	0005      	movs	r5, r0
 8007b30:	0008      	movs	r0, r1
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	f001 f942 	bl	8008dbc <_sbrk>
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	d103      	bne.n	8007b44 <_sbrk_r+0x1c>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d000      	beq.n	8007b44 <_sbrk_r+0x1c>
 8007b42:	602b      	str	r3, [r5, #0]
 8007b44:	bd70      	pop	{r4, r5, r6, pc}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	20000400 	.word	0x20000400

08007b4c <__malloc_lock>:
 8007b4c:	4770      	bx	lr

08007b4e <__malloc_unlock>:
 8007b4e:	4770      	bx	lr

08007b50 <cleanup_glue>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	000d      	movs	r5, r1
 8007b54:	6809      	ldr	r1, [r1, #0]
 8007b56:	0004      	movs	r4, r0
 8007b58:	2900      	cmp	r1, #0
 8007b5a:	d001      	beq.n	8007b60 <cleanup_glue+0x10>
 8007b5c:	f7ff fff8 	bl	8007b50 <cleanup_glue>
 8007b60:	0029      	movs	r1, r5
 8007b62:	0020      	movs	r0, r4
 8007b64:	f7ff ff38 	bl	80079d8 <_free_r>
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b6c <_reclaim_reent>:
 8007b6c:	4b31      	ldr	r3, [pc, #196]	; (8007c34 <_reclaim_reent+0xc8>)
 8007b6e:	b570      	push	{r4, r5, r6, lr}
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	0004      	movs	r4, r0
 8007b74:	4283      	cmp	r3, r0
 8007b76:	d056      	beq.n	8007c26 <_reclaim_reent+0xba>
 8007b78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d017      	beq.n	8007bae <_reclaim_reent+0x42>
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00d      	beq.n	8007ba0 <_reclaim_reent+0x34>
 8007b84:	2500      	movs	r5, #0
 8007b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	5959      	ldr	r1, [r3, r5]
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	d14b      	bne.n	8007c28 <_reclaim_reent+0xbc>
 8007b90:	3504      	adds	r5, #4
 8007b92:	2d80      	cmp	r5, #128	; 0x80
 8007b94:	d1f7      	bne.n	8007b86 <_reclaim_reent+0x1a>
 8007b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b98:	0020      	movs	r0, r4
 8007b9a:	68d9      	ldr	r1, [r3, #12]
 8007b9c:	f7ff ff1c 	bl	80079d8 <_free_r>
 8007ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba2:	6819      	ldr	r1, [r3, #0]
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	d002      	beq.n	8007bae <_reclaim_reent+0x42>
 8007ba8:	0020      	movs	r0, r4
 8007baa:	f7ff ff15 	bl	80079d8 <_free_r>
 8007bae:	6961      	ldr	r1, [r4, #20]
 8007bb0:	2900      	cmp	r1, #0
 8007bb2:	d002      	beq.n	8007bba <_reclaim_reent+0x4e>
 8007bb4:	0020      	movs	r0, r4
 8007bb6:	f7ff ff0f 	bl	80079d8 <_free_r>
 8007bba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	d002      	beq.n	8007bc6 <_reclaim_reent+0x5a>
 8007bc0:	0020      	movs	r0, r4
 8007bc2:	f7ff ff09 	bl	80079d8 <_free_r>
 8007bc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	d002      	beq.n	8007bd2 <_reclaim_reent+0x66>
 8007bcc:	0020      	movs	r0, r4
 8007bce:	f7ff ff03 	bl	80079d8 <_free_r>
 8007bd2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007bd4:	2900      	cmp	r1, #0
 8007bd6:	d002      	beq.n	8007bde <_reclaim_reent+0x72>
 8007bd8:	0020      	movs	r0, r4
 8007bda:	f7ff fefd 	bl	80079d8 <_free_r>
 8007bde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007be0:	2900      	cmp	r1, #0
 8007be2:	d002      	beq.n	8007bea <_reclaim_reent+0x7e>
 8007be4:	0020      	movs	r0, r4
 8007be6:	f7ff fef7 	bl	80079d8 <_free_r>
 8007bea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007bec:	2900      	cmp	r1, #0
 8007bee:	d002      	beq.n	8007bf6 <_reclaim_reent+0x8a>
 8007bf0:	0020      	movs	r0, r4
 8007bf2:	f7ff fef1 	bl	80079d8 <_free_r>
 8007bf6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007bf8:	2900      	cmp	r1, #0
 8007bfa:	d002      	beq.n	8007c02 <_reclaim_reent+0x96>
 8007bfc:	0020      	movs	r0, r4
 8007bfe:	f7ff feeb 	bl	80079d8 <_free_r>
 8007c02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c04:	2900      	cmp	r1, #0
 8007c06:	d002      	beq.n	8007c0e <_reclaim_reent+0xa2>
 8007c08:	0020      	movs	r0, r4
 8007c0a:	f7ff fee5 	bl	80079d8 <_free_r>
 8007c0e:	69a3      	ldr	r3, [r4, #24]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d008      	beq.n	8007c26 <_reclaim_reent+0xba>
 8007c14:	0020      	movs	r0, r4
 8007c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c18:	4798      	blx	r3
 8007c1a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	d002      	beq.n	8007c26 <_reclaim_reent+0xba>
 8007c20:	0020      	movs	r0, r4
 8007c22:	f7ff ff95 	bl	8007b50 <cleanup_glue>
 8007c26:	bd70      	pop	{r4, r5, r6, pc}
 8007c28:	680e      	ldr	r6, [r1, #0]
 8007c2a:	0020      	movs	r0, r4
 8007c2c:	f7ff fed4 	bl	80079d8 <_free_r>
 8007c30:	0031      	movs	r1, r6
 8007c32:	e7ab      	b.n	8007b8c <_reclaim_reent+0x20>
 8007c34:	20000034 	.word	0x20000034

08007c38 <ceil>:
 8007c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c3a:	004b      	lsls	r3, r1, #1
 8007c3c:	4a39      	ldr	r2, [pc, #228]	; (8007d24 <ceil+0xec>)
 8007c3e:	0d5b      	lsrs	r3, r3, #21
 8007c40:	b085      	sub	sp, #20
 8007c42:	189e      	adds	r6, r3, r2
 8007c44:	9003      	str	r0, [sp, #12]
 8007c46:	000c      	movs	r4, r1
 8007c48:	0005      	movs	r5, r0
 8007c4a:	2e13      	cmp	r6, #19
 8007c4c:	dc32      	bgt.n	8007cb4 <ceil+0x7c>
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	da13      	bge.n	8007c7a <ceil+0x42>
 8007c52:	4a35      	ldr	r2, [pc, #212]	; (8007d28 <ceil+0xf0>)
 8007c54:	4b35      	ldr	r3, [pc, #212]	; (8007d2c <ceil+0xf4>)
 8007c56:	f7fd ff71 	bl	8005b3c <__aeabi_dadd>
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	f7fd f913 	bl	8004e88 <__aeabi_dcmpgt>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d006      	beq.n	8007c74 <ceil+0x3c>
 8007c66:	2c00      	cmp	r4, #0
 8007c68:	db57      	blt.n	8007d1a <ceil+0xe2>
 8007c6a:	432c      	orrs	r4, r5
 8007c6c:	2500      	movs	r5, #0
 8007c6e:	42ac      	cmp	r4, r5
 8007c70:	d000      	beq.n	8007c74 <ceil+0x3c>
 8007c72:	4c2f      	ldr	r4, [pc, #188]	; (8007d30 <ceil+0xf8>)
 8007c74:	0028      	movs	r0, r5
 8007c76:	0021      	movs	r1, r4
 8007c78:	e026      	b.n	8007cc8 <ceil+0x90>
 8007c7a:	4f2e      	ldr	r7, [pc, #184]	; (8007d34 <ceil+0xfc>)
 8007c7c:	4137      	asrs	r7, r6
 8007c7e:	003b      	movs	r3, r7
 8007c80:	400b      	ands	r3, r1
 8007c82:	4303      	orrs	r3, r0
 8007c84:	d020      	beq.n	8007cc8 <ceil+0x90>
 8007c86:	9000      	str	r0, [sp, #0]
 8007c88:	9101      	str	r1, [sp, #4]
 8007c8a:	4a27      	ldr	r2, [pc, #156]	; (8007d28 <ceil+0xf0>)
 8007c8c:	4b27      	ldr	r3, [pc, #156]	; (8007d2c <ceil+0xf4>)
 8007c8e:	9800      	ldr	r0, [sp, #0]
 8007c90:	9901      	ldr	r1, [sp, #4]
 8007c92:	f7fd ff53 	bl	8005b3c <__aeabi_dadd>
 8007c96:	2200      	movs	r2, #0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f7fd f8f5 	bl	8004e88 <__aeabi_dcmpgt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d0e8      	beq.n	8007c74 <ceil+0x3c>
 8007ca2:	2c00      	cmp	r4, #0
 8007ca4:	dd03      	ble.n	8007cae <ceil+0x76>
 8007ca6:	2380      	movs	r3, #128	; 0x80
 8007ca8:	035b      	lsls	r3, r3, #13
 8007caa:	4133      	asrs	r3, r6
 8007cac:	18e4      	adds	r4, r4, r3
 8007cae:	43bc      	bics	r4, r7
 8007cb0:	2500      	movs	r5, #0
 8007cb2:	e7df      	b.n	8007c74 <ceil+0x3c>
 8007cb4:	2e33      	cmp	r6, #51	; 0x33
 8007cb6:	dd09      	ble.n	8007ccc <ceil+0x94>
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	429e      	cmp	r6, r3
 8007cbe:	d103      	bne.n	8007cc8 <ceil+0x90>
 8007cc0:	0002      	movs	r2, r0
 8007cc2:	000b      	movs	r3, r1
 8007cc4:	f7fd ff3a 	bl	8005b3c <__aeabi_dadd>
 8007cc8:	b005      	add	sp, #20
 8007cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ccc:	2701      	movs	r7, #1
 8007cce:	4a1a      	ldr	r2, [pc, #104]	; (8007d38 <ceil+0x100>)
 8007cd0:	427f      	negs	r7, r7
 8007cd2:	189b      	adds	r3, r3, r2
 8007cd4:	40df      	lsrs	r7, r3
 8007cd6:	4207      	tst	r7, r0
 8007cd8:	d0f6      	beq.n	8007cc8 <ceil+0x90>
 8007cda:	9000      	str	r0, [sp, #0]
 8007cdc:	9101      	str	r1, [sp, #4]
 8007cde:	4a12      	ldr	r2, [pc, #72]	; (8007d28 <ceil+0xf0>)
 8007ce0:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <ceil+0xf4>)
 8007ce2:	9800      	ldr	r0, [sp, #0]
 8007ce4:	9901      	ldr	r1, [sp, #4]
 8007ce6:	f7fd ff29 	bl	8005b3c <__aeabi_dadd>
 8007cea:	2200      	movs	r2, #0
 8007cec:	2300      	movs	r3, #0
 8007cee:	f7fd f8cb 	bl	8004e88 <__aeabi_dcmpgt>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d0be      	beq.n	8007c74 <ceil+0x3c>
 8007cf6:	2c00      	cmp	r4, #0
 8007cf8:	dd02      	ble.n	8007d00 <ceil+0xc8>
 8007cfa:	2e14      	cmp	r6, #20
 8007cfc:	d102      	bne.n	8007d04 <ceil+0xcc>
 8007cfe:	3401      	adds	r4, #1
 8007d00:	43bd      	bics	r5, r7
 8007d02:	e7b7      	b.n	8007c74 <ceil+0x3c>
 8007d04:	2334      	movs	r3, #52	; 0x34
 8007d06:	1b9e      	subs	r6, r3, r6
 8007d08:	3b33      	subs	r3, #51	; 0x33
 8007d0a:	40b3      	lsls	r3, r6
 8007d0c:	18ed      	adds	r5, r5, r3
 8007d0e:	9b03      	ldr	r3, [sp, #12]
 8007d10:	429d      	cmp	r5, r3
 8007d12:	419b      	sbcs	r3, r3
 8007d14:	425b      	negs	r3, r3
 8007d16:	18e4      	adds	r4, r4, r3
 8007d18:	e7f2      	b.n	8007d00 <ceil+0xc8>
 8007d1a:	2480      	movs	r4, #128	; 0x80
 8007d1c:	2500      	movs	r5, #0
 8007d1e:	0624      	lsls	r4, r4, #24
 8007d20:	e7a8      	b.n	8007c74 <ceil+0x3c>
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	fffffc01 	.word	0xfffffc01
 8007d28:	8800759c 	.word	0x8800759c
 8007d2c:	7e37e43c 	.word	0x7e37e43c
 8007d30:	3ff00000 	.word	0x3ff00000
 8007d34:	000fffff 	.word	0x000fffff
 8007d38:	fffffbed 	.word	0xfffffbed

08007d3c <pow>:
 8007d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d3e:	b091      	sub	sp, #68	; 0x44
 8007d40:	001f      	movs	r7, r3
 8007d42:	9000      	str	r0, [sp, #0]
 8007d44:	9101      	str	r1, [sp, #4]
 8007d46:	0016      	movs	r6, r2
 8007d48:	f000 f99c 	bl	8008084 <__ieee754_pow>
 8007d4c:	4bc5      	ldr	r3, [pc, #788]	; (8008064 <pow+0x328>)
 8007d4e:	0004      	movs	r4, r0
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	000d      	movs	r5, r1
 8007d54:	b25b      	sxtb	r3, r3
 8007d56:	9303      	str	r3, [sp, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	d100      	bne.n	8007d5e <pow+0x22>
 8007d5c:	e0d8      	b.n	8007f10 <pow+0x1d4>
 8007d5e:	0032      	movs	r2, r6
 8007d60:	003b      	movs	r3, r7
 8007d62:	0030      	movs	r0, r6
 8007d64:	0039      	movs	r1, r7
 8007d66:	f7ff fbc3 	bl	80074f0 <__aeabi_dcmpun>
 8007d6a:	9004      	str	r0, [sp, #16]
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d000      	beq.n	8007d72 <pow+0x36>
 8007d70:	e0ce      	b.n	8007f10 <pow+0x1d4>
 8007d72:	9a00      	ldr	r2, [sp, #0]
 8007d74:	9b01      	ldr	r3, [sp, #4]
 8007d76:	0010      	movs	r0, r2
 8007d78:	0019      	movs	r1, r3
 8007d7a:	f7ff fbb9 	bl	80074f0 <__aeabi_dcmpun>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	9005      	str	r0, [sp, #20]
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d020      	beq.n	8007dc8 <pow+0x8c>
 8007d86:	2300      	movs	r3, #0
 8007d88:	0030      	movs	r0, r6
 8007d8a:	0039      	movs	r1, r7
 8007d8c:	f7fd f862 	bl	8004e54 <__aeabi_dcmpeq>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d100      	bne.n	8007d96 <pow+0x5a>
 8007d94:	e0bc      	b.n	8007f10 <pow+0x1d4>
 8007d96:	2301      	movs	r3, #1
 8007d98:	2200      	movs	r2, #0
 8007d9a:	9306      	str	r3, [sp, #24]
 8007d9c:	4bb2      	ldr	r3, [pc, #712]	; (8008068 <pow+0x32c>)
 8007d9e:	960a      	str	r6, [sp, #40]	; 0x28
 8007da0:	970b      	str	r7, [sp, #44]	; 0x2c
 8007da2:	9307      	str	r3, [sp, #28]
 8007da4:	9b04      	ldr	r3, [sp, #16]
 8007da6:	930e      	str	r3, [sp, #56]	; 0x38
 8007da8:	9b00      	ldr	r3, [sp, #0]
 8007daa:	9c01      	ldr	r4, [sp, #4]
 8007dac:	9308      	str	r3, [sp, #32]
 8007dae:	9409      	str	r4, [sp, #36]	; 0x24
 8007db0:	4bae      	ldr	r3, [pc, #696]	; (800806c <pow+0x330>)
 8007db2:	920c      	str	r2, [sp, #48]	; 0x30
 8007db4:	930d      	str	r3, [sp, #52]	; 0x34
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d035      	beq.n	8007e28 <pow+0xec>
 8007dbc:	a806      	add	r0, sp, #24
 8007dbe:	f000 fefb 	bl	8008bb8 <matherr>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d127      	bne.n	8007e16 <pow+0xda>
 8007dc6:	e05c      	b.n	8007e82 <pow+0x146>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9800      	ldr	r0, [sp, #0]
 8007dcc:	9901      	ldr	r1, [sp, #4]
 8007dce:	f7fd f841 	bl	8004e54 <__aeabi_dcmpeq>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d05a      	beq.n	8007e8c <pow+0x150>
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	0030      	movs	r0, r6
 8007ddc:	0039      	movs	r1, r7
 8007dde:	f7fd f839 	bl	8004e54 <__aeabi_dcmpeq>
 8007de2:	9004      	str	r0, [sp, #16]
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d022      	beq.n	8007e2e <pow+0xf2>
 8007de8:	2301      	movs	r3, #1
 8007dea:	9306      	str	r3, [sp, #24]
 8007dec:	4b9e      	ldr	r3, [pc, #632]	; (8008068 <pow+0x32c>)
 8007dee:	960a      	str	r6, [sp, #40]	; 0x28
 8007df0:	970b      	str	r7, [sp, #44]	; 0x2c
 8007df2:	9307      	str	r3, [sp, #28]
 8007df4:	9b05      	ldr	r3, [sp, #20]
 8007df6:	930e      	str	r3, [sp, #56]	; 0x38
 8007df8:	9b00      	ldr	r3, [sp, #0]
 8007dfa:	9c01      	ldr	r4, [sp, #4]
 8007dfc:	9308      	str	r3, [sp, #32]
 8007dfe:	9409      	str	r4, [sp, #36]	; 0x24
 8007e00:	2300      	movs	r3, #0
 8007e02:	2400      	movs	r4, #0
 8007e04:	930c      	str	r3, [sp, #48]	; 0x30
 8007e06:	940d      	str	r4, [sp, #52]	; 0x34
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0d6      	beq.n	8007dbc <pow+0x80>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	4b96      	ldr	r3, [pc, #600]	; (800806c <pow+0x330>)
 8007e12:	920c      	str	r2, [sp, #48]	; 0x30
 8007e14:	930d      	str	r3, [sp, #52]	; 0x34
 8007e16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <pow+0xec>
 8007e1e:	f000 ffc7 	bl	8008db0 <__errno>
 8007e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	6003      	str	r3, [r0, #0]
 8007e28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007e2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007e2c:	e070      	b.n	8007f10 <pow+0x1d4>
 8007e2e:	0030      	movs	r0, r6
 8007e30:	0039      	movs	r1, r7
 8007e32:	f000 feb9 	bl	8008ba8 <finite>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d06a      	beq.n	8007f10 <pow+0x1d4>
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	0030      	movs	r0, r6
 8007e40:	0039      	movs	r1, r7
 8007e42:	f7fd f80d 	bl	8004e60 <__aeabi_dcmplt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d062      	beq.n	8007f10 <pow+0x1d4>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	9306      	str	r3, [sp, #24]
 8007e4e:	4b86      	ldr	r3, [pc, #536]	; (8008068 <pow+0x32c>)
 8007e50:	960a      	str	r6, [sp, #40]	; 0x28
 8007e52:	970b      	str	r7, [sp, #44]	; 0x2c
 8007e54:	9307      	str	r3, [sp, #28]
 8007e56:	9b04      	ldr	r3, [sp, #16]
 8007e58:	930e      	str	r3, [sp, #56]	; 0x38
 8007e5a:	9b00      	ldr	r3, [sp, #0]
 8007e5c:	9c01      	ldr	r4, [sp, #4]
 8007e5e:	9308      	str	r3, [sp, #32]
 8007e60:	9409      	str	r4, [sp, #36]	; 0x24
 8007e62:	4b80      	ldr	r3, [pc, #512]	; (8008064 <pow+0x328>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d104      	bne.n	8007e76 <pow+0x13a>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	2400      	movs	r4, #0
 8007e70:	930c      	str	r3, [sp, #48]	; 0x30
 8007e72:	940d      	str	r4, [sp, #52]	; 0x34
 8007e74:	e7a2      	b.n	8007dbc <pow+0x80>
 8007e76:	2000      	movs	r0, #0
 8007e78:	497d      	ldr	r1, [pc, #500]	; (8008070 <pow+0x334>)
 8007e7a:	900c      	str	r0, [sp, #48]	; 0x30
 8007e7c:	910d      	str	r1, [sp, #52]	; 0x34
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d19c      	bne.n	8007dbc <pow+0x80>
 8007e82:	f000 ff95 	bl	8008db0 <__errno>
 8007e86:	2321      	movs	r3, #33	; 0x21
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	e7c4      	b.n	8007e16 <pow+0xda>
 8007e8c:	0020      	movs	r0, r4
 8007e8e:	0029      	movs	r1, r5
 8007e90:	f000 fe8a 	bl	8008ba8 <finite>
 8007e94:	9003      	str	r0, [sp, #12]
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d000      	beq.n	8007e9c <pow+0x160>
 8007e9a:	e0ab      	b.n	8007ff4 <pow+0x2b8>
 8007e9c:	9800      	ldr	r0, [sp, #0]
 8007e9e:	9901      	ldr	r1, [sp, #4]
 8007ea0:	f000 fe82 	bl	8008ba8 <finite>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d100      	bne.n	8007eaa <pow+0x16e>
 8007ea8:	e0a4      	b.n	8007ff4 <pow+0x2b8>
 8007eaa:	0030      	movs	r0, r6
 8007eac:	0039      	movs	r1, r7
 8007eae:	f000 fe7b 	bl	8008ba8 <finite>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d100      	bne.n	8007eb8 <pow+0x17c>
 8007eb6:	e09d      	b.n	8007ff4 <pow+0x2b8>
 8007eb8:	002b      	movs	r3, r5
 8007eba:	0022      	movs	r2, r4
 8007ebc:	0020      	movs	r0, r4
 8007ebe:	0029      	movs	r1, r5
 8007ec0:	f7ff fb16 	bl	80074f0 <__aeabi_dcmpun>
 8007ec4:	2500      	movs	r5, #0
 8007ec6:	4b67      	ldr	r3, [pc, #412]	; (8008064 <pow+0x328>)
 8007ec8:	ac06      	add	r4, sp, #24
 8007eca:	575d      	ldrsb	r5, [r3, r5]
 8007ecc:	4b66      	ldr	r3, [pc, #408]	; (8008068 <pow+0x32c>)
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d02f      	beq.n	8007f32 <pow+0x1f6>
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	6063      	str	r3, [r4, #4]
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	9206      	str	r2, [sp, #24]
 8007eda:	6223      	str	r3, [r4, #32]
 8007edc:	6126      	str	r6, [r4, #16]
 8007ede:	6167      	str	r7, [r4, #20]
 8007ee0:	9a00      	ldr	r2, [sp, #0]
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	60a2      	str	r2, [r4, #8]
 8007ee6:	60e3      	str	r3, [r4, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2300      	movs	r3, #0
 8007eec:	2d00      	cmp	r5, #0
 8007eee:	d113      	bne.n	8007f18 <pow+0x1dc>
 8007ef0:	61a2      	str	r2, [r4, #24]
 8007ef2:	61e3      	str	r3, [r4, #28]
 8007ef4:	0020      	movs	r0, r4
 8007ef6:	f000 fe5f 	bl	8008bb8 <matherr>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d014      	beq.n	8007f28 <pow+0x1ec>
 8007efe:	6a23      	ldr	r3, [r4, #32]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <pow+0x1d0>
 8007f04:	f000 ff54 	bl	8008db0 <__errno>
 8007f08:	6a23      	ldr	r3, [r4, #32]
 8007f0a:	6003      	str	r3, [r0, #0]
 8007f0c:	69e5      	ldr	r5, [r4, #28]
 8007f0e:	69a4      	ldr	r4, [r4, #24]
 8007f10:	0020      	movs	r0, r4
 8007f12:	0029      	movs	r1, r5
 8007f14:	b011      	add	sp, #68	; 0x44
 8007f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f18:	0010      	movs	r0, r2
 8007f1a:	0019      	movs	r1, r3
 8007f1c:	f7fe f91e 	bl	800615c <__aeabi_ddiv>
 8007f20:	61a0      	str	r0, [r4, #24]
 8007f22:	61e1      	str	r1, [r4, #28]
 8007f24:	2d02      	cmp	r5, #2
 8007f26:	d1e5      	bne.n	8007ef4 <pow+0x1b8>
 8007f28:	f000 ff42 	bl	8008db0 <__errno>
 8007f2c:	2321      	movs	r3, #33	; 0x21
 8007f2e:	6003      	str	r3, [r0, #0]
 8007f30:	e7e5      	b.n	8007efe <pow+0x1c2>
 8007f32:	2203      	movs	r2, #3
 8007f34:	6063      	str	r3, [r4, #4]
 8007f36:	9206      	str	r2, [sp, #24]
 8007f38:	6220      	str	r0, [r4, #32]
 8007f3a:	9a00      	ldr	r2, [sp, #0]
 8007f3c:	9b01      	ldr	r3, [sp, #4]
 8007f3e:	6126      	str	r6, [r4, #16]
 8007f40:	6167      	str	r7, [r4, #20]
 8007f42:	60a2      	str	r2, [r4, #8]
 8007f44:	60e3      	str	r3, [r4, #12]
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	d12c      	bne.n	8007fa4 <pow+0x268>
 8007f4a:	9800      	ldr	r0, [sp, #0]
 8007f4c:	9901      	ldr	r1, [sp, #4]
 8007f4e:	22e0      	movs	r2, #224	; 0xe0
 8007f50:	4b48      	ldr	r3, [pc, #288]	; (8008074 <pow+0x338>)
 8007f52:	0612      	lsls	r2, r2, #24
 8007f54:	61a2      	str	r2, [r4, #24]
 8007f56:	61e3      	str	r3, [r4, #28]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f7fc ff80 	bl	8004e60 <__aeabi_dcmplt>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d040      	beq.n	8007fe6 <pow+0x2aa>
 8007f64:	2200      	movs	r2, #0
 8007f66:	4b44      	ldr	r3, [pc, #272]	; (8008078 <pow+0x33c>)
 8007f68:	0030      	movs	r0, r6
 8007f6a:	0039      	movs	r1, r7
 8007f6c:	f7fe fd2a 	bl	80069c4 <__aeabi_dmul>
 8007f70:	0006      	movs	r6, r0
 8007f72:	000f      	movs	r7, r1
 8007f74:	f000 fe28 	bl	8008bc8 <rint>
 8007f78:	0002      	movs	r2, r0
 8007f7a:	000b      	movs	r3, r1
 8007f7c:	0030      	movs	r0, r6
 8007f7e:	0039      	movs	r1, r7
 8007f80:	f7fc ff68 	bl	8004e54 <__aeabi_dcmpeq>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d104      	bne.n	8007f92 <pow+0x256>
 8007f88:	22e0      	movs	r2, #224	; 0xe0
 8007f8a:	4b3c      	ldr	r3, [pc, #240]	; (800807c <pow+0x340>)
 8007f8c:	0612      	lsls	r2, r2, #24
 8007f8e:	61a2      	str	r2, [r4, #24]
 8007f90:	61e3      	str	r3, [r4, #28]
 8007f92:	4b34      	ldr	r3, [pc, #208]	; (8008064 <pow+0x328>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	b25b      	sxtb	r3, r3
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d124      	bne.n	8007fe6 <pow+0x2aa>
 8007f9c:	f000 ff08 	bl	8008db0 <__errno>
 8007fa0:	2322      	movs	r3, #34	; 0x22
 8007fa2:	e7c4      	b.n	8007f2e <pow+0x1f2>
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	9800      	ldr	r0, [sp, #0]
 8007fa8:	9901      	ldr	r1, [sp, #4]
 8007faa:	4b35      	ldr	r3, [pc, #212]	; (8008080 <pow+0x344>)
 8007fac:	61a2      	str	r2, [r4, #24]
 8007fae:	61e3      	str	r3, [r4, #28]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f7fc ff54 	bl	8004e60 <__aeabi_dcmplt>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d0ea      	beq.n	8007f92 <pow+0x256>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	4b2e      	ldr	r3, [pc, #184]	; (8008078 <pow+0x33c>)
 8007fc0:	0030      	movs	r0, r6
 8007fc2:	0039      	movs	r1, r7
 8007fc4:	f7fe fcfe 	bl	80069c4 <__aeabi_dmul>
 8007fc8:	0006      	movs	r6, r0
 8007fca:	000f      	movs	r7, r1
 8007fcc:	f000 fdfc 	bl	8008bc8 <rint>
 8007fd0:	0002      	movs	r2, r0
 8007fd2:	000b      	movs	r3, r1
 8007fd4:	0030      	movs	r0, r6
 8007fd6:	0039      	movs	r1, r7
 8007fd8:	f7fc ff3c 	bl	8004e54 <__aeabi_dcmpeq>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d1d8      	bne.n	8007f92 <pow+0x256>
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	4b23      	ldr	r3, [pc, #140]	; (8008070 <pow+0x334>)
 8007fe4:	e7d3      	b.n	8007f8e <pow+0x252>
 8007fe6:	0020      	movs	r0, r4
 8007fe8:	f000 fde6 	bl	8008bb8 <matherr>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d000      	beq.n	8007ff2 <pow+0x2b6>
 8007ff0:	e785      	b.n	8007efe <pow+0x1c2>
 8007ff2:	e7d3      	b.n	8007f9c <pow+0x260>
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	0020      	movs	r0, r4
 8007ffa:	0029      	movs	r1, r5
 8007ffc:	f7fc ff2a 	bl	8004e54 <__aeabi_dcmpeq>
 8008000:	2800      	cmp	r0, #0
 8008002:	d100      	bne.n	8008006 <pow+0x2ca>
 8008004:	e784      	b.n	8007f10 <pow+0x1d4>
 8008006:	9800      	ldr	r0, [sp, #0]
 8008008:	9901      	ldr	r1, [sp, #4]
 800800a:	f000 fdcd 	bl	8008ba8 <finite>
 800800e:	2800      	cmp	r0, #0
 8008010:	d100      	bne.n	8008014 <pow+0x2d8>
 8008012:	e77d      	b.n	8007f10 <pow+0x1d4>
 8008014:	0030      	movs	r0, r6
 8008016:	0039      	movs	r1, r7
 8008018:	f000 fdc6 	bl	8008ba8 <finite>
 800801c:	2800      	cmp	r0, #0
 800801e:	d100      	bne.n	8008022 <pow+0x2e6>
 8008020:	e776      	b.n	8007f10 <pow+0x1d4>
 8008022:	2304      	movs	r3, #4
 8008024:	9306      	str	r3, [sp, #24]
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <pow+0x32c>)
 8008028:	960a      	str	r6, [sp, #40]	; 0x28
 800802a:	970b      	str	r7, [sp, #44]	; 0x2c
 800802c:	9307      	str	r3, [sp, #28]
 800802e:	2300      	movs	r3, #0
 8008030:	930e      	str	r3, [sp, #56]	; 0x38
 8008032:	9b00      	ldr	r3, [sp, #0]
 8008034:	9c01      	ldr	r4, [sp, #4]
 8008036:	9308      	str	r3, [sp, #32]
 8008038:	9409      	str	r4, [sp, #36]	; 0x24
 800803a:	2300      	movs	r3, #0
 800803c:	2400      	movs	r4, #0
 800803e:	930c      	str	r3, [sp, #48]	; 0x30
 8008040:	940d      	str	r4, [sp, #52]	; 0x34
 8008042:	4b08      	ldr	r3, [pc, #32]	; (8008064 <pow+0x328>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	b25b      	sxtb	r3, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d103      	bne.n	8008054 <pow+0x318>
 800804c:	f000 feb0 	bl	8008db0 <__errno>
 8008050:	2322      	movs	r3, #34	; 0x22
 8008052:	e719      	b.n	8007e88 <pow+0x14c>
 8008054:	a806      	add	r0, sp, #24
 8008056:	f000 fdaf 	bl	8008bb8 <matherr>
 800805a:	2800      	cmp	r0, #0
 800805c:	d000      	beq.n	8008060 <pow+0x324>
 800805e:	e6da      	b.n	8007e16 <pow+0xda>
 8008060:	e7f4      	b.n	800804c <pow+0x310>
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	20000098 	.word	0x20000098
 8008068:	0800912c 	.word	0x0800912c
 800806c:	3ff00000 	.word	0x3ff00000
 8008070:	fff00000 	.word	0xfff00000
 8008074:	47efffff 	.word	0x47efffff
 8008078:	3fe00000 	.word	0x3fe00000
 800807c:	c7efffff 	.word	0xc7efffff
 8008080:	7ff00000 	.word	0x7ff00000

08008084 <__ieee754_pow>:
 8008084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008086:	b097      	sub	sp, #92	; 0x5c
 8008088:	9200      	str	r2, [sp, #0]
 800808a:	9301      	str	r3, [sp, #4]
 800808c:	9b01      	ldr	r3, [sp, #4]
 800808e:	000e      	movs	r6, r1
 8008090:	9106      	str	r1, [sp, #24]
 8008092:	9900      	ldr	r1, [sp, #0]
 8008094:	005d      	lsls	r5, r3, #1
 8008096:	9302      	str	r3, [sp, #8]
 8008098:	000b      	movs	r3, r1
 800809a:	086d      	lsrs	r5, r5, #1
 800809c:	0007      	movs	r7, r0
 800809e:	432b      	orrs	r3, r5
 80080a0:	d101      	bne.n	80080a6 <__ieee754_pow+0x22>
 80080a2:	f000 fc94 	bl	80089ce <__ieee754_pow+0x94a>
 80080a6:	4b74      	ldr	r3, [pc, #464]	; (8008278 <__ieee754_pow+0x1f4>)
 80080a8:	0074      	lsls	r4, r6, #1
 80080aa:	0864      	lsrs	r4, r4, #1
 80080ac:	469c      	mov	ip, r3
 80080ae:	429c      	cmp	r4, r3
 80080b0:	dc0b      	bgt.n	80080ca <__ieee754_pow+0x46>
 80080b2:	d104      	bne.n	80080be <__ieee754_pow+0x3a>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d108      	bne.n	80080ca <__ieee754_pow+0x46>
 80080b8:	42a5      	cmp	r5, r4
 80080ba:	dc0c      	bgt.n	80080d6 <__ieee754_pow+0x52>
 80080bc:	e001      	b.n	80080c2 <__ieee754_pow+0x3e>
 80080be:	429d      	cmp	r5, r3
 80080c0:	dc03      	bgt.n	80080ca <__ieee754_pow+0x46>
 80080c2:	4565      	cmp	r5, ip
 80080c4:	d10c      	bne.n	80080e0 <__ieee754_pow+0x5c>
 80080c6:	2900      	cmp	r1, #0
 80080c8:	d00a      	beq.n	80080e0 <__ieee754_pow+0x5c>
 80080ca:	4b6c      	ldr	r3, [pc, #432]	; (800827c <__ieee754_pow+0x1f8>)
 80080cc:	18e4      	adds	r4, r4, r3
 80080ce:	4327      	orrs	r7, r4
 80080d0:	d101      	bne.n	80080d6 <__ieee754_pow+0x52>
 80080d2:	f000 fc7c 	bl	80089ce <__ieee754_pow+0x94a>
 80080d6:	486a      	ldr	r0, [pc, #424]	; (8008280 <__ieee754_pow+0x1fc>)
 80080d8:	f000 fd70 	bl	8008bbc <nan>
 80080dc:	b017      	add	sp, #92	; 0x5c
 80080de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080e0:	2300      	movs	r3, #0
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	2e00      	cmp	r6, #0
 80080e6:	da17      	bge.n	8008118 <__ieee754_pow+0x94>
 80080e8:	4a66      	ldr	r2, [pc, #408]	; (8008284 <__ieee754_pow+0x200>)
 80080ea:	4295      	cmp	r5, r2
 80080ec:	dc47      	bgt.n	800817e <__ieee754_pow+0xfa>
 80080ee:	4a66      	ldr	r2, [pc, #408]	; (8008288 <__ieee754_pow+0x204>)
 80080f0:	4295      	cmp	r5, r2
 80080f2:	dd11      	ble.n	8008118 <__ieee754_pow+0x94>
 80080f4:	4b65      	ldr	r3, [pc, #404]	; (800828c <__ieee754_pow+0x208>)
 80080f6:	152a      	asrs	r2, r5, #20
 80080f8:	18d2      	adds	r2, r2, r3
 80080fa:	2a14      	cmp	r2, #20
 80080fc:	dd21      	ble.n	8008142 <__ieee754_pow+0xbe>
 80080fe:	2034      	movs	r0, #52	; 0x34
 8008100:	1a82      	subs	r2, r0, r2
 8008102:	9800      	ldr	r0, [sp, #0]
 8008104:	40d0      	lsrs	r0, r2
 8008106:	0003      	movs	r3, r0
 8008108:	4093      	lsls	r3, r2
 800810a:	4299      	cmp	r1, r3
 800810c:	d104      	bne.n	8008118 <__ieee754_pow+0x94>
 800810e:	2201      	movs	r2, #1
 8008110:	4010      	ands	r0, r2
 8008112:	1892      	adds	r2, r2, r2
 8008114:	1a13      	subs	r3, r2, r0
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	2900      	cmp	r1, #0
 800811a:	d155      	bne.n	80081c8 <__ieee754_pow+0x144>
 800811c:	4565      	cmp	r5, ip
 800811e:	d11f      	bne.n	8008160 <__ieee754_pow+0xdc>
 8008120:	4b56      	ldr	r3, [pc, #344]	; (800827c <__ieee754_pow+0x1f8>)
 8008122:	18e3      	adds	r3, r4, r3
 8008124:	431f      	orrs	r7, r3
 8008126:	d101      	bne.n	800812c <__ieee754_pow+0xa8>
 8008128:	f000 fc51 	bl	80089ce <__ieee754_pow+0x94a>
 800812c:	4b56      	ldr	r3, [pc, #344]	; (8008288 <__ieee754_pow+0x204>)
 800812e:	429c      	cmp	r4, r3
 8008130:	dd27      	ble.n	8008182 <__ieee754_pow+0xfe>
 8008132:	9800      	ldr	r0, [sp, #0]
 8008134:	9901      	ldr	r1, [sp, #4]
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	dacf      	bge.n	80080dc <__ieee754_pow+0x58>
 800813c:	2000      	movs	r0, #0
 800813e:	2100      	movs	r1, #0
 8008140:	e7cc      	b.n	80080dc <__ieee754_pow+0x58>
 8008142:	2900      	cmp	r1, #0
 8008144:	d140      	bne.n	80081c8 <__ieee754_pow+0x144>
 8008146:	2314      	movs	r3, #20
 8008148:	1a9a      	subs	r2, r3, r2
 800814a:	002b      	movs	r3, r5
 800814c:	4113      	asrs	r3, r2
 800814e:	0019      	movs	r1, r3
 8008150:	4091      	lsls	r1, r2
 8008152:	428d      	cmp	r5, r1
 8008154:	d104      	bne.n	8008160 <__ieee754_pow+0xdc>
 8008156:	2201      	movs	r2, #1
 8008158:	4013      	ands	r3, r2
 800815a:	1892      	adds	r2, r2, r2
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	9304      	str	r3, [sp, #16]
 8008160:	4b4b      	ldr	r3, [pc, #300]	; (8008290 <__ieee754_pow+0x20c>)
 8008162:	429d      	cmp	r5, r3
 8008164:	d119      	bne.n	800819a <__ieee754_pow+0x116>
 8008166:	9b02      	ldr	r3, [sp, #8]
 8008168:	0038      	movs	r0, r7
 800816a:	0031      	movs	r1, r6
 800816c:	2b00      	cmp	r3, #0
 800816e:	dab5      	bge.n	80080dc <__ieee754_pow+0x58>
 8008170:	003a      	movs	r2, r7
 8008172:	0033      	movs	r3, r6
 8008174:	2000      	movs	r0, #0
 8008176:	4946      	ldr	r1, [pc, #280]	; (8008290 <__ieee754_pow+0x20c>)
 8008178:	f7fd fff0 	bl	800615c <__aeabi_ddiv>
 800817c:	e7ae      	b.n	80080dc <__ieee754_pow+0x58>
 800817e:	2302      	movs	r3, #2
 8008180:	e7c9      	b.n	8008116 <__ieee754_pow+0x92>
 8008182:	9b02      	ldr	r3, [sp, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	dad9      	bge.n	800813c <__ieee754_pow+0xb8>
 8008188:	2280      	movs	r2, #128	; 0x80
 800818a:	0612      	lsls	r2, r2, #24
 800818c:	4694      	mov	ip, r2
 800818e:	9b00      	ldr	r3, [sp, #0]
 8008190:	0018      	movs	r0, r3
 8008192:	9b01      	ldr	r3, [sp, #4]
 8008194:	4463      	add	r3, ip
 8008196:	0019      	movs	r1, r3
 8008198:	e7a0      	b.n	80080dc <__ieee754_pow+0x58>
 800819a:	2380      	movs	r3, #128	; 0x80
 800819c:	9a02      	ldr	r2, [sp, #8]
 800819e:	05db      	lsls	r3, r3, #23
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d106      	bne.n	80081b2 <__ieee754_pow+0x12e>
 80081a4:	003a      	movs	r2, r7
 80081a6:	0033      	movs	r3, r6
 80081a8:	0038      	movs	r0, r7
 80081aa:	0031      	movs	r1, r6
 80081ac:	f7fe fc0a 	bl	80069c4 <__aeabi_dmul>
 80081b0:	e794      	b.n	80080dc <__ieee754_pow+0x58>
 80081b2:	4b38      	ldr	r3, [pc, #224]	; (8008294 <__ieee754_pow+0x210>)
 80081b4:	9a02      	ldr	r2, [sp, #8]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d106      	bne.n	80081c8 <__ieee754_pow+0x144>
 80081ba:	2e00      	cmp	r6, #0
 80081bc:	db04      	blt.n	80081c8 <__ieee754_pow+0x144>
 80081be:	0038      	movs	r0, r7
 80081c0:	0031      	movs	r1, r6
 80081c2:	f000 fc3d 	bl	8008a40 <__ieee754_sqrt>
 80081c6:	e789      	b.n	80080dc <__ieee754_pow+0x58>
 80081c8:	0038      	movs	r0, r7
 80081ca:	0031      	movs	r1, r6
 80081cc:	f000 fce8 	bl	8008ba0 <fabs>
 80081d0:	2f00      	cmp	r7, #0
 80081d2:	d127      	bne.n	8008224 <__ieee754_pow+0x1a0>
 80081d4:	2c00      	cmp	r4, #0
 80081d6:	d004      	beq.n	80081e2 <__ieee754_pow+0x15e>
 80081d8:	4a2d      	ldr	r2, [pc, #180]	; (8008290 <__ieee754_pow+0x20c>)
 80081da:	00b3      	lsls	r3, r6, #2
 80081dc:	089b      	lsrs	r3, r3, #2
 80081de:	4293      	cmp	r3, r2
 80081e0:	d120      	bne.n	8008224 <__ieee754_pow+0x1a0>
 80081e2:	9b02      	ldr	r3, [sp, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	da05      	bge.n	80081f4 <__ieee754_pow+0x170>
 80081e8:	0002      	movs	r2, r0
 80081ea:	000b      	movs	r3, r1
 80081ec:	2000      	movs	r0, #0
 80081ee:	4928      	ldr	r1, [pc, #160]	; (8008290 <__ieee754_pow+0x20c>)
 80081f0:	f7fd ffb4 	bl	800615c <__aeabi_ddiv>
 80081f4:	9b06      	ldr	r3, [sp, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	db00      	blt.n	80081fc <__ieee754_pow+0x178>
 80081fa:	e76f      	b.n	80080dc <__ieee754_pow+0x58>
 80081fc:	4b1f      	ldr	r3, [pc, #124]	; (800827c <__ieee754_pow+0x1f8>)
 80081fe:	18e4      	adds	r4, r4, r3
 8008200:	9b04      	ldr	r3, [sp, #16]
 8008202:	431c      	orrs	r4, r3
 8008204:	d106      	bne.n	8008214 <__ieee754_pow+0x190>
 8008206:	0002      	movs	r2, r0
 8008208:	000b      	movs	r3, r1
 800820a:	f7fe fe5b 	bl	8006ec4 <__aeabi_dsub>
 800820e:	0002      	movs	r2, r0
 8008210:	000b      	movs	r3, r1
 8008212:	e7b1      	b.n	8008178 <__ieee754_pow+0xf4>
 8008214:	9b04      	ldr	r3, [sp, #16]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d000      	beq.n	800821c <__ieee754_pow+0x198>
 800821a:	e75f      	b.n	80080dc <__ieee754_pow+0x58>
 800821c:	2480      	movs	r4, #128	; 0x80
 800821e:	0624      	lsls	r4, r4, #24
 8008220:	190b      	adds	r3, r1, r4
 8008222:	e7b8      	b.n	8008196 <__ieee754_pow+0x112>
 8008224:	0ff3      	lsrs	r3, r6, #31
 8008226:	3b01      	subs	r3, #1
 8008228:	9310      	str	r3, [sp, #64]	; 0x40
 800822a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800822c:	9b04      	ldr	r3, [sp, #16]
 800822e:	4313      	orrs	r3, r2
 8008230:	d104      	bne.n	800823c <__ieee754_pow+0x1b8>
 8008232:	003a      	movs	r2, r7
 8008234:	0033      	movs	r3, r6
 8008236:	0038      	movs	r0, r7
 8008238:	0031      	movs	r1, r6
 800823a:	e7e6      	b.n	800820a <__ieee754_pow+0x186>
 800823c:	4b16      	ldr	r3, [pc, #88]	; (8008298 <__ieee754_pow+0x214>)
 800823e:	429d      	cmp	r5, r3
 8008240:	dc00      	bgt.n	8008244 <__ieee754_pow+0x1c0>
 8008242:	e0f5      	b.n	8008430 <__ieee754_pow+0x3ac>
 8008244:	4b15      	ldr	r3, [pc, #84]	; (800829c <__ieee754_pow+0x218>)
 8008246:	429d      	cmp	r5, r3
 8008248:	dd0b      	ble.n	8008262 <__ieee754_pow+0x1de>
 800824a:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <__ieee754_pow+0x204>)
 800824c:	429c      	cmp	r4, r3
 800824e:	dc0e      	bgt.n	800826e <__ieee754_pow+0x1ea>
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	db00      	blt.n	8008258 <__ieee754_pow+0x1d4>
 8008256:	e771      	b.n	800813c <__ieee754_pow+0xb8>
 8008258:	4a11      	ldr	r2, [pc, #68]	; (80082a0 <__ieee754_pow+0x21c>)
 800825a:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <__ieee754_pow+0x220>)
 800825c:	0010      	movs	r0, r2
 800825e:	0019      	movs	r1, r3
 8008260:	e7a4      	b.n	80081ac <__ieee754_pow+0x128>
 8008262:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <__ieee754_pow+0x224>)
 8008264:	429c      	cmp	r4, r3
 8008266:	ddf3      	ble.n	8008250 <__ieee754_pow+0x1cc>
 8008268:	4b09      	ldr	r3, [pc, #36]	; (8008290 <__ieee754_pow+0x20c>)
 800826a:	429c      	cmp	r4, r3
 800826c:	dd1e      	ble.n	80082ac <__ieee754_pow+0x228>
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	dcf1      	bgt.n	8008258 <__ieee754_pow+0x1d4>
 8008274:	e762      	b.n	800813c <__ieee754_pow+0xb8>
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	7ff00000 	.word	0x7ff00000
 800827c:	c0100000 	.word	0xc0100000
 8008280:	0800912f 	.word	0x0800912f
 8008284:	433fffff 	.word	0x433fffff
 8008288:	3fefffff 	.word	0x3fefffff
 800828c:	fffffc01 	.word	0xfffffc01
 8008290:	3ff00000 	.word	0x3ff00000
 8008294:	3fe00000 	.word	0x3fe00000
 8008298:	41e00000 	.word	0x41e00000
 800829c:	43f00000 	.word	0x43f00000
 80082a0:	8800759c 	.word	0x8800759c
 80082a4:	7e37e43c 	.word	0x7e37e43c
 80082a8:	3feffffe 	.word	0x3feffffe
 80082ac:	2200      	movs	r2, #0
 80082ae:	4b52      	ldr	r3, [pc, #328]	; (80083f8 <__ieee754_pow+0x374>)
 80082b0:	f7fe fe08 	bl	8006ec4 <__aeabi_dsub>
 80082b4:	22c0      	movs	r2, #192	; 0xc0
 80082b6:	4b51      	ldr	r3, [pc, #324]	; (80083fc <__ieee754_pow+0x378>)
 80082b8:	05d2      	lsls	r2, r2, #23
 80082ba:	0006      	movs	r6, r0
 80082bc:	000f      	movs	r7, r1
 80082be:	f7fe fb81 	bl	80069c4 <__aeabi_dmul>
 80082c2:	4a4f      	ldr	r2, [pc, #316]	; (8008400 <__ieee754_pow+0x37c>)
 80082c4:	9002      	str	r0, [sp, #8]
 80082c6:	9103      	str	r1, [sp, #12]
 80082c8:	4b4e      	ldr	r3, [pc, #312]	; (8008404 <__ieee754_pow+0x380>)
 80082ca:	0030      	movs	r0, r6
 80082cc:	0039      	movs	r1, r7
 80082ce:	f7fe fb79 	bl	80069c4 <__aeabi_dmul>
 80082d2:	2200      	movs	r2, #0
 80082d4:	9006      	str	r0, [sp, #24]
 80082d6:	9107      	str	r1, [sp, #28]
 80082d8:	4b4b      	ldr	r3, [pc, #300]	; (8008408 <__ieee754_pow+0x384>)
 80082da:	0030      	movs	r0, r6
 80082dc:	0039      	movs	r1, r7
 80082de:	f7fe fb71 	bl	80069c4 <__aeabi_dmul>
 80082e2:	0002      	movs	r2, r0
 80082e4:	000b      	movs	r3, r1
 80082e6:	4849      	ldr	r0, [pc, #292]	; (800840c <__ieee754_pow+0x388>)
 80082e8:	4949      	ldr	r1, [pc, #292]	; (8008410 <__ieee754_pow+0x38c>)
 80082ea:	f7fe fdeb 	bl	8006ec4 <__aeabi_dsub>
 80082ee:	0032      	movs	r2, r6
 80082f0:	003b      	movs	r3, r7
 80082f2:	f7fe fb67 	bl	80069c4 <__aeabi_dmul>
 80082f6:	0002      	movs	r2, r0
 80082f8:	000b      	movs	r3, r1
 80082fa:	2000      	movs	r0, #0
 80082fc:	4945      	ldr	r1, [pc, #276]	; (8008414 <__ieee754_pow+0x390>)
 80082fe:	f7fe fde1 	bl	8006ec4 <__aeabi_dsub>
 8008302:	0032      	movs	r2, r6
 8008304:	0004      	movs	r4, r0
 8008306:	000d      	movs	r5, r1
 8008308:	003b      	movs	r3, r7
 800830a:	0030      	movs	r0, r6
 800830c:	0039      	movs	r1, r7
 800830e:	f7fe fb59 	bl	80069c4 <__aeabi_dmul>
 8008312:	0002      	movs	r2, r0
 8008314:	000b      	movs	r3, r1
 8008316:	0020      	movs	r0, r4
 8008318:	0029      	movs	r1, r5
 800831a:	f7fe fb53 	bl	80069c4 <__aeabi_dmul>
 800831e:	4a3e      	ldr	r2, [pc, #248]	; (8008418 <__ieee754_pow+0x394>)
 8008320:	4b36      	ldr	r3, [pc, #216]	; (80083fc <__ieee754_pow+0x378>)
 8008322:	f7fe fb4f 	bl	80069c4 <__aeabi_dmul>
 8008326:	0002      	movs	r2, r0
 8008328:	000b      	movs	r3, r1
 800832a:	9806      	ldr	r0, [sp, #24]
 800832c:	9907      	ldr	r1, [sp, #28]
 800832e:	f7fe fdc9 	bl	8006ec4 <__aeabi_dsub>
 8008332:	0002      	movs	r2, r0
 8008334:	000b      	movs	r3, r1
 8008336:	0004      	movs	r4, r0
 8008338:	000d      	movs	r5, r1
 800833a:	9802      	ldr	r0, [sp, #8]
 800833c:	9903      	ldr	r1, [sp, #12]
 800833e:	f7fd fbfd 	bl	8005b3c <__aeabi_dadd>
 8008342:	9a02      	ldr	r2, [sp, #8]
 8008344:	9b03      	ldr	r3, [sp, #12]
 8008346:	2000      	movs	r0, #0
 8008348:	9006      	str	r0, [sp, #24]
 800834a:	9107      	str	r1, [sp, #28]
 800834c:	f7fe fdba 	bl	8006ec4 <__aeabi_dsub>
 8008350:	0002      	movs	r2, r0
 8008352:	000b      	movs	r3, r1
 8008354:	0020      	movs	r0, r4
 8008356:	0029      	movs	r1, r5
 8008358:	f7fe fdb4 	bl	8006ec4 <__aeabi_dsub>
 800835c:	9b04      	ldr	r3, [sp, #16]
 800835e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008360:	3b01      	subs	r3, #1
 8008362:	0006      	movs	r6, r0
 8008364:	000f      	movs	r7, r1
 8008366:	4313      	orrs	r3, r2
 8008368:	d000      	beq.n	800836c <__ieee754_pow+0x2e8>
 800836a:	e1da      	b.n	8008722 <__ieee754_pow+0x69e>
 800836c:	2300      	movs	r3, #0
 800836e:	4c2b      	ldr	r4, [pc, #172]	; (800841c <__ieee754_pow+0x398>)
 8008370:	9302      	str	r3, [sp, #8]
 8008372:	9403      	str	r4, [sp, #12]
 8008374:	9c00      	ldr	r4, [sp, #0]
 8008376:	9d01      	ldr	r5, [sp, #4]
 8008378:	9800      	ldr	r0, [sp, #0]
 800837a:	9901      	ldr	r1, [sp, #4]
 800837c:	2400      	movs	r4, #0
 800837e:	002b      	movs	r3, r5
 8008380:	0022      	movs	r2, r4
 8008382:	f7fe fd9f 	bl	8006ec4 <__aeabi_dsub>
 8008386:	9a06      	ldr	r2, [sp, #24]
 8008388:	9b07      	ldr	r3, [sp, #28]
 800838a:	f7fe fb1b 	bl	80069c4 <__aeabi_dmul>
 800838e:	9a00      	ldr	r2, [sp, #0]
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	9004      	str	r0, [sp, #16]
 8008394:	9105      	str	r1, [sp, #20]
 8008396:	0030      	movs	r0, r6
 8008398:	0039      	movs	r1, r7
 800839a:	f7fe fb13 	bl	80069c4 <__aeabi_dmul>
 800839e:	0002      	movs	r2, r0
 80083a0:	000b      	movs	r3, r1
 80083a2:	9804      	ldr	r0, [sp, #16]
 80083a4:	9905      	ldr	r1, [sp, #20]
 80083a6:	f7fd fbc9 	bl	8005b3c <__aeabi_dadd>
 80083aa:	0022      	movs	r2, r4
 80083ac:	002b      	movs	r3, r5
 80083ae:	9004      	str	r0, [sp, #16]
 80083b0:	9105      	str	r1, [sp, #20]
 80083b2:	9806      	ldr	r0, [sp, #24]
 80083b4:	9907      	ldr	r1, [sp, #28]
 80083b6:	f7fe fb05 	bl	80069c4 <__aeabi_dmul>
 80083ba:	0006      	movs	r6, r0
 80083bc:	000f      	movs	r7, r1
 80083be:	000b      	movs	r3, r1
 80083c0:	0002      	movs	r2, r0
 80083c2:	9804      	ldr	r0, [sp, #16]
 80083c4:	9905      	ldr	r1, [sp, #20]
 80083c6:	9606      	str	r6, [sp, #24]
 80083c8:	9707      	str	r7, [sp, #28]
 80083ca:	f7fd fbb7 	bl	8005b3c <__aeabi_dadd>
 80083ce:	4b14      	ldr	r3, [pc, #80]	; (8008420 <__ieee754_pow+0x39c>)
 80083d0:	0005      	movs	r5, r0
 80083d2:	000c      	movs	r4, r1
 80083d4:	9108      	str	r1, [sp, #32]
 80083d6:	4299      	cmp	r1, r3
 80083d8:	dc00      	bgt.n	80083dc <__ieee754_pow+0x358>
 80083da:	e2d4      	b.n	8008986 <__ieee754_pow+0x902>
 80083dc:	4b11      	ldr	r3, [pc, #68]	; (8008424 <__ieee754_pow+0x3a0>)
 80083de:	18cb      	adds	r3, r1, r3
 80083e0:	4303      	orrs	r3, r0
 80083e2:	d100      	bne.n	80083e6 <__ieee754_pow+0x362>
 80083e4:	e1d6      	b.n	8008794 <__ieee754_pow+0x710>
 80083e6:	9802      	ldr	r0, [sp, #8]
 80083e8:	9903      	ldr	r1, [sp, #12]
 80083ea:	4a0f      	ldr	r2, [pc, #60]	; (8008428 <__ieee754_pow+0x3a4>)
 80083ec:	4b0f      	ldr	r3, [pc, #60]	; (800842c <__ieee754_pow+0x3a8>)
 80083ee:	f7fe fae9 	bl	80069c4 <__aeabi_dmul>
 80083f2:	4a0d      	ldr	r2, [pc, #52]	; (8008428 <__ieee754_pow+0x3a4>)
 80083f4:	4b0d      	ldr	r3, [pc, #52]	; (800842c <__ieee754_pow+0x3a8>)
 80083f6:	e6d9      	b.n	80081ac <__ieee754_pow+0x128>
 80083f8:	3ff00000 	.word	0x3ff00000
 80083fc:	3ff71547 	.word	0x3ff71547
 8008400:	f85ddf44 	.word	0xf85ddf44
 8008404:	3e54ae0b 	.word	0x3e54ae0b
 8008408:	3fd00000 	.word	0x3fd00000
 800840c:	55555555 	.word	0x55555555
 8008410:	3fd55555 	.word	0x3fd55555
 8008414:	3fe00000 	.word	0x3fe00000
 8008418:	652b82fe 	.word	0x652b82fe
 800841c:	bff00000 	.word	0xbff00000
 8008420:	408fffff 	.word	0x408fffff
 8008424:	bf700000 	.word	0xbf700000
 8008428:	8800759c 	.word	0x8800759c
 800842c:	7e37e43c 	.word	0x7e37e43c
 8008430:	4bbd      	ldr	r3, [pc, #756]	; (8008728 <__ieee754_pow+0x6a4>)
 8008432:	2200      	movs	r2, #0
 8008434:	429c      	cmp	r4, r3
 8008436:	dc06      	bgt.n	8008446 <__ieee754_pow+0x3c2>
 8008438:	2200      	movs	r2, #0
 800843a:	4bbc      	ldr	r3, [pc, #752]	; (800872c <__ieee754_pow+0x6a8>)
 800843c:	f7fe fac2 	bl	80069c4 <__aeabi_dmul>
 8008440:	2235      	movs	r2, #53	; 0x35
 8008442:	000c      	movs	r4, r1
 8008444:	4252      	negs	r2, r2
 8008446:	4dba      	ldr	r5, [pc, #744]	; (8008730 <__ieee754_pow+0x6ac>)
 8008448:	1523      	asrs	r3, r4, #20
 800844a:	195b      	adds	r3, r3, r5
 800844c:	189b      	adds	r3, r3, r2
 800844e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008450:	0324      	lsls	r4, r4, #12
 8008452:	4db8      	ldr	r5, [pc, #736]	; (8008734 <__ieee754_pow+0x6b0>)
 8008454:	4bb8      	ldr	r3, [pc, #736]	; (8008738 <__ieee754_pow+0x6b4>)
 8008456:	0b24      	lsrs	r4, r4, #12
 8008458:	4325      	orrs	r5, r4
 800845a:	2600      	movs	r6, #0
 800845c:	429c      	cmp	r4, r3
 800845e:	dd09      	ble.n	8008474 <__ieee754_pow+0x3f0>
 8008460:	4bb6      	ldr	r3, [pc, #728]	; (800873c <__ieee754_pow+0x6b8>)
 8008462:	3601      	adds	r6, #1
 8008464:	429c      	cmp	r4, r3
 8008466:	dd05      	ble.n	8008474 <__ieee754_pow+0x3f0>
 8008468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800846a:	199b      	adds	r3, r3, r6
 800846c:	2600      	movs	r6, #0
 800846e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008470:	4bb3      	ldr	r3, [pc, #716]	; (8008740 <__ieee754_pow+0x6bc>)
 8008472:	18ed      	adds	r5, r5, r3
 8008474:	0029      	movs	r1, r5
 8008476:	00f3      	lsls	r3, r6, #3
 8008478:	9311      	str	r3, [sp, #68]	; 0x44
 800847a:	4bb2      	ldr	r3, [pc, #712]	; (8008744 <__ieee754_pow+0x6c0>)
 800847c:	00f2      	lsls	r2, r6, #3
 800847e:	189b      	adds	r3, r3, r2
 8008480:	685c      	ldr	r4, [r3, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	930e      	str	r3, [sp, #56]	; 0x38
 8008486:	940f      	str	r4, [sp, #60]	; 0x3c
 8008488:	001a      	movs	r2, r3
 800848a:	0023      	movs	r3, r4
 800848c:	900c      	str	r0, [sp, #48]	; 0x30
 800848e:	910d      	str	r1, [sp, #52]	; 0x34
 8008490:	f7fe fd18 	bl	8006ec4 <__aeabi_dsub>
 8008494:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008498:	9012      	str	r0, [sp, #72]	; 0x48
 800849a:	9113      	str	r1, [sp, #76]	; 0x4c
 800849c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800849e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80084a0:	f7fd fb4c 	bl	8005b3c <__aeabi_dadd>
 80084a4:	0002      	movs	r2, r0
 80084a6:	000b      	movs	r3, r1
 80084a8:	2000      	movs	r0, #0
 80084aa:	49a2      	ldr	r1, [pc, #648]	; (8008734 <__ieee754_pow+0x6b0>)
 80084ac:	f7fd fe56 	bl	800615c <__aeabi_ddiv>
 80084b0:	0002      	movs	r2, r0
 80084b2:	000b      	movs	r3, r1
 80084b4:	9014      	str	r0, [sp, #80]	; 0x50
 80084b6:	9115      	str	r1, [sp, #84]	; 0x54
 80084b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80084bc:	f7fe fa82 	bl	80069c4 <__aeabi_dmul>
 80084c0:	9008      	str	r0, [sp, #32]
 80084c2:	9109      	str	r1, [sp, #36]	; 0x24
 80084c4:	9b08      	ldr	r3, [sp, #32]
 80084c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80084c8:	2180      	movs	r1, #128	; 0x80
 80084ca:	106d      	asrs	r5, r5, #1
 80084cc:	0589      	lsls	r1, r1, #22
 80084ce:	9306      	str	r3, [sp, #24]
 80084d0:	9407      	str	r4, [sp, #28]
 80084d2:	430d      	orrs	r5, r1
 80084d4:	2300      	movs	r3, #0
 80084d6:	2180      	movs	r1, #128	; 0x80
 80084d8:	2200      	movs	r2, #0
 80084da:	9306      	str	r3, [sp, #24]
 80084dc:	0309      	lsls	r1, r1, #12
 80084de:	9b06      	ldr	r3, [sp, #24]
 80084e0:	9c07      	ldr	r4, [sp, #28]
 80084e2:	186d      	adds	r5, r5, r1
 80084e4:	9302      	str	r3, [sp, #8]
 80084e6:	9403      	str	r4, [sp, #12]
 80084e8:	9802      	ldr	r0, [sp, #8]
 80084ea:	9903      	ldr	r1, [sp, #12]
 80084ec:	04b6      	lsls	r6, r6, #18
 80084ee:	19ab      	adds	r3, r5, r6
 80084f0:	0014      	movs	r4, r2
 80084f2:	001d      	movs	r5, r3
 80084f4:	f7fe fa66 	bl	80069c4 <__aeabi_dmul>
 80084f8:	0002      	movs	r2, r0
 80084fa:	000b      	movs	r3, r1
 80084fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80084fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008500:	f7fe fce0 	bl	8006ec4 <__aeabi_dsub>
 8008504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008508:	0006      	movs	r6, r0
 800850a:	000f      	movs	r7, r1
 800850c:	0020      	movs	r0, r4
 800850e:	0029      	movs	r1, r5
 8008510:	f7fe fcd8 	bl	8006ec4 <__aeabi_dsub>
 8008514:	0002      	movs	r2, r0
 8008516:	000b      	movs	r3, r1
 8008518:	980c      	ldr	r0, [sp, #48]	; 0x30
 800851a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800851c:	f7fe fcd2 	bl	8006ec4 <__aeabi_dsub>
 8008520:	9a02      	ldr	r2, [sp, #8]
 8008522:	9b03      	ldr	r3, [sp, #12]
 8008524:	f7fe fa4e 	bl	80069c4 <__aeabi_dmul>
 8008528:	0002      	movs	r2, r0
 800852a:	000b      	movs	r3, r1
 800852c:	0030      	movs	r0, r6
 800852e:	0039      	movs	r1, r7
 8008530:	f7fe fcc8 	bl	8006ec4 <__aeabi_dsub>
 8008534:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008538:	f7fe fa44 	bl	80069c4 <__aeabi_dmul>
 800853c:	9a08      	ldr	r2, [sp, #32]
 800853e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008540:	900c      	str	r0, [sp, #48]	; 0x30
 8008542:	910d      	str	r1, [sp, #52]	; 0x34
 8008544:	0010      	movs	r0, r2
 8008546:	0019      	movs	r1, r3
 8008548:	f7fe fa3c 	bl	80069c4 <__aeabi_dmul>
 800854c:	0006      	movs	r6, r0
 800854e:	000f      	movs	r7, r1
 8008550:	4a7d      	ldr	r2, [pc, #500]	; (8008748 <__ieee754_pow+0x6c4>)
 8008552:	4b7e      	ldr	r3, [pc, #504]	; (800874c <__ieee754_pow+0x6c8>)
 8008554:	f7fe fa36 	bl	80069c4 <__aeabi_dmul>
 8008558:	4a7d      	ldr	r2, [pc, #500]	; (8008750 <__ieee754_pow+0x6cc>)
 800855a:	4b7e      	ldr	r3, [pc, #504]	; (8008754 <__ieee754_pow+0x6d0>)
 800855c:	f7fd faee 	bl	8005b3c <__aeabi_dadd>
 8008560:	0032      	movs	r2, r6
 8008562:	003b      	movs	r3, r7
 8008564:	f7fe fa2e 	bl	80069c4 <__aeabi_dmul>
 8008568:	4a7b      	ldr	r2, [pc, #492]	; (8008758 <__ieee754_pow+0x6d4>)
 800856a:	4b7c      	ldr	r3, [pc, #496]	; (800875c <__ieee754_pow+0x6d8>)
 800856c:	f7fd fae6 	bl	8005b3c <__aeabi_dadd>
 8008570:	0032      	movs	r2, r6
 8008572:	003b      	movs	r3, r7
 8008574:	f7fe fa26 	bl	80069c4 <__aeabi_dmul>
 8008578:	4a79      	ldr	r2, [pc, #484]	; (8008760 <__ieee754_pow+0x6dc>)
 800857a:	4b7a      	ldr	r3, [pc, #488]	; (8008764 <__ieee754_pow+0x6e0>)
 800857c:	f7fd fade 	bl	8005b3c <__aeabi_dadd>
 8008580:	0032      	movs	r2, r6
 8008582:	003b      	movs	r3, r7
 8008584:	f7fe fa1e 	bl	80069c4 <__aeabi_dmul>
 8008588:	4a77      	ldr	r2, [pc, #476]	; (8008768 <__ieee754_pow+0x6e4>)
 800858a:	4b78      	ldr	r3, [pc, #480]	; (800876c <__ieee754_pow+0x6e8>)
 800858c:	f7fd fad6 	bl	8005b3c <__aeabi_dadd>
 8008590:	0032      	movs	r2, r6
 8008592:	003b      	movs	r3, r7
 8008594:	f7fe fa16 	bl	80069c4 <__aeabi_dmul>
 8008598:	4a75      	ldr	r2, [pc, #468]	; (8008770 <__ieee754_pow+0x6ec>)
 800859a:	4b76      	ldr	r3, [pc, #472]	; (8008774 <__ieee754_pow+0x6f0>)
 800859c:	f7fd face 	bl	8005b3c <__aeabi_dadd>
 80085a0:	0032      	movs	r2, r6
 80085a2:	0004      	movs	r4, r0
 80085a4:	000d      	movs	r5, r1
 80085a6:	003b      	movs	r3, r7
 80085a8:	0030      	movs	r0, r6
 80085aa:	0039      	movs	r1, r7
 80085ac:	f7fe fa0a 	bl	80069c4 <__aeabi_dmul>
 80085b0:	0002      	movs	r2, r0
 80085b2:	000b      	movs	r3, r1
 80085b4:	0020      	movs	r0, r4
 80085b6:	0029      	movs	r1, r5
 80085b8:	f7fe fa04 	bl	80069c4 <__aeabi_dmul>
 80085bc:	9a02      	ldr	r2, [sp, #8]
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	0004      	movs	r4, r0
 80085c2:	000d      	movs	r5, r1
 80085c4:	9808      	ldr	r0, [sp, #32]
 80085c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085c8:	f7fd fab8 	bl	8005b3c <__aeabi_dadd>
 80085cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d0:	f7fe f9f8 	bl	80069c4 <__aeabi_dmul>
 80085d4:	0022      	movs	r2, r4
 80085d6:	002b      	movs	r3, r5
 80085d8:	f7fd fab0 	bl	8005b3c <__aeabi_dadd>
 80085dc:	9a02      	ldr	r2, [sp, #8]
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	900e      	str	r0, [sp, #56]	; 0x38
 80085e2:	910f      	str	r1, [sp, #60]	; 0x3c
 80085e4:	0010      	movs	r0, r2
 80085e6:	0019      	movs	r1, r3
 80085e8:	f7fe f9ec 	bl	80069c4 <__aeabi_dmul>
 80085ec:	2200      	movs	r2, #0
 80085ee:	4b62      	ldr	r3, [pc, #392]	; (8008778 <__ieee754_pow+0x6f4>)
 80085f0:	0004      	movs	r4, r0
 80085f2:	000d      	movs	r5, r1
 80085f4:	f7fd faa2 	bl	8005b3c <__aeabi_dadd>
 80085f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085fc:	f7fd fa9e 	bl	8005b3c <__aeabi_dadd>
 8008600:	9e06      	ldr	r6, [sp, #24]
 8008602:	000f      	movs	r7, r1
 8008604:	0032      	movs	r2, r6
 8008606:	000b      	movs	r3, r1
 8008608:	9802      	ldr	r0, [sp, #8]
 800860a:	9903      	ldr	r1, [sp, #12]
 800860c:	f7fe f9da 	bl	80069c4 <__aeabi_dmul>
 8008610:	2200      	movs	r2, #0
 8008612:	9002      	str	r0, [sp, #8]
 8008614:	9103      	str	r1, [sp, #12]
 8008616:	4b58      	ldr	r3, [pc, #352]	; (8008778 <__ieee754_pow+0x6f4>)
 8008618:	0030      	movs	r0, r6
 800861a:	0039      	movs	r1, r7
 800861c:	f7fe fc52 	bl	8006ec4 <__aeabi_dsub>
 8008620:	0022      	movs	r2, r4
 8008622:	002b      	movs	r3, r5
 8008624:	f7fe fc4e 	bl	8006ec4 <__aeabi_dsub>
 8008628:	0002      	movs	r2, r0
 800862a:	000b      	movs	r3, r1
 800862c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800862e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008630:	f7fe fc48 	bl	8006ec4 <__aeabi_dsub>
 8008634:	9a08      	ldr	r2, [sp, #32]
 8008636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008638:	f7fe f9c4 	bl	80069c4 <__aeabi_dmul>
 800863c:	0032      	movs	r2, r6
 800863e:	0004      	movs	r4, r0
 8008640:	000d      	movs	r5, r1
 8008642:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008644:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008646:	003b      	movs	r3, r7
 8008648:	f7fe f9bc 	bl	80069c4 <__aeabi_dmul>
 800864c:	0002      	movs	r2, r0
 800864e:	000b      	movs	r3, r1
 8008650:	0020      	movs	r0, r4
 8008652:	0029      	movs	r1, r5
 8008654:	f7fd fa72 	bl	8005b3c <__aeabi_dadd>
 8008658:	0004      	movs	r4, r0
 800865a:	000d      	movs	r5, r1
 800865c:	0002      	movs	r2, r0
 800865e:	000b      	movs	r3, r1
 8008660:	9802      	ldr	r0, [sp, #8]
 8008662:	9903      	ldr	r1, [sp, #12]
 8008664:	f7fd fa6a 	bl	8005b3c <__aeabi_dadd>
 8008668:	22e0      	movs	r2, #224	; 0xe0
 800866a:	9e06      	ldr	r6, [sp, #24]
 800866c:	0612      	lsls	r2, r2, #24
 800866e:	4b43      	ldr	r3, [pc, #268]	; (800877c <__ieee754_pow+0x6f8>)
 8008670:	0030      	movs	r0, r6
 8008672:	000f      	movs	r7, r1
 8008674:	f7fe f9a6 	bl	80069c4 <__aeabi_dmul>
 8008678:	9a02      	ldr	r2, [sp, #8]
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	9008      	str	r0, [sp, #32]
 800867e:	9109      	str	r1, [sp, #36]	; 0x24
 8008680:	0030      	movs	r0, r6
 8008682:	0039      	movs	r1, r7
 8008684:	f7fe fc1e 	bl	8006ec4 <__aeabi_dsub>
 8008688:	0002      	movs	r2, r0
 800868a:	000b      	movs	r3, r1
 800868c:	0020      	movs	r0, r4
 800868e:	0029      	movs	r1, r5
 8008690:	f7fe fc18 	bl	8006ec4 <__aeabi_dsub>
 8008694:	4a3a      	ldr	r2, [pc, #232]	; (8008780 <__ieee754_pow+0x6fc>)
 8008696:	4b39      	ldr	r3, [pc, #228]	; (800877c <__ieee754_pow+0x6f8>)
 8008698:	f7fe f994 	bl	80069c4 <__aeabi_dmul>
 800869c:	4a39      	ldr	r2, [pc, #228]	; (8008784 <__ieee754_pow+0x700>)
 800869e:	0004      	movs	r4, r0
 80086a0:	000d      	movs	r5, r1
 80086a2:	4b39      	ldr	r3, [pc, #228]	; (8008788 <__ieee754_pow+0x704>)
 80086a4:	0030      	movs	r0, r6
 80086a6:	0039      	movs	r1, r7
 80086a8:	f7fe f98c 	bl	80069c4 <__aeabi_dmul>
 80086ac:	0002      	movs	r2, r0
 80086ae:	000b      	movs	r3, r1
 80086b0:	0020      	movs	r0, r4
 80086b2:	0029      	movs	r1, r5
 80086b4:	f7fd fa42 	bl	8005b3c <__aeabi_dadd>
 80086b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086ba:	4b34      	ldr	r3, [pc, #208]	; (800878c <__ieee754_pow+0x708>)
 80086bc:	189b      	adds	r3, r3, r2
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f7fd fa3b 	bl	8005b3c <__aeabi_dadd>
 80086c6:	9002      	str	r0, [sp, #8]
 80086c8:	9103      	str	r1, [sp, #12]
 80086ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80086cc:	f7fe ff64 	bl	8007598 <__aeabi_i2d>
 80086d0:	0004      	movs	r4, r0
 80086d2:	000d      	movs	r5, r1
 80086d4:	9808      	ldr	r0, [sp, #32]
 80086d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80086da:	4b2d      	ldr	r3, [pc, #180]	; (8008790 <__ieee754_pow+0x70c>)
 80086dc:	189b      	adds	r3, r3, r2
 80086de:	681e      	ldr	r6, [r3, #0]
 80086e0:	685f      	ldr	r7, [r3, #4]
 80086e2:	9a02      	ldr	r2, [sp, #8]
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	f7fd fa29 	bl	8005b3c <__aeabi_dadd>
 80086ea:	0032      	movs	r2, r6
 80086ec:	003b      	movs	r3, r7
 80086ee:	f7fd fa25 	bl	8005b3c <__aeabi_dadd>
 80086f2:	0022      	movs	r2, r4
 80086f4:	002b      	movs	r3, r5
 80086f6:	f7fd fa21 	bl	8005b3c <__aeabi_dadd>
 80086fa:	9806      	ldr	r0, [sp, #24]
 80086fc:	0022      	movs	r2, r4
 80086fe:	002b      	movs	r3, r5
 8008700:	9006      	str	r0, [sp, #24]
 8008702:	9107      	str	r1, [sp, #28]
 8008704:	f7fe fbde 	bl	8006ec4 <__aeabi_dsub>
 8008708:	0032      	movs	r2, r6
 800870a:	003b      	movs	r3, r7
 800870c:	f7fe fbda 	bl	8006ec4 <__aeabi_dsub>
 8008710:	9a08      	ldr	r2, [sp, #32]
 8008712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008714:	f7fe fbd6 	bl	8006ec4 <__aeabi_dsub>
 8008718:	0002      	movs	r2, r0
 800871a:	000b      	movs	r3, r1
 800871c:	9802      	ldr	r0, [sp, #8]
 800871e:	9903      	ldr	r1, [sp, #12]
 8008720:	e61a      	b.n	8008358 <__ieee754_pow+0x2d4>
 8008722:	2300      	movs	r3, #0
 8008724:	4c03      	ldr	r4, [pc, #12]	; (8008734 <__ieee754_pow+0x6b0>)
 8008726:	e623      	b.n	8008370 <__ieee754_pow+0x2ec>
 8008728:	000fffff 	.word	0x000fffff
 800872c:	43400000 	.word	0x43400000
 8008730:	fffffc01 	.word	0xfffffc01
 8008734:	3ff00000 	.word	0x3ff00000
 8008738:	0003988e 	.word	0x0003988e
 800873c:	000bb679 	.word	0x000bb679
 8008740:	fff00000 	.word	0xfff00000
 8008744:	08009130 	.word	0x08009130
 8008748:	4a454eef 	.word	0x4a454eef
 800874c:	3fca7e28 	.word	0x3fca7e28
 8008750:	93c9db65 	.word	0x93c9db65
 8008754:	3fcd864a 	.word	0x3fcd864a
 8008758:	a91d4101 	.word	0xa91d4101
 800875c:	3fd17460 	.word	0x3fd17460
 8008760:	518f264d 	.word	0x518f264d
 8008764:	3fd55555 	.word	0x3fd55555
 8008768:	db6fabff 	.word	0xdb6fabff
 800876c:	3fdb6db6 	.word	0x3fdb6db6
 8008770:	33333303 	.word	0x33333303
 8008774:	3fe33333 	.word	0x3fe33333
 8008778:	40080000 	.word	0x40080000
 800877c:	3feec709 	.word	0x3feec709
 8008780:	dc3a03fd 	.word	0xdc3a03fd
 8008784:	145b01f5 	.word	0x145b01f5
 8008788:	be3e2fe0 	.word	0xbe3e2fe0
 800878c:	08009150 	.word	0x08009150
 8008790:	08009140 	.word	0x08009140
 8008794:	4a90      	ldr	r2, [pc, #576]	; (80089d8 <__ieee754_pow+0x954>)
 8008796:	4b91      	ldr	r3, [pc, #580]	; (80089dc <__ieee754_pow+0x958>)
 8008798:	9804      	ldr	r0, [sp, #16]
 800879a:	9905      	ldr	r1, [sp, #20]
 800879c:	f7fd f9ce 	bl	8005b3c <__aeabi_dadd>
 80087a0:	0032      	movs	r2, r6
 80087a2:	9000      	str	r0, [sp, #0]
 80087a4:	9101      	str	r1, [sp, #4]
 80087a6:	003b      	movs	r3, r7
 80087a8:	0028      	movs	r0, r5
 80087aa:	0021      	movs	r1, r4
 80087ac:	f7fe fb8a 	bl	8006ec4 <__aeabi_dsub>
 80087b0:	0002      	movs	r2, r0
 80087b2:	000b      	movs	r3, r1
 80087b4:	9800      	ldr	r0, [sp, #0]
 80087b6:	9901      	ldr	r1, [sp, #4]
 80087b8:	f7fc fb66 	bl	8004e88 <__aeabi_dcmpgt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d000      	beq.n	80087c2 <__ieee754_pow+0x73e>
 80087c0:	e611      	b.n	80083e6 <__ieee754_pow+0x362>
 80087c2:	2100      	movs	r1, #0
 80087c4:	4a86      	ldr	r2, [pc, #536]	; (80089e0 <__ieee754_pow+0x95c>)
 80087c6:	0063      	lsls	r3, r4, #1
 80087c8:	085b      	lsrs	r3, r3, #1
 80087ca:	9100      	str	r1, [sp, #0]
 80087cc:	4293      	cmp	r3, r2
 80087ce:	dd25      	ble.n	800881c <__ieee754_pow+0x798>
 80087d0:	4a84      	ldr	r2, [pc, #528]	; (80089e4 <__ieee754_pow+0x960>)
 80087d2:	151b      	asrs	r3, r3, #20
 80087d4:	189b      	adds	r3, r3, r2
 80087d6:	2280      	movs	r2, #128	; 0x80
 80087d8:	0352      	lsls	r2, r2, #13
 80087da:	4694      	mov	ip, r2
 80087dc:	411a      	asrs	r2, r3
 80087de:	1914      	adds	r4, r2, r4
 80087e0:	0060      	lsls	r0, r4, #1
 80087e2:	4b81      	ldr	r3, [pc, #516]	; (80089e8 <__ieee754_pow+0x964>)
 80087e4:	0d40      	lsrs	r0, r0, #21
 80087e6:	4d81      	ldr	r5, [pc, #516]	; (80089ec <__ieee754_pow+0x968>)
 80087e8:	18c0      	adds	r0, r0, r3
 80087ea:	4105      	asrs	r5, r0
 80087ec:	0021      	movs	r1, r4
 80087ee:	43a9      	bics	r1, r5
 80087f0:	000b      	movs	r3, r1
 80087f2:	4661      	mov	r1, ip
 80087f4:	0324      	lsls	r4, r4, #12
 80087f6:	0b24      	lsrs	r4, r4, #12
 80087f8:	4321      	orrs	r1, r4
 80087fa:	2414      	movs	r4, #20
 80087fc:	1a20      	subs	r0, r4, r0
 80087fe:	4101      	asrs	r1, r0
 8008800:	9100      	str	r1, [sp, #0]
 8008802:	9908      	ldr	r1, [sp, #32]
 8008804:	2200      	movs	r2, #0
 8008806:	2900      	cmp	r1, #0
 8008808:	da02      	bge.n	8008810 <__ieee754_pow+0x78c>
 800880a:	9900      	ldr	r1, [sp, #0]
 800880c:	4249      	negs	r1, r1
 800880e:	9100      	str	r1, [sp, #0]
 8008810:	0030      	movs	r0, r6
 8008812:	0039      	movs	r1, r7
 8008814:	f7fe fb56 	bl	8006ec4 <__aeabi_dsub>
 8008818:	9006      	str	r0, [sp, #24]
 800881a:	9107      	str	r1, [sp, #28]
 800881c:	9a04      	ldr	r2, [sp, #16]
 800881e:	9b05      	ldr	r3, [sp, #20]
 8008820:	9806      	ldr	r0, [sp, #24]
 8008822:	9907      	ldr	r1, [sp, #28]
 8008824:	2600      	movs	r6, #0
 8008826:	f7fd f989 	bl	8005b3c <__aeabi_dadd>
 800882a:	2200      	movs	r2, #0
 800882c:	4b70      	ldr	r3, [pc, #448]	; (80089f0 <__ieee754_pow+0x96c>)
 800882e:	0030      	movs	r0, r6
 8008830:	000f      	movs	r7, r1
 8008832:	f7fe f8c7 	bl	80069c4 <__aeabi_dmul>
 8008836:	9a06      	ldr	r2, [sp, #24]
 8008838:	9b07      	ldr	r3, [sp, #28]
 800883a:	9008      	str	r0, [sp, #32]
 800883c:	9109      	str	r1, [sp, #36]	; 0x24
 800883e:	0030      	movs	r0, r6
 8008840:	0039      	movs	r1, r7
 8008842:	f7fe fb3f 	bl	8006ec4 <__aeabi_dsub>
 8008846:	0002      	movs	r2, r0
 8008848:	000b      	movs	r3, r1
 800884a:	9804      	ldr	r0, [sp, #16]
 800884c:	9905      	ldr	r1, [sp, #20]
 800884e:	f7fe fb39 	bl	8006ec4 <__aeabi_dsub>
 8008852:	4a68      	ldr	r2, [pc, #416]	; (80089f4 <__ieee754_pow+0x970>)
 8008854:	4b68      	ldr	r3, [pc, #416]	; (80089f8 <__ieee754_pow+0x974>)
 8008856:	f7fe f8b5 	bl	80069c4 <__aeabi_dmul>
 800885a:	4a68      	ldr	r2, [pc, #416]	; (80089fc <__ieee754_pow+0x978>)
 800885c:	0004      	movs	r4, r0
 800885e:	000d      	movs	r5, r1
 8008860:	4b67      	ldr	r3, [pc, #412]	; (8008a00 <__ieee754_pow+0x97c>)
 8008862:	0030      	movs	r0, r6
 8008864:	0039      	movs	r1, r7
 8008866:	f7fe f8ad 	bl	80069c4 <__aeabi_dmul>
 800886a:	0002      	movs	r2, r0
 800886c:	000b      	movs	r3, r1
 800886e:	0020      	movs	r0, r4
 8008870:	0029      	movs	r1, r5
 8008872:	f7fd f963 	bl	8005b3c <__aeabi_dadd>
 8008876:	0004      	movs	r4, r0
 8008878:	000d      	movs	r5, r1
 800887a:	0002      	movs	r2, r0
 800887c:	000b      	movs	r3, r1
 800887e:	9808      	ldr	r0, [sp, #32]
 8008880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008882:	f7fd f95b 	bl	8005b3c <__aeabi_dadd>
 8008886:	9a08      	ldr	r2, [sp, #32]
 8008888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888a:	0006      	movs	r6, r0
 800888c:	000f      	movs	r7, r1
 800888e:	f7fe fb19 	bl	8006ec4 <__aeabi_dsub>
 8008892:	0002      	movs	r2, r0
 8008894:	000b      	movs	r3, r1
 8008896:	0020      	movs	r0, r4
 8008898:	0029      	movs	r1, r5
 800889a:	f7fe fb13 	bl	8006ec4 <__aeabi_dsub>
 800889e:	0032      	movs	r2, r6
 80088a0:	9004      	str	r0, [sp, #16]
 80088a2:	9105      	str	r1, [sp, #20]
 80088a4:	003b      	movs	r3, r7
 80088a6:	0030      	movs	r0, r6
 80088a8:	0039      	movs	r1, r7
 80088aa:	f7fe f88b 	bl	80069c4 <__aeabi_dmul>
 80088ae:	0004      	movs	r4, r0
 80088b0:	000d      	movs	r5, r1
 80088b2:	4a54      	ldr	r2, [pc, #336]	; (8008a04 <__ieee754_pow+0x980>)
 80088b4:	4b54      	ldr	r3, [pc, #336]	; (8008a08 <__ieee754_pow+0x984>)
 80088b6:	f7fe f885 	bl	80069c4 <__aeabi_dmul>
 80088ba:	4a54      	ldr	r2, [pc, #336]	; (8008a0c <__ieee754_pow+0x988>)
 80088bc:	4b54      	ldr	r3, [pc, #336]	; (8008a10 <__ieee754_pow+0x98c>)
 80088be:	f7fe fb01 	bl	8006ec4 <__aeabi_dsub>
 80088c2:	0022      	movs	r2, r4
 80088c4:	002b      	movs	r3, r5
 80088c6:	f7fe f87d 	bl	80069c4 <__aeabi_dmul>
 80088ca:	4a52      	ldr	r2, [pc, #328]	; (8008a14 <__ieee754_pow+0x990>)
 80088cc:	4b52      	ldr	r3, [pc, #328]	; (8008a18 <__ieee754_pow+0x994>)
 80088ce:	f7fd f935 	bl	8005b3c <__aeabi_dadd>
 80088d2:	0022      	movs	r2, r4
 80088d4:	002b      	movs	r3, r5
 80088d6:	f7fe f875 	bl	80069c4 <__aeabi_dmul>
 80088da:	4a50      	ldr	r2, [pc, #320]	; (8008a1c <__ieee754_pow+0x998>)
 80088dc:	4b50      	ldr	r3, [pc, #320]	; (8008a20 <__ieee754_pow+0x99c>)
 80088de:	f7fe faf1 	bl	8006ec4 <__aeabi_dsub>
 80088e2:	0022      	movs	r2, r4
 80088e4:	002b      	movs	r3, r5
 80088e6:	f7fe f86d 	bl	80069c4 <__aeabi_dmul>
 80088ea:	4a4e      	ldr	r2, [pc, #312]	; (8008a24 <__ieee754_pow+0x9a0>)
 80088ec:	4b4e      	ldr	r3, [pc, #312]	; (8008a28 <__ieee754_pow+0x9a4>)
 80088ee:	f7fd f925 	bl	8005b3c <__aeabi_dadd>
 80088f2:	0022      	movs	r2, r4
 80088f4:	002b      	movs	r3, r5
 80088f6:	f7fe f865 	bl	80069c4 <__aeabi_dmul>
 80088fa:	0002      	movs	r2, r0
 80088fc:	000b      	movs	r3, r1
 80088fe:	0030      	movs	r0, r6
 8008900:	0039      	movs	r1, r7
 8008902:	f7fe fadf 	bl	8006ec4 <__aeabi_dsub>
 8008906:	0004      	movs	r4, r0
 8008908:	000d      	movs	r5, r1
 800890a:	0002      	movs	r2, r0
 800890c:	000b      	movs	r3, r1
 800890e:	0030      	movs	r0, r6
 8008910:	0039      	movs	r1, r7
 8008912:	f7fe f857 	bl	80069c4 <__aeabi_dmul>
 8008916:	2380      	movs	r3, #128	; 0x80
 8008918:	9006      	str	r0, [sp, #24]
 800891a:	9107      	str	r1, [sp, #28]
 800891c:	2200      	movs	r2, #0
 800891e:	05db      	lsls	r3, r3, #23
 8008920:	0020      	movs	r0, r4
 8008922:	0029      	movs	r1, r5
 8008924:	f7fe face 	bl	8006ec4 <__aeabi_dsub>
 8008928:	0002      	movs	r2, r0
 800892a:	000b      	movs	r3, r1
 800892c:	9806      	ldr	r0, [sp, #24]
 800892e:	9907      	ldr	r1, [sp, #28]
 8008930:	f7fd fc14 	bl	800615c <__aeabi_ddiv>
 8008934:	9a04      	ldr	r2, [sp, #16]
 8008936:	9b05      	ldr	r3, [sp, #20]
 8008938:	0004      	movs	r4, r0
 800893a:	000d      	movs	r5, r1
 800893c:	0030      	movs	r0, r6
 800893e:	0039      	movs	r1, r7
 8008940:	f7fe f840 	bl	80069c4 <__aeabi_dmul>
 8008944:	9a04      	ldr	r2, [sp, #16]
 8008946:	9b05      	ldr	r3, [sp, #20]
 8008948:	f7fd f8f8 	bl	8005b3c <__aeabi_dadd>
 800894c:	0002      	movs	r2, r0
 800894e:	000b      	movs	r3, r1
 8008950:	0020      	movs	r0, r4
 8008952:	0029      	movs	r1, r5
 8008954:	f7fe fab6 	bl	8006ec4 <__aeabi_dsub>
 8008958:	0032      	movs	r2, r6
 800895a:	003b      	movs	r3, r7
 800895c:	f7fe fab2 	bl	8006ec4 <__aeabi_dsub>
 8008960:	0002      	movs	r2, r0
 8008962:	000b      	movs	r3, r1
 8008964:	2000      	movs	r0, #0
 8008966:	4931      	ldr	r1, [pc, #196]	; (8008a2c <__ieee754_pow+0x9a8>)
 8008968:	f7fe faac 	bl	8006ec4 <__aeabi_dsub>
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	051b      	lsls	r3, r3, #20
 8008970:	185b      	adds	r3, r3, r1
 8008972:	151a      	asrs	r2, r3, #20
 8008974:	2a00      	cmp	r2, #0
 8008976:	dc28      	bgt.n	80089ca <__ieee754_pow+0x946>
 8008978:	9a00      	ldr	r2, [sp, #0]
 800897a:	f000 f9ad 	bl	8008cd8 <scalbn>
 800897e:	9a02      	ldr	r2, [sp, #8]
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	f7ff fc13 	bl	80081ac <__ieee754_pow+0x128>
 8008986:	4a2a      	ldr	r2, [pc, #168]	; (8008a30 <__ieee754_pow+0x9ac>)
 8008988:	004b      	lsls	r3, r1, #1
 800898a:	085b      	lsrs	r3, r3, #1
 800898c:	4293      	cmp	r3, r2
 800898e:	dc00      	bgt.n	8008992 <__ieee754_pow+0x90e>
 8008990:	e717      	b.n	80087c2 <__ieee754_pow+0x73e>
 8008992:	4b28      	ldr	r3, [pc, #160]	; (8008a34 <__ieee754_pow+0x9b0>)
 8008994:	18cb      	adds	r3, r1, r3
 8008996:	4303      	orrs	r3, r0
 8008998:	d009      	beq.n	80089ae <__ieee754_pow+0x92a>
 800899a:	9802      	ldr	r0, [sp, #8]
 800899c:	9903      	ldr	r1, [sp, #12]
 800899e:	4a26      	ldr	r2, [pc, #152]	; (8008a38 <__ieee754_pow+0x9b4>)
 80089a0:	4b26      	ldr	r3, [pc, #152]	; (8008a3c <__ieee754_pow+0x9b8>)
 80089a2:	f7fe f80f 	bl	80069c4 <__aeabi_dmul>
 80089a6:	4a24      	ldr	r2, [pc, #144]	; (8008a38 <__ieee754_pow+0x9b4>)
 80089a8:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <__ieee754_pow+0x9b8>)
 80089aa:	f7ff fbff 	bl	80081ac <__ieee754_pow+0x128>
 80089ae:	0032      	movs	r2, r6
 80089b0:	003b      	movs	r3, r7
 80089b2:	f7fe fa87 	bl	8006ec4 <__aeabi_dsub>
 80089b6:	0002      	movs	r2, r0
 80089b8:	000b      	movs	r3, r1
 80089ba:	9804      	ldr	r0, [sp, #16]
 80089bc:	9905      	ldr	r1, [sp, #20]
 80089be:	f7fc fa59 	bl	8004e74 <__aeabi_dcmple>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d100      	bne.n	80089c8 <__ieee754_pow+0x944>
 80089c6:	e6fc      	b.n	80087c2 <__ieee754_pow+0x73e>
 80089c8:	e7e7      	b.n	800899a <__ieee754_pow+0x916>
 80089ca:	0019      	movs	r1, r3
 80089cc:	e7d7      	b.n	800897e <__ieee754_pow+0x8fa>
 80089ce:	2000      	movs	r0, #0
 80089d0:	4916      	ldr	r1, [pc, #88]	; (8008a2c <__ieee754_pow+0x9a8>)
 80089d2:	f7ff fb83 	bl	80080dc <__ieee754_pow+0x58>
 80089d6:	46c0      	nop			; (mov r8, r8)
 80089d8:	652b82fe 	.word	0x652b82fe
 80089dc:	3c971547 	.word	0x3c971547
 80089e0:	3fe00000 	.word	0x3fe00000
 80089e4:	fffffc02 	.word	0xfffffc02
 80089e8:	fffffc01 	.word	0xfffffc01
 80089ec:	000fffff 	.word	0x000fffff
 80089f0:	3fe62e43 	.word	0x3fe62e43
 80089f4:	fefa39ef 	.word	0xfefa39ef
 80089f8:	3fe62e42 	.word	0x3fe62e42
 80089fc:	0ca86c39 	.word	0x0ca86c39
 8008a00:	be205c61 	.word	0xbe205c61
 8008a04:	72bea4d0 	.word	0x72bea4d0
 8008a08:	3e663769 	.word	0x3e663769
 8008a0c:	c5d26bf1 	.word	0xc5d26bf1
 8008a10:	3ebbbd41 	.word	0x3ebbbd41
 8008a14:	af25de2c 	.word	0xaf25de2c
 8008a18:	3f11566a 	.word	0x3f11566a
 8008a1c:	16bebd93 	.word	0x16bebd93
 8008a20:	3f66c16c 	.word	0x3f66c16c
 8008a24:	5555553e 	.word	0x5555553e
 8008a28:	3fc55555 	.word	0x3fc55555
 8008a2c:	3ff00000 	.word	0x3ff00000
 8008a30:	4090cbff 	.word	0x4090cbff
 8008a34:	3f6f3400 	.word	0x3f6f3400
 8008a38:	c2f8f359 	.word	0xc2f8f359
 8008a3c:	01a56e1f 	.word	0x01a56e1f

08008a40 <__ieee754_sqrt>:
 8008a40:	4b54      	ldr	r3, [pc, #336]	; (8008b94 <__ieee754_sqrt+0x154>)
 8008a42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a44:	001e      	movs	r6, r3
 8008a46:	0005      	movs	r5, r0
 8008a48:	000c      	movs	r4, r1
 8008a4a:	0002      	movs	r2, r0
 8008a4c:	400e      	ands	r6, r1
 8008a4e:	429e      	cmp	r6, r3
 8008a50:	d10f      	bne.n	8008a72 <__ieee754_sqrt+0x32>
 8008a52:	0002      	movs	r2, r0
 8008a54:	000b      	movs	r3, r1
 8008a56:	f7fd ffb5 	bl	80069c4 <__aeabi_dmul>
 8008a5a:	0002      	movs	r2, r0
 8008a5c:	000b      	movs	r3, r1
 8008a5e:	0028      	movs	r0, r5
 8008a60:	0021      	movs	r1, r4
 8008a62:	f7fd f86b 	bl	8005b3c <__aeabi_dadd>
 8008a66:	0005      	movs	r5, r0
 8008a68:	000c      	movs	r4, r1
 8008a6a:	0028      	movs	r0, r5
 8008a6c:	0021      	movs	r1, r4
 8008a6e:	b003      	add	sp, #12
 8008a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a72:	2900      	cmp	r1, #0
 8008a74:	dc0e      	bgt.n	8008a94 <__ieee754_sqrt+0x54>
 8008a76:	004b      	lsls	r3, r1, #1
 8008a78:	085b      	lsrs	r3, r3, #1
 8008a7a:	4303      	orrs	r3, r0
 8008a7c:	d0f5      	beq.n	8008a6a <__ieee754_sqrt+0x2a>
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	d00a      	beq.n	8008a98 <__ieee754_sqrt+0x58>
 8008a82:	0002      	movs	r2, r0
 8008a84:	000b      	movs	r3, r1
 8008a86:	f7fe fa1d 	bl	8006ec4 <__aeabi_dsub>
 8008a8a:	0002      	movs	r2, r0
 8008a8c:	000b      	movs	r3, r1
 8008a8e:	f7fd fb65 	bl	800615c <__aeabi_ddiv>
 8008a92:	e7e8      	b.n	8008a66 <__ieee754_sqrt+0x26>
 8008a94:	150b      	asrs	r3, r1, #20
 8008a96:	d10f      	bne.n	8008ab8 <__ieee754_sqrt+0x78>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2900      	cmp	r1, #0
 8008a9c:	d06f      	beq.n	8008b7e <__ieee754_sqrt+0x13e>
 8008a9e:	2480      	movs	r4, #128	; 0x80
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	0364      	lsls	r4, r4, #13
 8008aa4:	4221      	tst	r1, r4
 8008aa6:	d06e      	beq.n	8008b86 <__ieee754_sqrt+0x146>
 8008aa8:	1e44      	subs	r4, r0, #1
 8008aaa:	1b1b      	subs	r3, r3, r4
 8008aac:	2420      	movs	r4, #32
 8008aae:	0015      	movs	r5, r2
 8008ab0:	1a24      	subs	r4, r4, r0
 8008ab2:	40e5      	lsrs	r5, r4
 8008ab4:	4082      	lsls	r2, r0
 8008ab6:	4329      	orrs	r1, r5
 8008ab8:	4837      	ldr	r0, [pc, #220]	; (8008b98 <__ieee754_sqrt+0x158>)
 8008aba:	0309      	lsls	r1, r1, #12
 8008abc:	1818      	adds	r0, r3, r0
 8008abe:	2380      	movs	r3, #128	; 0x80
 8008ac0:	0b09      	lsrs	r1, r1, #12
 8008ac2:	035b      	lsls	r3, r3, #13
 8008ac4:	4319      	orrs	r1, r3
 8008ac6:	07c3      	lsls	r3, r0, #31
 8008ac8:	d503      	bpl.n	8008ad2 <__ieee754_sqrt+0x92>
 8008aca:	0fd3      	lsrs	r3, r2, #31
 8008acc:	0049      	lsls	r1, r1, #1
 8008ace:	1859      	adds	r1, r3, r1
 8008ad0:	0052      	lsls	r2, r2, #1
 8008ad2:	2400      	movs	r4, #0
 8008ad4:	1043      	asrs	r3, r0, #1
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	0fd3      	lsrs	r3, r2, #31
 8008ada:	185b      	adds	r3, r3, r1
 8008adc:	2580      	movs	r5, #128	; 0x80
 8008ade:	185b      	adds	r3, r3, r1
 8008ae0:	0020      	movs	r0, r4
 8008ae2:	2116      	movs	r1, #22
 8008ae4:	0052      	lsls	r2, r2, #1
 8008ae6:	03ad      	lsls	r5, r5, #14
 8008ae8:	1946      	adds	r6, r0, r5
 8008aea:	429e      	cmp	r6, r3
 8008aec:	dc02      	bgt.n	8008af4 <__ieee754_sqrt+0xb4>
 8008aee:	1970      	adds	r0, r6, r5
 8008af0:	1b9b      	subs	r3, r3, r6
 8008af2:	1964      	adds	r4, r4, r5
 8008af4:	0fd6      	lsrs	r6, r2, #31
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	3901      	subs	r1, #1
 8008afa:	18f3      	adds	r3, r6, r3
 8008afc:	0052      	lsls	r2, r2, #1
 8008afe:	086d      	lsrs	r5, r5, #1
 8008b00:	2900      	cmp	r1, #0
 8008b02:	d1f1      	bne.n	8008ae8 <__ieee754_sqrt+0xa8>
 8008b04:	2520      	movs	r5, #32
 8008b06:	2680      	movs	r6, #128	; 0x80
 8008b08:	46ac      	mov	ip, r5
 8008b0a:	9100      	str	r1, [sp, #0]
 8008b0c:	0636      	lsls	r6, r6, #24
 8008b0e:	9d00      	ldr	r5, [sp, #0]
 8008b10:	1977      	adds	r7, r6, r5
 8008b12:	4283      	cmp	r3, r0
 8008b14:	dc02      	bgt.n	8008b1c <__ieee754_sqrt+0xdc>
 8008b16:	d112      	bne.n	8008b3e <__ieee754_sqrt+0xfe>
 8008b18:	4297      	cmp	r7, r2
 8008b1a:	d810      	bhi.n	8008b3e <__ieee754_sqrt+0xfe>
 8008b1c:	19bd      	adds	r5, r7, r6
 8008b1e:	9500      	str	r5, [sp, #0]
 8008b20:	0005      	movs	r5, r0
 8008b22:	2f00      	cmp	r7, #0
 8008b24:	da03      	bge.n	8008b2e <__ieee754_sqrt+0xee>
 8008b26:	9d00      	ldr	r5, [sp, #0]
 8008b28:	43ed      	mvns	r5, r5
 8008b2a:	0fed      	lsrs	r5, r5, #31
 8008b2c:	1945      	adds	r5, r0, r5
 8008b2e:	1a1b      	subs	r3, r3, r0
 8008b30:	42ba      	cmp	r2, r7
 8008b32:	4180      	sbcs	r0, r0
 8008b34:	4240      	negs	r0, r0
 8008b36:	1a1b      	subs	r3, r3, r0
 8008b38:	0028      	movs	r0, r5
 8008b3a:	1bd2      	subs	r2, r2, r7
 8008b3c:	1989      	adds	r1, r1, r6
 8008b3e:	0fd5      	lsrs	r5, r2, #31
 8008b40:	18ed      	adds	r5, r5, r3
 8008b42:	18eb      	adds	r3, r5, r3
 8008b44:	2501      	movs	r5, #1
 8008b46:	426d      	negs	r5, r5
 8008b48:	44ac      	add	ip, r5
 8008b4a:	4665      	mov	r5, ip
 8008b4c:	0052      	lsls	r2, r2, #1
 8008b4e:	0876      	lsrs	r6, r6, #1
 8008b50:	2d00      	cmp	r5, #0
 8008b52:	d1dc      	bne.n	8008b0e <__ieee754_sqrt+0xce>
 8008b54:	4313      	orrs	r3, r2
 8008b56:	d003      	beq.n	8008b60 <__ieee754_sqrt+0x120>
 8008b58:	1c4b      	adds	r3, r1, #1
 8008b5a:	d117      	bne.n	8008b8c <__ieee754_sqrt+0x14c>
 8008b5c:	4661      	mov	r1, ip
 8008b5e:	3401      	adds	r4, #1
 8008b60:	4b0e      	ldr	r3, [pc, #56]	; (8008b9c <__ieee754_sqrt+0x15c>)
 8008b62:	1060      	asrs	r0, r4, #1
 8008b64:	18c0      	adds	r0, r0, r3
 8008b66:	0849      	lsrs	r1, r1, #1
 8008b68:	07e3      	lsls	r3, r4, #31
 8008b6a:	d502      	bpl.n	8008b72 <__ieee754_sqrt+0x132>
 8008b6c:	2380      	movs	r3, #128	; 0x80
 8008b6e:	061b      	lsls	r3, r3, #24
 8008b70:	4319      	orrs	r1, r3
 8008b72:	9b01      	ldr	r3, [sp, #4]
 8008b74:	000d      	movs	r5, r1
 8008b76:	051c      	lsls	r4, r3, #20
 8008b78:	1823      	adds	r3, r4, r0
 8008b7a:	001c      	movs	r4, r3
 8008b7c:	e775      	b.n	8008a6a <__ieee754_sqrt+0x2a>
 8008b7e:	0ad1      	lsrs	r1, r2, #11
 8008b80:	3b15      	subs	r3, #21
 8008b82:	0552      	lsls	r2, r2, #21
 8008b84:	e789      	b.n	8008a9a <__ieee754_sqrt+0x5a>
 8008b86:	0049      	lsls	r1, r1, #1
 8008b88:	3001      	adds	r0, #1
 8008b8a:	e78b      	b.n	8008aa4 <__ieee754_sqrt+0x64>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	3101      	adds	r1, #1
 8008b90:	4399      	bics	r1, r3
 8008b92:	e7e5      	b.n	8008b60 <__ieee754_sqrt+0x120>
 8008b94:	7ff00000 	.word	0x7ff00000
 8008b98:	fffffc01 	.word	0xfffffc01
 8008b9c:	3fe00000 	.word	0x3fe00000

08008ba0 <fabs>:
 8008ba0:	0049      	lsls	r1, r1, #1
 8008ba2:	084b      	lsrs	r3, r1, #1
 8008ba4:	0019      	movs	r1, r3
 8008ba6:	4770      	bx	lr

08008ba8 <finite>:
 8008ba8:	0048      	lsls	r0, r1, #1
 8008baa:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <finite+0xc>)
 8008bac:	0840      	lsrs	r0, r0, #1
 8008bae:	18c0      	adds	r0, r0, r3
 8008bb0:	0fc0      	lsrs	r0, r0, #31
 8008bb2:	4770      	bx	lr
 8008bb4:	80100000 	.word	0x80100000

08008bb8 <matherr>:
 8008bb8:	2000      	movs	r0, #0
 8008bba:	4770      	bx	lr

08008bbc <nan>:
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	4901      	ldr	r1, [pc, #4]	; (8008bc4 <nan+0x8>)
 8008bc0:	4770      	bx	lr
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	7ff80000 	.word	0x7ff80000

08008bc8 <rint>:
 8008bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bca:	004e      	lsls	r6, r1, #1
 8008bcc:	0d76      	lsrs	r6, r6, #21
 8008bce:	46b4      	mov	ip, r6
 8008bd0:	4e3d      	ldr	r6, [pc, #244]	; (8008cc8 <rint+0x100>)
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	4466      	add	r6, ip
 8008bd6:	0005      	movs	r5, r0
 8008bd8:	000b      	movs	r3, r1
 8008bda:	9101      	str	r1, [sp, #4]
 8008bdc:	0002      	movs	r2, r0
 8008bde:	0fcc      	lsrs	r4, r1, #31
 8008be0:	2e13      	cmp	r6, #19
 8008be2:	dc55      	bgt.n	8008c90 <rint+0xc8>
 8008be4:	2e00      	cmp	r6, #0
 8008be6:	da28      	bge.n	8008c3a <rint+0x72>
 8008be8:	004a      	lsls	r2, r1, #1
 8008bea:	0852      	lsrs	r2, r2, #1
 8008bec:	4302      	orrs	r2, r0
 8008bee:	d022      	beq.n	8008c36 <rint+0x6e>
 8008bf0:	030a      	lsls	r2, r1, #12
 8008bf2:	0b12      	lsrs	r2, r2, #12
 8008bf4:	4315      	orrs	r5, r2
 8008bf6:	426a      	negs	r2, r5
 8008bf8:	432a      	orrs	r2, r5
 8008bfa:	2580      	movs	r5, #128	; 0x80
 8008bfc:	0c4b      	lsrs	r3, r1, #17
 8008bfe:	0b12      	lsrs	r2, r2, #12
 8008c00:	032d      	lsls	r5, r5, #12
 8008c02:	045b      	lsls	r3, r3, #17
 8008c04:	402a      	ands	r2, r5
 8008c06:	431a      	orrs	r2, r3
 8008c08:	4b30      	ldr	r3, [pc, #192]	; (8008ccc <rint+0x104>)
 8008c0a:	0011      	movs	r1, r2
 8008c0c:	00e2      	lsls	r2, r4, #3
 8008c0e:	189b      	adds	r3, r3, r2
 8008c10:	681e      	ldr	r6, [r3, #0]
 8008c12:	685f      	ldr	r7, [r3, #4]
 8008c14:	0032      	movs	r2, r6
 8008c16:	003b      	movs	r3, r7
 8008c18:	f7fc ff90 	bl	8005b3c <__aeabi_dadd>
 8008c1c:	9002      	str	r0, [sp, #8]
 8008c1e:	9103      	str	r1, [sp, #12]
 8008c20:	9802      	ldr	r0, [sp, #8]
 8008c22:	9903      	ldr	r1, [sp, #12]
 8008c24:	003b      	movs	r3, r7
 8008c26:	0032      	movs	r2, r6
 8008c28:	f7fe f94c 	bl	8006ec4 <__aeabi_dsub>
 8008c2c:	004b      	lsls	r3, r1, #1
 8008c2e:	085b      	lsrs	r3, r3, #1
 8008c30:	07e4      	lsls	r4, r4, #31
 8008c32:	4323      	orrs	r3, r4
 8008c34:	0019      	movs	r1, r3
 8008c36:	b005      	add	sp, #20
 8008c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3a:	4d25      	ldr	r5, [pc, #148]	; (8008cd0 <rint+0x108>)
 8008c3c:	4135      	asrs	r5, r6
 8008c3e:	002f      	movs	r7, r5
 8008c40:	400f      	ands	r7, r1
 8008c42:	4307      	orrs	r7, r0
 8008c44:	d0f7      	beq.n	8008c36 <rint+0x6e>
 8008c46:	086d      	lsrs	r5, r5, #1
 8008c48:	0028      	movs	r0, r5
 8008c4a:	4008      	ands	r0, r1
 8008c4c:	4310      	orrs	r0, r2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	4290      	cmp	r0, r2
 8008c52:	d009      	beq.n	8008c68 <rint+0xa0>
 8008c54:	2e13      	cmp	r6, #19
 8008c56:	d101      	bne.n	8008c5c <rint+0x94>
 8008c58:	2280      	movs	r2, #128	; 0x80
 8008c5a:	0612      	lsls	r2, r2, #24
 8008c5c:	2780      	movs	r7, #128	; 0x80
 8008c5e:	02ff      	lsls	r7, r7, #11
 8008c60:	4137      	asrs	r7, r6
 8008c62:	43ab      	bics	r3, r5
 8008c64:	431f      	orrs	r7, r3
 8008c66:	9701      	str	r7, [sp, #4]
 8008c68:	4b18      	ldr	r3, [pc, #96]	; (8008ccc <rint+0x104>)
 8008c6a:	00e4      	lsls	r4, r4, #3
 8008c6c:	191c      	adds	r4, r3, r4
 8008c6e:	6865      	ldr	r5, [r4, #4]
 8008c70:	6824      	ldr	r4, [r4, #0]
 8008c72:	9901      	ldr	r1, [sp, #4]
 8008c74:	002b      	movs	r3, r5
 8008c76:	0010      	movs	r0, r2
 8008c78:	0022      	movs	r2, r4
 8008c7a:	f7fc ff5f 	bl	8005b3c <__aeabi_dadd>
 8008c7e:	9002      	str	r0, [sp, #8]
 8008c80:	9103      	str	r1, [sp, #12]
 8008c82:	9802      	ldr	r0, [sp, #8]
 8008c84:	9903      	ldr	r1, [sp, #12]
 8008c86:	0022      	movs	r2, r4
 8008c88:	002b      	movs	r3, r5
 8008c8a:	f7fe f91b 	bl	8006ec4 <__aeabi_dsub>
 8008c8e:	e7d2      	b.n	8008c36 <rint+0x6e>
 8008c90:	2e33      	cmp	r6, #51	; 0x33
 8008c92:	dd08      	ble.n	8008ca6 <rint+0xde>
 8008c94:	2380      	movs	r3, #128	; 0x80
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	429e      	cmp	r6, r3
 8008c9a:	d1cc      	bne.n	8008c36 <rint+0x6e>
 8008c9c:	0002      	movs	r2, r0
 8008c9e:	000b      	movs	r3, r1
 8008ca0:	f7fc ff4c 	bl	8005b3c <__aeabi_dadd>
 8008ca4:	e7c7      	b.n	8008c36 <rint+0x6e>
 8008ca6:	2601      	movs	r6, #1
 8008ca8:	4d0a      	ldr	r5, [pc, #40]	; (8008cd4 <rint+0x10c>)
 8008caa:	4276      	negs	r6, r6
 8008cac:	4465      	add	r5, ip
 8008cae:	40ee      	lsrs	r6, r5
 8008cb0:	4206      	tst	r6, r0
 8008cb2:	d0c0      	beq.n	8008c36 <rint+0x6e>
 8008cb4:	0876      	lsrs	r6, r6, #1
 8008cb6:	4206      	tst	r6, r0
 8008cb8:	d0d6      	beq.n	8008c68 <rint+0xa0>
 8008cba:	2380      	movs	r3, #128	; 0x80
 8008cbc:	05db      	lsls	r3, r3, #23
 8008cbe:	412b      	asrs	r3, r5
 8008cc0:	43b2      	bics	r2, r6
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	e7d0      	b.n	8008c68 <rint+0xa0>
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	fffffc01 	.word	0xfffffc01
 8008ccc:	08009160 	.word	0x08009160
 8008cd0:	000fffff 	.word	0x000fffff
 8008cd4:	fffffbed 	.word	0xfffffbed

08008cd8 <scalbn>:
 8008cd8:	004b      	lsls	r3, r1, #1
 8008cda:	b570      	push	{r4, r5, r6, lr}
 8008cdc:	0d5b      	lsrs	r3, r3, #21
 8008cde:	0014      	movs	r4, r2
 8008ce0:	000a      	movs	r2, r1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10e      	bne.n	8008d04 <scalbn+0x2c>
 8008ce6:	004b      	lsls	r3, r1, #1
 8008ce8:	085b      	lsrs	r3, r3, #1
 8008cea:	4303      	orrs	r3, r0
 8008cec:	d011      	beq.n	8008d12 <scalbn+0x3a>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	4b20      	ldr	r3, [pc, #128]	; (8008d74 <scalbn+0x9c>)
 8008cf2:	f7fd fe67 	bl	80069c4 <__aeabi_dmul>
 8008cf6:	4b20      	ldr	r3, [pc, #128]	; (8008d78 <scalbn+0xa0>)
 8008cf8:	000a      	movs	r2, r1
 8008cfa:	429c      	cmp	r4, r3
 8008cfc:	da0a      	bge.n	8008d14 <scalbn+0x3c>
 8008cfe:	4a1f      	ldr	r2, [pc, #124]	; (8008d7c <scalbn+0xa4>)
 8008d00:	4b1f      	ldr	r3, [pc, #124]	; (8008d80 <scalbn+0xa8>)
 8008d02:	e016      	b.n	8008d32 <scalbn+0x5a>
 8008d04:	4d1f      	ldr	r5, [pc, #124]	; (8008d84 <scalbn+0xac>)
 8008d06:	42ab      	cmp	r3, r5
 8008d08:	d107      	bne.n	8008d1a <scalbn+0x42>
 8008d0a:	0002      	movs	r2, r0
 8008d0c:	000b      	movs	r3, r1
 8008d0e:	f7fc ff15 	bl	8005b3c <__aeabi_dadd>
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	004b      	lsls	r3, r1, #1
 8008d16:	0d5b      	lsrs	r3, r3, #21
 8008d18:	3b36      	subs	r3, #54	; 0x36
 8008d1a:	4d1b      	ldr	r5, [pc, #108]	; (8008d88 <scalbn+0xb0>)
 8008d1c:	18e3      	adds	r3, r4, r3
 8008d1e:	42ab      	cmp	r3, r5
 8008d20:	dd0a      	ble.n	8008d38 <scalbn+0x60>
 8008d22:	0002      	movs	r2, r0
 8008d24:	000b      	movs	r3, r1
 8008d26:	4819      	ldr	r0, [pc, #100]	; (8008d8c <scalbn+0xb4>)
 8008d28:	4919      	ldr	r1, [pc, #100]	; (8008d90 <scalbn+0xb8>)
 8008d2a:	f000 f839 	bl	8008da0 <copysign>
 8008d2e:	4a17      	ldr	r2, [pc, #92]	; (8008d8c <scalbn+0xb4>)
 8008d30:	4b17      	ldr	r3, [pc, #92]	; (8008d90 <scalbn+0xb8>)
 8008d32:	f7fd fe47 	bl	80069c4 <__aeabi_dmul>
 8008d36:	e7ec      	b.n	8008d12 <scalbn+0x3a>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dd05      	ble.n	8008d48 <scalbn+0x70>
 8008d3c:	4c15      	ldr	r4, [pc, #84]	; (8008d94 <scalbn+0xbc>)
 8008d3e:	051b      	lsls	r3, r3, #20
 8008d40:	4022      	ands	r2, r4
 8008d42:	431a      	orrs	r2, r3
 8008d44:	0011      	movs	r1, r2
 8008d46:	e7e4      	b.n	8008d12 <scalbn+0x3a>
 8008d48:	001d      	movs	r5, r3
 8008d4a:	3535      	adds	r5, #53	; 0x35
 8008d4c:	da09      	bge.n	8008d62 <scalbn+0x8a>
 8008d4e:	4b12      	ldr	r3, [pc, #72]	; (8008d98 <scalbn+0xc0>)
 8008d50:	0002      	movs	r2, r0
 8008d52:	429c      	cmp	r4, r3
 8008d54:	dce6      	bgt.n	8008d24 <scalbn+0x4c>
 8008d56:	000b      	movs	r3, r1
 8008d58:	4808      	ldr	r0, [pc, #32]	; (8008d7c <scalbn+0xa4>)
 8008d5a:	4909      	ldr	r1, [pc, #36]	; (8008d80 <scalbn+0xa8>)
 8008d5c:	f000 f820 	bl	8008da0 <copysign>
 8008d60:	e7cd      	b.n	8008cfe <scalbn+0x26>
 8008d62:	4c0c      	ldr	r4, [pc, #48]	; (8008d94 <scalbn+0xbc>)
 8008d64:	3336      	adds	r3, #54	; 0x36
 8008d66:	4022      	ands	r2, r4
 8008d68:	051b      	lsls	r3, r3, #20
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	0019      	movs	r1, r3
 8008d6e:	2200      	movs	r2, #0
 8008d70:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <scalbn+0xc4>)
 8008d72:	e7de      	b.n	8008d32 <scalbn+0x5a>
 8008d74:	43500000 	.word	0x43500000
 8008d78:	ffff3cb0 	.word	0xffff3cb0
 8008d7c:	c2f8f359 	.word	0xc2f8f359
 8008d80:	01a56e1f 	.word	0x01a56e1f
 8008d84:	000007ff 	.word	0x000007ff
 8008d88:	000007fe 	.word	0x000007fe
 8008d8c:	8800759c 	.word	0x8800759c
 8008d90:	7e37e43c 	.word	0x7e37e43c
 8008d94:	800fffff 	.word	0x800fffff
 8008d98:	0000c350 	.word	0x0000c350
 8008d9c:	3c900000 	.word	0x3c900000

08008da0 <copysign>:
 8008da0:	b530      	push	{r4, r5, lr}
 8008da2:	004a      	lsls	r2, r1, #1
 8008da4:	0fdb      	lsrs	r3, r3, #31
 8008da6:	07db      	lsls	r3, r3, #31
 8008da8:	0852      	lsrs	r2, r2, #1
 8008daa:	431a      	orrs	r2, r3
 8008dac:	0011      	movs	r1, r2
 8008dae:	bd30      	pop	{r4, r5, pc}

08008db0 <__errno>:
 8008db0:	4b01      	ldr	r3, [pc, #4]	; (8008db8 <__errno+0x8>)
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	4770      	bx	lr
 8008db6:	46c0      	nop			; (mov r8, r8)
 8008db8:	20000034 	.word	0x20000034

08008dbc <_sbrk>:
 8008dbc:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <_sbrk+0x18>)
 8008dbe:	0002      	movs	r2, r0
 8008dc0:	6819      	ldr	r1, [r3, #0]
 8008dc2:	2900      	cmp	r1, #0
 8008dc4:	d101      	bne.n	8008dca <_sbrk+0xe>
 8008dc6:	4904      	ldr	r1, [pc, #16]	; (8008dd8 <_sbrk+0x1c>)
 8008dc8:	6019      	str	r1, [r3, #0]
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	1882      	adds	r2, r0, r2
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	4770      	bx	lr
 8008dd2:	46c0      	nop			; (mov r8, r8)
 8008dd4:	200000d0 	.word	0x200000d0
 8008dd8:	20000404 	.word	0x20000404

08008ddc <__EH_FRAME_BEGIN__>:
 8008ddc:	00000000                                ....

08008de0 <_init>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr

08008dec <_fini>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	46c0      	nop			; (mov r8, r8)
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr
